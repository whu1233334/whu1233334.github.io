<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>风起之时</title>
  
  
  <link href="https://fqzs.netlify.app/atom.xml" rel="self"/>
  
  <link href="https://fqzs.netlify.app/"/>
  <updated>2023-04-04T10:21:25.389Z</updated>
  <id>https://fqzs.netlify.app/</id>
  
  <author>
    <name>风起之时</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hello World</title>
    <link href="https://fqzs.netlify.app/undefined/4a17b156.html"/>
    <id>https://fqzs.netlify.app/undefined/4a17b156.html</id>
    <published>2023-04-04T10:21:25.389Z</published>
    <updated>2023-04-04T10:21:25.389Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
    <category term="helloword" scheme="https://fqzs.netlify.app/tags/helloword/"/>
    
  </entry>
  
  <entry>
    <title>C语言（二）</title>
    <link href="https://fqzs.netlify.app/undefined/3c47b44b.html"/>
    <id>https://fqzs.netlify.app/undefined/3c47b44b.html</id>
    <published>2023-04-03T15:12:00.000Z</published>
    <updated>2023-04-04T10:21:25.389Z</updated>
    
    <content type="html"><![CDATA[<h1 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h1><h2 id="单链表的新建查找"><a href="#单链表的新建查找" class="headerlink" title="单链表的新建查找"></a>单链表的新建查找</h2><h3 id="链表的实现"><a href="#链表的实现" class="headerlink" title="链表的实现"></a>链表的实现</h3><p>链表的实现需要定义结点的结构体类型，例如：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    <span class="type">int</span> data; <span class="comment">// 数据域</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">next</span>;</span> <span class="comment">// 指针域</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>然后需要创建一个头指针，用于指向链表的第一个结点，例如：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">head</span> =</span> <span class="literal">NULL</span>; <span class="comment">// 创建一个空链表</span></span><br></pre></td></tr></table></figure><p>接下来，可以通过动态分配内存的方式，创建新的结点，并将它们链接起来，例如：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">p</span> =</span> (<span class="keyword">struct</span> node *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> node)); <span class="comment">// 创建一个新结点</span></span><br><span class="line">p-&gt;data = <span class="number">10</span>; <span class="comment">// 给数据域赋值</span></span><br><span class="line">p-&gt;next = <span class="literal">NULL</span>; <span class="comment">// 给指针域赋值</span></span><br><span class="line">head = p; <span class="comment">// 将头指针指向新结点</span></span><br></pre></td></tr></table></figure><p>这样就实现了一个只有一个结点的链表。如果要添加更多的结点，可以重复上述过程，并将新结点的地址赋给前一个结点的指针域，例如：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">q</span> =</span> (<span class="keyword">struct</span> node *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> node)); <span class="comment">// 创建另一个新结点</span></span><br><span class="line">q-&gt;data = <span class="number">20</span>; <span class="comment">// 给数据域赋值</span></span><br><span class="line">q-&gt;next = <span class="literal">NULL</span>; <span class="comment">// 给指针域赋值</span></span><br><span class="line">p-&gt;next = q; <span class="comment">// 将前一个结点的指针域指向新结点</span></span><br></pre></td></tr></table></figure><h3 id="链表的删除-插入-查找"><a href="#链表的删除-插入-查找" class="headerlink" title="链表的删除-插入-查找"></a>链表的删除-插入-查找</h3><p>例如，如果要删除链表中的第三个结点，可以用以下代码实现：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">temp</span> =</span> head; <span class="comment">// temp 指向头结点</span></span><br><span class="line">temp = temp-&gt;next; <span class="comment">// temp 指向第二个结点</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">del</span> =</span> temp-&gt;next; <span class="comment">// del 指向要删除的第三个结点</span></span><br><span class="line">temp-&gt;next = del-&gt;next; <span class="comment">// 将第二个结点的指针域指向第四个结点</span></span><br><span class="line"><span class="built_in">free</span>(del); <span class="comment">// 释放第三个结点的内存空间</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>例如，如果要在链表中的第三个结点后插入一个新的结点，可以用以下代码实现：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">new</span> =</span> (<span class="keyword">struct</span> node *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> node)); <span class="comment">// 申请一个新的结点</span></span><br><span class="line">new-&gt;data = x; <span class="comment">// 将要插入的数据赋值给新结点的数据域</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">temp</span> =</span> head; <span class="comment">// temp 指向头结点</span></span><br><span class="line">temp = temp-&gt;next-&gt;next; <span class="comment">// temp 指向第三个结点</span></span><br><span class="line">new-&gt;next = temp-&gt;next; <span class="comment">// 将新结点的指针域指向第四个结点</span></span><br><span class="line">temp-&gt;next = new; <span class="comment">// 将第三个结点的指针域指向新结点</span></span><br></pre></td></tr></table></figure><p>例如，如果要在链表中查找第一个值为 x 的结点，可以用以下代码实现：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">p</span> =</span> head-&gt;next; <span class="comment">// p 指向首元结点</span></span><br><span class="line"><span class="type">int</span> i = <span class="number">1</span>; <span class="comment">// i 记录当前结点的位置</span></span><br><span class="line"><span class="keyword">while</span> (p != <span class="literal">NULL</span>) &#123; <span class="comment">// 遍历链表</span></span><br><span class="line">    <span class="keyword">if</span> (p-&gt;data == x) &#123; <span class="comment">// 如果找到值为 x 的结点</span></span><br><span class="line">        <span class="keyword">return</span> i; <span class="comment">// 返回位置</span></span><br><span class="line">    &#125;</span><br><span class="line">    p = p-&gt;next; <span class="comment">// p 指向下一个结点</span></span><br><span class="line">    i++; <span class="comment">// i 加一</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>; <span class="comment">// 如果遍历到尾部，仍未找到，返回 -1</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="实现顺序表-插入-删除"><a href="#实现顺序表-插入-删除" class="headerlink" title="实现顺序表 插入 删除"></a>实现顺序表 插入 删除</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span>  </span></span><br><span class="line">  </span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MaxSize 100  </span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> ElemType;  </span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span>  </span><br><span class="line">    ElemType data[MaxSize];  </span><br><span class="line">    <span class="type">int</span> length;  </span><br><span class="line">&#125;SqList;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//插入到第二个的函数  </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Put_arry</span><span class="params">(SqList &amp;L,ElemType e)</span>&#123;  </span><br><span class="line">    <span class="type">int</span> i = L.data[<span class="number">1</span>];  </span><br><span class="line">    <span class="type">int</span> j;  </span><br><span class="line">    <span class="keyword">for</span>(j=L.length;j&gt;<span class="number">1</span>;j--)&#123;  </span><br><span class="line">        L.data[j]=L.data[j<span class="number">-1</span>];  </span><br><span class="line">    &#125;  </span><br><span class="line">    L.data[<span class="number">1</span>]=e;  </span><br><span class="line">    L.length++;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//打印顺序表的方法  </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">print_arr</span><span class="params">(SqList L)</span>&#123;  </span><br><span class="line">    <span class="type">int</span> i;  </span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;L.length;i++)&#123;  </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%3d &quot;</span>,L.data[i]);<span class="comment">//&quot;%3表示打印的数字占3个空格  </span></span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//删除元素方法  </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Delet_arry</span><span class="params">(SqList &amp;L,ElemType e)</span>&#123;  </span><br><span class="line">    <span class="type">int</span> i;  </span><br><span class="line">    <span class="keyword">for</span>(i=e;i&lt;L.length;i++)&#123;  </span><br><span class="line">        L.data[i<span class="number">-1</span>]=L.data[i];  </span><br><span class="line">    &#125;  </span><br><span class="line">    L.length--;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;  </span><br><span class="line">    SqList L;  </span><br><span class="line">    L.data[<span class="number">0</span>]=<span class="number">1</span>;  </span><br><span class="line">    L.data[<span class="number">1</span>]=<span class="number">2</span>;  </span><br><span class="line">    L.data[<span class="number">2</span>]=<span class="number">3</span>;  </span><br><span class="line">    L.length=<span class="number">3</span>;  </span><br><span class="line">    ElemType e;  </span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;e);  </span><br><span class="line">    Put_arry(L,e);  </span><br><span class="line">    print_arr(L);  </span><br><span class="line">  </span><br><span class="line">    ElemType del;  </span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;del);  </span><br><span class="line">    Delet_arry(L,del);  </span><br><span class="line">    print_arr(L);  </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="头插法新建链表"><a href="#头插法新建链表" class="headerlink" title="头插法新建链表"></a>头插法新建链表</h3><p>这段代码，实现头插法新建一个链表，每次新建一个结点，都是放到第一个结点（注意头结点不是第一个结点，头结点指向第一个结点），该链表存储int类型数据，通过scanf输入建立对应的存储结点，直到输入9999,结束创建，并且不会包含9999</p><p><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304032033156.png" alt="Snipaste_2023-03-07_17-01-14.png"></p><p><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304032032806.png" alt="Snipaste_2023-03-07_17-07-51.png"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span>  </span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> ElemType;  </span><br><span class="line"><span class="comment">//定义结点结构体  </span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">LNode</span>&#123;</span>  </span><br><span class="line">    ElemType data;<span class="comment">//数据域  </span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">LNode</span> *<span class="title">next</span>;</span><span class="comment">//指针域  </span></span><br><span class="line">&#125;LNode,*LinkList;  </span><br><span class="line"></span><br><span class="line"><span class="comment">//头插法新建链表</span></span><br><span class="line"><span class="comment">//定义一个方法，申请头结点的空间  </span></span><br><span class="line"><span class="comment">//LNode*是结构体指针，与LinkList是完全等价的  </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">list_head_insert</span><span class="params">(LNode* &amp;L)</span>&#123;  </span><br><span class="line">    L= (LinkList)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));<span class="comment">//给L申请一个头结点结点空间  </span></span><br><span class="line">    L-&gt;next=<span class="literal">NULL</span>;  </span><br><span class="line">    ElemType x;<span class="comment">//读取的第一个元素  </span></span><br><span class="line">    LinkList s;<span class="comment">//用来指向新节点  </span></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x);  </span><br><span class="line">    <span class="keyword">while</span> (x!=<span class="number">9999</span>)&#123;  </span><br><span class="line">        s=(LinkList) <span class="built_in">malloc</span>(<span class="keyword">sizeof</span> (LNode));<span class="comment">//给s申请一个新的空间  </span></span><br><span class="line">        s-&gt;data=x;  </span><br><span class="line">        s-&gt;next=L-&gt;next;<span class="comment">//实现头插法，s成为第一个结点  </span></span><br><span class="line">        L-&gt;next=s;<span class="comment">//L作为头结点，任然指向第一个结点  </span></span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x);<span class="comment">//读取x的值  </span></span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="type">void</span> <span class="title function_">print_LinKlist</span><span class="params">(LinkList L)</span>&#123;  </span><br><span class="line">    L=L-&gt;next;  </span><br><span class="line">    <span class="keyword">while</span>(L!=<span class="literal">NULL</span>)&#123;  </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%3d&quot;</span>,L-&gt;data);  </span><br><span class="line">        L=L-&gt;next;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;  </span><br><span class="line">    LinkList L;<span class="comment">//定义链表的头指针  </span></span><br><span class="line">    list_head_insert(L);  </span><br><span class="line">    print_LinKlist(L);  </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="尾插法新建链表"><a href="#尾插法新建链表" class="headerlink" title="尾插法新建链表"></a>尾插法新建链表</h3><p><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304032042218.png" alt="Snipaste_2023-03-07_17-20-00.png"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span>  </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> ElemType;  </span><br><span class="line"><span class="comment">//定义结点结构体  </span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">LNode</span>&#123;</span>  </span><br><span class="line">    ElemType data;<span class="comment">//数据域  </span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">LNode</span> *<span class="title">next</span>;</span><span class="comment">//指针域  </span></span><br><span class="line">&#125;LNode,*LinkList;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//尾插法新建链表  </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">list_tail_insert</span><span class="params">(LinkList &amp;L)</span>&#123;  </span><br><span class="line">    L=(LinkList) <span class="built_in">malloc</span>(<span class="keyword">sizeof</span> (LNode));  </span><br><span class="line">    L-&gt;next=<span class="literal">NULL</span>;  </span><br><span class="line">    ElemType x;  </span><br><span class="line">    LNode *s,*r=L;<span class="comment">//s指向新节点，r指向尾结点 ,将L赋给s,r ,相当于s,r,L都是头结点</span></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x);  </span><br><span class="line">    <span class="keyword">while</span>(x!=<span class="number">9999</span>)&#123;  </span><br><span class="line">        s=(LinkList) <span class="built_in">malloc</span>(<span class="keyword">sizeof</span> (LNode));  </span><br><span class="line">        s-&gt;data=x;  </span><br><span class="line">        r-&gt;next=s;  </span><br><span class="line">        r=s;  <span class="comment">//将s赋给r,r重新指向尾结点</span></span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x);  </span><br><span class="line">    &#125;  </span><br><span class="line">    r-&gt;next=<span class="literal">NULL</span>;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="type">void</span> <span class="title function_">print_LinKlist</span><span class="params">(LinkList L)</span>&#123;  </span><br><span class="line">    L=L-&gt;next;  </span><br><span class="line">    <span class="keyword">while</span>(L!=<span class="literal">NULL</span>)&#123;  </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%3d&quot;</span>,L-&gt;data);  </span><br><span class="line">        L=L-&gt;next;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;  </span><br><span class="line">    LinkList L;<span class="comment">//定义链表的头指针  </span></span><br><span class="line">    list_tail_insert(L);  </span><br><span class="line">    print_LinKlist(L);  </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="链表-按值查找-按位置查找"><a href="#链表-按值查找-按位置查找" class="headerlink" title="链表-按值查找-按位置查找"></a>链表-按值查找-按位置查找</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span>  </span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> ElemType;  </span><br><span class="line"><span class="comment">//定义结点结构体  </span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">LNode</span>&#123;</span>  </span><br><span class="line">    ElemType data;<span class="comment">//数据域  </span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">LNode</span> *<span class="title">next</span>;</span><span class="comment">//指针域  </span></span><br><span class="line">&#125;LNode,*LinkList;  </span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment">//尾插法新建链表  </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">list_tail_insert</span><span class="params">(LinkList &amp;L)</span>&#123;  </span><br><span class="line">    L=(LinkList) <span class="built_in">malloc</span>(<span class="keyword">sizeof</span> (LNode));  </span><br><span class="line">    L-&gt;next=<span class="literal">NULL</span>;  </span><br><span class="line">    ElemType x;  </span><br><span class="line">    LNode *s,*r=L;<span class="comment">//s指向新节点，r指向尾结点  </span></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x);  </span><br><span class="line">    <span class="keyword">while</span>(x!=<span class="number">9999</span>)&#123;  </span><br><span class="line">        s=(LinkList) <span class="built_in">malloc</span>(<span class="keyword">sizeof</span> (LNode));  </span><br><span class="line">        s-&gt;data=x;  </span><br><span class="line">        r-&gt;next=s;  </span><br><span class="line">        r=s;  </span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x);  </span><br><span class="line">    &#125;  </span><br><span class="line">    r-&gt;next=<span class="literal">NULL</span>;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="type">void</span> <span class="title function_">print_LinKlist</span><span class="params">(LinkList L)</span>&#123;  </span><br><span class="line">    L=L-&gt;next;  </span><br><span class="line">    <span class="keyword">while</span>(L!=<span class="literal">NULL</span>)&#123;  </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%3d&quot;</span>,L-&gt;data);  </span><br><span class="line">        L=L-&gt;next;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//按位置查找  </span></span><br><span class="line"> LinkList <span class="title function_">GetEle_by_pos</span><span class="params">(LinkList L,<span class="type">int</span> pos)</span>&#123;  </span><br><span class="line"> <span class="comment">//说明：L头结点的位置是0</span></span><br><span class="line">    <span class="keyword">if</span>(pos&lt;<span class="number">1</span>)&#123;  </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">if</span>(pos==<span class="number">0</span>)&#123;  </span><br><span class="line">        <span class="keyword">return</span> L;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="type">int</span> i=<span class="number">0</span>;  </span><br><span class="line">    <span class="keyword">while</span>(i&lt;pos)&#123;  </span><br><span class="line">        L=L-&gt;next;  </span><br><span class="line">        i++;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> L;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//按值查找  </span></span><br><span class="line">LinkList <span class="title function_">GetEle_by_value</span><span class="params">(LinkList L,<span class="type">int</span> value)</span>&#123;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">while</span>(L)&#123;<span class="comment">//表示L不为空，循环  </span></span><br><span class="line">        <span class="keyword">if</span>(L-&gt;data!=value)&#123;  </span><br><span class="line">            L=L-&gt;next;  </span><br><span class="line">        &#125;<span class="keyword">if</span>(L-&gt;data==value)&#123;  </span><br><span class="line">            <span class="keyword">return</span> L;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;  </span><br><span class="line">  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;  </span><br><span class="line">    LinkList L;<span class="comment">//定义链表的头指针  </span></span><br><span class="line">    list_tail_insert(L);  </span><br><span class="line">    print_LinKlist(L);  </span><br><span class="line">  </span><br><span class="line">    LinkList pNode1 = GetEle_by_pos(L,<span class="number">3</span>);  </span><br><span class="line">    <span class="keyword">if</span>(pNode1!=<span class="literal">NULL</span>)&#123;  </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\nsearch by postion success\n&quot;</span>);  </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;the value is %d\n&quot;</span>,pNode1-&gt;data);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">    LinkList pNode2 = GetEle_by_value(L, <span class="number">8</span>);  </span><br><span class="line">    <span class="keyword">if</span>(pNode2!=<span class="literal">NULL</span>)&#123;  </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;search by value success\n&quot;</span>);  </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;the value is %d\n&quot;</span>,pNode2-&gt;data);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="链表-往第i-个位置插入元素"><a href="#链表-往第i-个位置插入元素" class="headerlink" title="链表 往第i 个位置插入元素"></a>链表 往第i 个位置插入元素</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span>  </span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> ElemType;  </span><br><span class="line"><span class="comment">//定义结点结构体  </span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">LNode</span>&#123;</span>  </span><br><span class="line">    ElemType data;<span class="comment">//数据域  </span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">LNode</span> *<span class="title">next</span>;</span><span class="comment">//指针域  </span></span><br><span class="line">&#125;LNode,*LinkList;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//尾插法新建链表  </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">list_tail_insert</span><span class="params">(LinkList &amp;L)</span>&#123;  </span><br><span class="line">    L=(LinkList) <span class="built_in">malloc</span>(<span class="keyword">sizeof</span> (LNode));  </span><br><span class="line">    L-&gt;next=<span class="literal">NULL</span>;  </span><br><span class="line">    ElemType x;  </span><br><span class="line">    LNode *s,*r=L;<span class="comment">//s指向新节点，r指向尾结点  </span></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x);  </span><br><span class="line">    <span class="keyword">while</span>(x!=<span class="number">9999</span>)&#123;  </span><br><span class="line">        s=(LinkList) <span class="built_in">malloc</span>(<span class="keyword">sizeof</span> (LNode));  </span><br><span class="line">        s-&gt;data=x;  </span><br><span class="line">        r-&gt;next=s;  </span><br><span class="line">        r=s;  </span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x);  </span><br><span class="line">    &#125;  </span><br><span class="line">    r-&gt;next=<span class="literal">NULL</span>;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="comment">//打印链表的方法</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">print_LinKlist</span><span class="params">(LinkList L)</span>&#123;  </span><br><span class="line">    L=L-&gt;next;  </span><br><span class="line">    <span class="keyword">while</span>(L!=<span class="literal">NULL</span>)&#123;  </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%3d&quot;</span>,L-&gt;data);  </span><br><span class="line">        L=L-&gt;next;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//按位置查找  </span></span><br><span class="line"> LinkList <span class="title function_">GetEle_by_pos</span><span class="params">(LinkList L,<span class="type">int</span> pos)</span>&#123;  </span><br><span class="line">    <span class="keyword">if</span>(pos&lt;<span class="number">1</span>)&#123;  </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">if</span>(pos==<span class="number">0</span>)&#123;  </span><br><span class="line">        <span class="keyword">return</span> L;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="type">int</span> i=<span class="number">0</span>;  </span><br><span class="line">    <span class="keyword">while</span>(i&lt;pos)&#123;  </span><br><span class="line">        L=L-&gt;next;  </span><br><span class="line">        i++;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> L;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//插入方法，往第i个位置插入元素  </span></span><br><span class="line"><span class="type">bool</span> <span class="title function_">ListFrontInsert</span><span class="params">(LinkList L,<span class="type">int</span> i,<span class="type">int</span> insert)</span>&#123;  </span><br><span class="line">    <span class="comment">//先找到链表第i-1个位置，并指向  </span></span><br><span class="line">    LinkList p = GetEle_by_pos(L, i<span class="number">-1</span>);  </span><br><span class="line">    <span class="keyword">if</span>(p==<span class="literal">NULL</span>)&#123;  </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="comment">//定义一个新的结点  </span></span><br><span class="line">    LinkList q;  </span><br><span class="line">    q = (LinkList) <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));  </span><br><span class="line">    q-&gt;next=p-&gt;next;  </span><br><span class="line">    q-&gt;data=insert;  </span><br><span class="line">    p-&gt;next=q;  </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"> &#125;  </span><br><span class="line">  </span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;  </span><br><span class="line">    LinkList L;<span class="comment">//定义链表的头指针  </span></span><br><span class="line"></span><br><span class="line">    list_tail_insert(L);  </span><br><span class="line">    print_LinKlist(L);  </span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);  </span><br><span class="line">    ListFrontInsert(L,<span class="number">2</span>,<span class="number">80</span>);  <span class="comment">//往第二个位置，插入80</span></span><br><span class="line">    print_LinKlist(L);  </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="单链表的删除"><a href="#单链表的删除" class="headerlink" title="单链表的删除"></a>单链表的删除</h2><h3 id="单链表删除实战"><a href="#单链表删除实战" class="headerlink" title="单链表删除实战"></a>单链表删除实战</h3><p><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304032047101.png" alt="Snipaste_2023-03-08_22-06-07.png"></p><p><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304032048552.png" alt="Snipaste_2023-03-08_22-03-33.png"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span>  </span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> ElemType;  </span><br><span class="line"><span class="comment">//定义结点结构体  </span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">LNode</span>&#123;</span>  </span><br><span class="line">    ElemType data;<span class="comment">//数据域  </span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">LNode</span> *<span class="title">next</span>;</span><span class="comment">//指针域  </span></span><br><span class="line">&#125;LNode,*LinkList;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//尾插法新建链表  </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">list_tail_insert</span><span class="params">(LinkList &amp;L)</span>&#123;  </span><br><span class="line">    L=(LinkList) <span class="built_in">malloc</span>(<span class="keyword">sizeof</span> (LNode));  </span><br><span class="line">    L-&gt;next=<span class="literal">NULL</span>;  </span><br><span class="line">    ElemType x;  </span><br><span class="line">    LNode *s,*r=L;<span class="comment">//s指向新节点，r指向尾结点  </span></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x);  </span><br><span class="line">    <span class="keyword">while</span>(x!=<span class="number">9999</span>)&#123;  </span><br><span class="line">        s=(LinkList) <span class="built_in">malloc</span>(<span class="keyword">sizeof</span> (LNode));  </span><br><span class="line">        s-&gt;data=x;  </span><br><span class="line">        r-&gt;next=s;  </span><br><span class="line">        r=s;  </span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x);  </span><br><span class="line">    &#125;  </span><br><span class="line">    r-&gt;next=<span class="literal">NULL</span>;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="comment">//按位置查找  </span></span><br><span class="line">LinkList <span class="title function_">GetEle_by_pos</span><span class="params">(LinkList L,<span class="type">int</span> pos)</span>&#123;  </span><br><span class="line">    <span class="comment">//说明：L头结点的位置是0  </span></span><br><span class="line">    <span class="keyword">if</span>(pos&lt;<span class="number">1</span>)&#123;  </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">if</span>(pos==<span class="number">0</span>)&#123;  </span><br><span class="line">        <span class="keyword">return</span> L;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="type">int</span> i=<span class="number">0</span>;  </span><br><span class="line">    <span class="keyword">while</span>(i&lt;pos)&#123;  </span><br><span class="line">        L=L-&gt;next;  </span><br><span class="line">        i++;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> L;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="comment">//打印链表的方法  </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">print_LinKlist</span><span class="params">(LinkList L)</span>&#123;  </span><br><span class="line">    L=L-&gt;next;  </span><br><span class="line">    <span class="keyword">while</span>(L!=<span class="literal">NULL</span>)&#123;  </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%3d&quot;</span>,L-&gt;data);  </span><br><span class="line">        L=L-&gt;next;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//单链表的删除方法  </span></span><br><span class="line"><span class="type">bool</span> <span class="title function_">delet_list</span><span class="params">(LinkList L,<span class="type">int</span> pos)</span>&#123;  <span class="comment">//删除时，L是不会变得，所以不需要加引用</span></span><br><span class="line">    <span class="keyword">if</span>(pos&gt;<span class="number">1</span>)&#123;  </span><br><span class="line">        LinkList p = GetEle_by_pos(L,pos - <span class="number">1</span>); <span class="comment">//拿到哟啊删除结点的前一个结点指针</span></span><br><span class="line">        LinkList q=p-&gt;next;  <span class="comment">//拿到要删除的结点指针</span></span><br><span class="line">        <span class="keyword">if</span>(q!=<span class="literal">NULL</span>)&#123;  </span><br><span class="line">            p-&gt;next=q-&gt;next;  </span><br><span class="line">            <span class="built_in">free</span>(q);  <span class="comment">//释放被删除元素的空间</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;        </span><br><span class="line">            &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;  </span><br><span class="line">    LinkList L;  </span><br><span class="line">    list_tail_insert(L);  </span><br><span class="line">    print_LinKlist(L);  </span><br><span class="line">    delet_list(L,<span class="number">2</span>);  </span><br><span class="line">    print_LinKlist(L);  </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="真题，链表转置实战"><a href="#真题，链表转置实战" class="headerlink" title="真题，链表转置实战"></a>真题，链表转置实战</h3><p>转置图示<img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304032116045.png" alt="Snipaste_2023-03-08_23-48-37.png"></p><p>合并图解<br><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304032117457.png" alt="Snipaste_2023-03-09_21-01-21.png"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span>  </span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> ElemType;  </span><br><span class="line"><span class="comment">//定义结点结构体  </span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">LNode</span>&#123;</span>  </span><br><span class="line">    ElemType data;<span class="comment">//数据域  </span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">LNode</span> *<span class="title">next</span>;</span><span class="comment">//指针域  </span></span><br><span class="line">&#125;LNode,*LinkList;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//尾插法新建链表  </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">list_tail_insert</span><span class="params">(LinkList &amp;L)</span>&#123;  </span><br><span class="line">    L=(LinkList) <span class="built_in">malloc</span>(<span class="keyword">sizeof</span> (LNode));  </span><br><span class="line">    L-&gt;next=<span class="literal">NULL</span>;  </span><br><span class="line">    ElemType x;  </span><br><span class="line">    LNode *s,*r=L;<span class="comment">//s指向新节点，r指向尾结点  </span></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x);  </span><br><span class="line">    <span class="keyword">while</span>(x!=<span class="number">9999</span>)&#123;  </span><br><span class="line">        s=(LinkList) <span class="built_in">malloc</span>(<span class="keyword">sizeof</span> (LNode));  </span><br><span class="line">        s-&gt;data=x;  </span><br><span class="line">        r-&gt;next=s;  </span><br><span class="line">        r=s;  </span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x);  </span><br><span class="line">    &#125;  </span><br><span class="line">    r-&gt;next=<span class="literal">NULL</span>;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="comment">//打印链表的方法  </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">print_LinKlist</span><span class="params">(LinkList L)</span>&#123;  </span><br><span class="line">    L=L-&gt;next;  </span><br><span class="line">    <span class="keyword">while</span>(L!=<span class="literal">NULL</span>)&#123;  </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%3d&quot;</span>,L-&gt;data);  </span><br><span class="line">        L=L-&gt;next;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//找中心结点  </span></span><br><span class="line"><span class="comment">//当链表奇数个结点取中间，偶数个结点取前一个  </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">find_middle</span><span class="params">(LinkList L,LinkList &amp;L2)</span>&#123;<span class="comment">//L表示第一条链表头结点，L2表示第二条链表头结点  </span></span><br><span class="line">    L2=(LinkList) <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));  </span><br><span class="line">    LinkList p,pp;<span class="comment">//双指针  </span></span><br><span class="line">    p=pp=L-&gt;next;  </span><br><span class="line">    <span class="keyword">while</span>(pp)&#123;  </span><br><span class="line">        pp=pp-&gt;next;  </span><br><span class="line">        <span class="keyword">if</span>(pp==<span class="literal">NULL</span>)&#123;<span class="comment">//必须判断每一步是否为空，防止崩溃  </span></span><br><span class="line">            <span class="keyword">break</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">        pp=pp-&gt;next;  </span><br><span class="line">        <span class="keyword">if</span>(pp==<span class="literal">NULL</span>)&#123;  </span><br><span class="line">            <span class="keyword">break</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">        p=p-&gt;next;  </span><br><span class="line">    &#125;  </span><br><span class="line">    L2-&gt;next=p-&gt;next;  </span><br><span class="line">    p-&gt;next=<span class="literal">NULL</span>;<span class="comment">//链表最后一个结点next要为空  </span></span><br><span class="line">&#125;  </span><br><span class="line"><span class="comment">//找中心结点，while循环次数是n/2</span></span><br><span class="line">  </span><br><span class="line"><span class="comment">//逆置方法  </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">reverse</span><span class="params">(LinkList L2)</span>&#123;<span class="comment">//逆转是不改变头指针的  </span></span><br><span class="line">    LinkList r,s,t;  </span><br><span class="line">    r=L2-&gt;next;  </span><br><span class="line">    <span class="keyword">if</span>(r==<span class="literal">NULL</span>)&#123;<span class="comment">//没有结点  </span></span><br><span class="line">        <span class="keyword">return</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">    s=r-&gt;next;  </span><br><span class="line">    <span class="keyword">if</span>(s==<span class="literal">NULL</span>)&#123;<span class="comment">//一个结点  </span></span><br><span class="line">        <span class="keyword">return</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">    t=s-&gt;next;  </span><br><span class="line">    <span class="keyword">while</span>(t)&#123;  </span><br><span class="line">        s-&gt;next=r;<span class="comment">//逆转  </span></span><br><span class="line">        r=s;  </span><br><span class="line">        s=t;  </span><br><span class="line">        t=t-&gt;next;  </span><br><span class="line">    &#125;  </span><br><span class="line">    s-&gt;next=r;  </span><br><span class="line">    L2-&gt;next-&gt;next=<span class="literal">NULL</span>;<span class="comment">//逆置后原链表第一个结点，变成最后一个结点，它的next=NULL;  </span></span><br><span class="line">    L2-&gt;next=s;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="comment">//逆转函数逆转的是L2链表，执行次数是n/2,</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//合并方法</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">merge</span><span class="params">(LinkList L,LinkList L2)</span>&#123;  </span><br><span class="line">    LinkList pcur,p,q;  </span><br><span class="line">    pcur=L-&gt;next;  </span><br><span class="line">    p=pcur-&gt;next;  </span><br><span class="line">    q=L2-&gt;next;  </span><br><span class="line">    <span class="keyword">while</span>(p!=<span class="literal">NULL</span>&amp;&amp;q!=<span class="literal">NULL</span>)&#123;  </span><br><span class="line">        pcur-&gt;next=q;  </span><br><span class="line">        q=q-&gt;next;  </span><br><span class="line">        pcur=pcur-&gt;next;  </span><br><span class="line">        pcur-&gt;next=p;  </span><br><span class="line">        p=p-&gt;next;  </span><br><span class="line">        pcur=pcur-&gt;next;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="comment">//上面merge函数的while循环遍历次数是n/2,所以时间复杂度是O(n)</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;  </span><br><span class="line">    LinkList L;  </span><br><span class="line">    LinkList L2;  </span><br><span class="line">  </span><br><span class="line">    list_tail_insert(L);  </span><br><span class="line">    print_LinKlist(L);  </span><br><span class="line">  </span><br><span class="line">    find_middle(L,L2);  </span><br><span class="line">    print_LinKlist(L);  </span><br><span class="line">    print_LinKlist(L2);  </span><br><span class="line">  </span><br><span class="line">    reverse(L2);  </span><br><span class="line">    print_LinKlist(L2);  </span><br><span class="line">  </span><br><span class="line">    merge(L,L2);  </span><br><span class="line">    <span class="built_in">free</span>(L2);  </span><br><span class="line">    print_LinKlist(L);  </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line"><span class="comment">//综上，merge、find_middle、reverse函数总的时间复杂度是1.5n,忽略首项系数O(n)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="OJ测试"><a href="#OJ测试" class="headerlink" title="OJ测试"></a>OJ测试</h3><p>作业说明<img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304032107529.png" alt=""></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span>  </span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> ElemType;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">LNode</span>&#123;</span>  </span><br><span class="line">    ElemType data;  </span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">LNode</span>* <span class="title">next</span>;</span>  </span><br><span class="line">&#125;LNOde,*Linklist;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//尾插法新建链表  </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">list_tail_insert</span><span class="params">(Linklist &amp;L)</span>&#123;  </span><br><span class="line">    L=(Linklist) <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));  </span><br><span class="line">    L-&gt;next=<span class="literal">NULL</span>;  </span><br><span class="line">    Linklist s,r=L;  </span><br><span class="line">    <span class="type">int</span> x;  </span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x);  </span><br><span class="line">    <span class="keyword">while</span>(x!=<span class="number">9999</span>)&#123;  </span><br><span class="line">        s=(Linklist) <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));  </span><br><span class="line">        s-&gt;data=x;  </span><br><span class="line">        r-&gt;next=s;  </span><br><span class="line">        r=s;  </span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x);  </span><br><span class="line">    &#125;  </span><br><span class="line">    s-&gt;next=<span class="literal">NULL</span>;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//按位置查找的方法  </span></span><br><span class="line">Linklist <span class="title function_">getEle_by_pos</span><span class="params">(Linklist L,<span class="type">int</span> pos)</span>&#123;  </span><br><span class="line">    <span class="keyword">if</span>(pos==<span class="number">0</span>)&#123;  </span><br><span class="line">        <span class="keyword">return</span> L;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">if</span>(pos&lt;<span class="number">1</span>)&#123;  </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="type">int</span> i=<span class="number">0</span>;  </span><br><span class="line">    <span class="keyword">while</span>(L&amp;&amp;i&lt;pos)&#123; <span class="comment">//注意：while(i&lt;pos)&#123;&#125; 忽略了L为空 也不能循环 </span></span><br><span class="line">        L=L-&gt;next;  </span><br><span class="line">        i++;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> L;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//按位置插入的方法  </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">list_insert</span><span class="params">(Linklist L,<span class="type">int</span> i,<span class="type">int</span> insert)</span>&#123;  </span><br><span class="line">    Linklist p = getEle_by_pos(L,i - <span class="number">1</span>);  </span><br><span class="line">    <span class="keyword">if</span>(p==<span class="literal">NULL</span>)&#123;  </span><br><span class="line">        <span class="keyword">return</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">    Linklist s;  </span><br><span class="line">  </span><br><span class="line">    s=(Linklist) <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));  </span><br><span class="line">    s-&gt;next=p-&gt;next;  </span><br><span class="line">    s-&gt;data=insert;  </span><br><span class="line">    p-&gt;next=s;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//打印链表的方法  </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">print_list</span><span class="params">(Linklist L)</span>&#123;  </span><br><span class="line">    <span class="keyword">while</span>(L)&#123;  </span><br><span class="line">        L=L-&gt;next;  </span><br><span class="line">        <span class="keyword">if</span>(L==<span class="literal">NULL</span>)&#123;  </span><br><span class="line">            <span class="keyword">break</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%3d&quot;</span>,L-&gt;data);  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;  </span><br><span class="line">    Linklist L;  </span><br><span class="line">    list_tail_insert(L);  </span><br><span class="line">    print_list(L);  </span><br><span class="line">    list_insert(L,<span class="number">2</span>,<span class="number">99</span>);  </span><br><span class="line">    print_list(L);  </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="栈与队列"><a href="#栈与队列" class="headerlink" title="栈与队列"></a>栈与队列</h2><h2 id="二叉树的建树和遍历"><a href="#二叉树的建树和遍历" class="headerlink" title="二叉树的建树和遍历"></a>二叉树的建树和遍历</h2><h2 id="查找算法"><a href="#查找算法" class="headerlink" title="查找算法"></a>查找算法</h2><h2 id="排序算法"><a href="#排序算法" class="headerlink" title="排序算法"></a>排序算法</h2><h3 id="排序算法分类"><a href="#排序算法分类" class="headerlink" title="排序算法分类"></a>排序算法分类</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">排序算法分为 交换类排序、插入类排序、选择类排序、归并类排序</span><br><span class="line"></span><br><span class="line">交换类排序</span><br><span class="line"></span><br><span class="line">冒泡排序</span><br><span class="line">初冒泡排序,一般靠选择题，考大题几率小</span><br><span class="line">快速排序</span><br><span class="line">更重要，考大题</span><br><span class="line"></span><br><span class="line">插入类排序</span><br><span class="line"></span><br><span class="line">直接插入</span><br><span class="line"></span><br><span class="line">折半插入</span><br><span class="line"></span><br><span class="line">希尔排序，以上三种插入算法，一般考选择题，考大题概率低</span><br><span class="line">选择排序</span><br><span class="line"></span><br><span class="line">简单选择排序</span><br><span class="line"></span><br><span class="line">堆排序(重要)</span><br><span class="line">很有可能考大题</span><br></pre></td></tr></table></figure><h3 id="冒泡排序原理及实战"><a href="#冒泡排序原理及实战" class="headerlink" title="冒泡排序原理及实战"></a>冒泡排序原理及实战</h3><p><img src="C:\Users\123\Desktop\wenhu_blog\source\img\siteicon\Snipaste_2023-03-18_10-56-14.png" alt=""></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;time.h&gt;</span>  </span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> ElemType;  </span><br><span class="line"><span class="comment">//定义顺序表结构体  </span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span>  </span><br><span class="line">    ElemType *str;  </span><br><span class="line">    <span class="type">int</span> len;  </span><br><span class="line">&#125;SSTable;  </span><br><span class="line"><span class="comment">//顺序表初始化，添加随机数  </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">init_table</span><span class="params">(SSTable &amp;SST,<span class="type">int</span> len)</span>&#123;  </span><br><span class="line">    srand(time(<span class="literal">NULL</span>));  </span><br><span class="line">    SST.len=len;  </span><br><span class="line">    SST.str=(ElemType*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span> (ElemType)*SST.len);  </span><br><span class="line">    <span class="type">int</span> i;  </span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;SST.len;i++)&#123;  </span><br><span class="line">        SST.str[i]=rand()%<span class="number">100</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="comment">//打印顺序表  </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">print_table</span><span class="params">(SSTable SST)</span>&#123;  </span><br><span class="line">    <span class="type">int</span> i;  </span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;SST.len;i++)&#123;  </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%3d&quot;</span>,SST.str[i]);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="comment">//交换两个元素的方法  </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">swap</span><span class="params">(ElemType &amp;a,ElemType &amp;b)</span>&#123;  </span><br><span class="line">    ElemType temp;  </span><br><span class="line">    temp=a;  </span><br><span class="line">    a=b;  </span><br><span class="line">    b=temp;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="comment">//冒泡排序算法  </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">bubble_sort</span><span class="params">(ElemType arr[],<span class="type">int</span> n)</span>&#123;  </span><br><span class="line">    <span class="type">int</span> i,j;  </span><br><span class="line">    <span class="type">bool</span> flag;  <span class="comment">//用来标记是否发生了交换</span></span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n<span class="number">-1</span>;i++)&#123;<span class="comment">//外层循环需要比较n-1次  </span></span><br><span class="line">        flag=<span class="literal">false</span>;  </span><br><span class="line">        <span class="keyword">for</span>(j=n<span class="number">-1</span>;j&gt;i;j--)&#123;<span class="comment">//内层循环  </span></span><br><span class="line">            <span class="keyword">if</span>(arr[j]&lt;arr[j<span class="number">-1</span>])&#123;  </span><br><span class="line">                swap(arr[j],arr[j<span class="number">-1</span>]);  </span><br><span class="line">                flag=<span class="literal">true</span>;<span class="comment">//有交换就返回true  </span></span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">if</span>(flag==<span class="literal">false</span>)&#123;<span class="comment">//如果这一趟没有比较，直接结束无须比较  </span></span><br><span class="line">            <span class="keyword">return</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;  </span><br><span class="line">    SSTable T;  </span><br><span class="line">    <span class="type">int</span> len=<span class="number">9</span>;  </span><br><span class="line">    init_table(T,len);  </span><br><span class="line">    print_table(T);  </span><br><span class="line">  </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);  </span><br><span class="line">    bubble_sort(T.str,T.len);  </span><br><span class="line">    print_table(T);  </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://rsjnvx1rp.hn-bkt.clouddn.com/202304041820109.png" alt="Snipaste_2023-03-19_14-45-55.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;链表&quot;&gt;&lt;a href=&quot;#链表&quot; class=&quot;headerlink&quot; title=&quot;链表&quot;&gt;&lt;/a&gt;链表&lt;/h1&gt;&lt;h2 id=&quot;单链表的新建查找&quot;&gt;&lt;a href=&quot;#单链表的新建查找&quot; class=&quot;headerlink&quot; title=&quot;单链表的新建查找&quot;</summary>
      
    
    
    
    
    <category term="C语言" scheme="https://fqzs.netlify.app/tags/C%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>obisidain图床</title>
    <link href="https://fqzs.netlify.app/undefined/7b58c309.html"/>
    <id>https://fqzs.netlify.app/undefined/7b58c309.html</id>
    <published>2023-04-01T23:19:00.000Z</published>
    <updated>2023-04-04T10:21:25.389Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装Picgo"><a href="#安装Picgo" class="headerlink" title="安装Picgo"></a>安装Picgo</h2><p>GitHub搜索picgo</p><h2 id="申请一个token"><a href="#申请一个token" class="headerlink" title="申请一个token"></a>申请一个token</h2><p>注意必须勾选仓库权限</p><h2 id="配置仓库信息"><a href="#配置仓库信息" class="headerlink" title="配置仓库信息"></a>配置仓库信息</h2><p><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304020033355.png" alt="image.png"></p><h2 id="下载obsidian中的picgo插件"><a href="#下载obsidian中的picgo插件" class="headerlink" title="下载obsidian中的picgo插件"></a>下载obsidian中的picgo插件</h2><h2 id="设置几个插件选项"><a href="#设置几个插件选项" class="headerlink" title="设置几个插件选项"></a>设置几个插件选项</h2><p><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304020035364.png" alt="image.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;安装Picgo&quot;&gt;&lt;a href=&quot;#安装Picgo&quot; class=&quot;headerlink&quot; title=&quot;安装Picgo&quot;&gt;&lt;/a&gt;安装Picgo&lt;/h2&gt;&lt;p&gt;GitHub搜索picgo&lt;/p&gt;
&lt;h2 id=&quot;申请一个token&quot;&gt;&lt;a href=&quot;#申请一</summary>
      
    
    
    
    
    <category term="obisidian" scheme="https://fqzs.netlify.app/tags/obisidian/"/>
    
  </entry>
  
  <entry>
    <title>技术随想</title>
    <link href="https://fqzs.netlify.app/undefined/dfb8a81f.html"/>
    <id>https://fqzs.netlify.app/undefined/dfb8a81f.html</id>
    <published>2023-03-31T15:58:00.000Z</published>
    <updated>2023-04-04T10:21:25.389Z</updated>
    
    <content type="html"><![CDATA[<h2 id="配置文章页post-front-matter"><a href="#配置文章页post-front-matter" class="headerlink" title="配置文章页post-front-matter"></a>配置文章页post-front-matter</h2><h2 id="添加徽标"><a href="#添加徽标" class="headerlink" title="添加徽标"></a>添加徽标</h2><h2 id="打字机效果"><a href="#打字机效果" class="headerlink" title="打字机效果"></a><a href="https://zhuanlan.zhihu.com/p/492207978">打字机效果</a></h2><h2 id="Hexo-Butterfly-一些常见问题"><a href="#Hexo-Butterfly-一些常见问题" class="headerlink" title="Hexo + Butterfly 一些常见问题"></a><a href="https://tzy1997.com/articles/hexo1612/#%E9%A6%96%E9%A1%B5%E6%89%93%E5%AD%97%E6%9C%BA%E6%95%88%E6%9E%9C">Hexo + Butterfly 一些常见问题</a></h2><h2 id="Algolia搜索系统"><a href="#Algolia搜索系统" class="headerlink" title="Algolia搜索系统"></a><a href="https://www.fomal.cc/posts/d1927166.html">Algolia搜索系统</a></h2><h2 id="页面布局优化"><a href="#页面布局优化" class="headerlink" title="页面布局优化"></a><a href="">页面布局优化</a></h2><h2 id="右边按钮阅读进度"><a href="#右边按钮阅读进度" class="headerlink" title="右边按钮阅读进度"></a><a href="https://www.fomal.cc/posts/2d7ac914.html">右边按钮阅读进度</a></h2><h2 id="文章三栏"><a href="#文章三栏" class="headerlink" title="文章三栏"></a><a href="https://www.fomal.cc/posts/d739261b.html">文章三栏</a></h2><h2 id="为文章封面图片"><a href="#为文章封面图片" class="headerlink" title="为文章封面图片"></a>为文章封面图片</h2><p>要为每一篇文章的栏目配置图片，需要在文章的top_imge和cover标签传一个图片的url链接，注意不是图片链接<br>url链接通过上传至图床获取<br>文章的 markdown 文档上，在 添加 ，并填上要显示的图片地址。Front-mattercover<br>如果不配置 ，可以设置显示默认的 cover。cover<br>如果不想在首页显示 cover， 可以设置为 。false</p><h2 id="自定义字体"><a href="#自定义字体" class="headerlink" title="自定义字体"></a><a href="https://tzy1997.com/articles/hexo1605/">自定义字体</a></h2><h2 id="修改头像及网站图标"><a href="#修改头像及网站图标" class="headerlink" title="修改头像及网站图标"></a>修改头像及网站图标</h2><p>改网站图标：修改主题文件找到favicon,修改本地的图片<br>改头像：修改主题配置文件找到avater，修改图片url</p><h2 id="双栏修改"><a href="#双栏修改" class="headerlink" title="双栏修改"></a><a href="https://zfe.space/post/hexo-butterfly-article-double-row.html">双栏修改</a></h2><h2 id="加载动画"><a href="#加载动画" class="headerlink" title="加载动画"></a><a href="https://anzhiy.cn/posts/52d8.html">加载动画</a></h2><p>遇到问题：按照流程，发现存在半屏加载页面不消失的情况，于是换用4.4版本的步骤，解决了上述问题。所以butterfly版本只最为参考，实际还是按照实际情况判断选择哪种方式</p><h2 id="利用clion修改本地文件存在的问题"><a href="#利用clion修改本地文件存在的问题" class="headerlink" title="利用clion修改本地文件存在的问题"></a>利用clion修改本地文件存在的问题</h2><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>用clion修改本地博客配置文件，无法检测到stly,pug,文件的改动，导致推送时漏掉上述类型配置文件</p><h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3><p>放弃用clion修改配置文件，换用其他编辑器；或者，直接在文件夹执行git操作</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;配置文章页post-front-matter&quot;&gt;&lt;a href=&quot;#配置文章页post-front-matter&quot; class=&quot;headerlink&quot; title=&quot;配置文章页post-front-matter&quot;&gt;&lt;/a&gt;配置文章页post-front-matt</summary>
      
    
    
    
    
    <category term="butterfly" scheme="https://fqzs.netlify.app/tags/butterfly/"/>
    
  </entry>
  
</feed>
