<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>风起之时</title>
  
  
  <link href="https://fqzs.netlify.app/atom.xml" rel="self"/>
  
  <link href="https://fqzs.netlify.app/"/>
  <updated>2023-04-13T14:59:09.854Z</updated>
  <id>https://fqzs.netlify.app/</id>
  
  <author>
    <name>风起之时</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hello World</title>
    <link href="https://fqzs.netlify.app/undefined/4a17b156.html"/>
    <id>https://fqzs.netlify.app/undefined/4a17b156.html</id>
    <published>2023-04-13T14:59:09.854Z</published>
    <updated>2023-04-13T14:59:09.854Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
    <category term="helloword" scheme="https://fqzs.netlify.app/tags/helloword/"/>
    
  </entry>
  
  <entry>
    <title>CMD命令</title>
    <link href="https://fqzs.netlify.app/undefined/3e5cd712.html"/>
    <id>https://fqzs.netlify.app/undefined/3e5cd712.html</id>
    <published>2023-04-12T23:12:00.000Z</published>
    <updated>2023-04-13T14:59:09.854Z</updated>
    
    <content type="html"><![CDATA[<h1 id="调出远程桌面控制"><a href="#调出远程桌面控制" class="headerlink" title="调出远程桌面控制"></a>调出远程桌面控制</h1><hr><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mstsc</span><br></pre></td></tr></table></figure><p><code>输入ip地址</code><br><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304122313838.png" alt="image.png"></p><h1 id="查看连接过的wifi密码"><a href="#查看连接过的wifi密码" class="headerlink" title="查看连接过的wifi密码"></a>查看连接过的wifi密码</h1><hr><p><code>1.查看历史所有wifi</code><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netsh wlan show profiles</span><br></pre></td></tr></table></figure></p><p><code>2.查看指定wifi的密码</code><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netsh wlan show profile name=&quot;wifi名&quot; key=clear</span><br></pre></td></tr></table></figure></p><h1 id="查询本机当前ip地址"><a href="#查询本机当前ip地址" class="headerlink" title="查询本机当前ip地址"></a>查询本机当前ip地址</h1><hr><ul><li><code>查看当前局域网ip和其他信息</code><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ipconfig</span><br></pre></td></tr></table></figure><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304122329040.png" alt="image.png"></li></ul><ul><li><code>查看更详细信息</code><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ipconfig /all</span><br></pre></td></tr></table></figure><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304122328873.png" alt="image.png"></li></ul><ul><li><code>查看当前外网地址</code><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -L ip.tool.lu</span><br></pre></td></tr></table></figure><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304122325042.png" alt="image.png"></li></ul><h1 id="ping检测ip地址或服务器网络情况"><a href="#ping检测ip地址或服务器网络情况" class="headerlink" title="ping检测ip地址或服务器网络情况"></a>ping检测ip地址或服务器网络情况</h1><hr><ul><li><p><code>短暂监测</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ping (+要检测的ip地址/绑定了ip的域名)</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304122333813.png" alt="image.png"></p></li><li><p><code>持续监测</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ping (+要检测的ip地址/绑定了ip的域名) -t</span><br></pre></td></tr></table></figure></li></ul><h1 id="调出资源监测器"><a href="#调出资源监测器" class="headerlink" title="调出资源监测器"></a>调出资源监测器</h1><hr><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">perfmon.msc</span><br></pre></td></tr></table></figure><p><code>监测磁盘、网络、CPUz占用率</code><br><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304122339558.png" alt="image.png"></p><h1 id="查看电脑当前所有用户"><a href="#查看电脑当前所有用户" class="headerlink" title="查看电脑当前所有用户"></a>查看电脑当前所有用户</h1><hr><p><code>查看用户名</code><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net user</span><br></pre></td></tr></table></figure><br><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304122343812.png" alt="image.png"></p><p><code>删除用户名</code><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net user 名字 /del</span><br></pre></td></tr></table></figure></p><h1 id="修复丢失或损坏的系统文件"><a href="#修复丢失或损坏的系统文件" class="headerlink" title="修复丢失或损坏的系统文件"></a>修复丢失或损坏的系统文件</h1><hr><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">工具可以允许用户扫描所有受保护的系统文件，并且检查系统文件的完整性，然后恢复Windows损坏的系统文件</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sfc /scannow</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;调出远程桌面控制&quot;&gt;&lt;a href=&quot;#调出远程桌面控制&quot; class=&quot;headerlink&quot; title=&quot;调出远程桌面控制&quot;&gt;&lt;/a&gt;调出远程桌面控制&lt;/h1&gt;&lt;hr&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>C语言(三)</title>
    <link href="https://fqzs.netlify.app/undefined/1db5c403.html"/>
    <id>https://fqzs.netlify.app/undefined/1db5c403.html</id>
    <published>2023-04-10T21:42:00.000Z</published>
    <updated>2023-04-13T14:59:09.854Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数据的机器级表示"><a href="#数据的机器级表示" class="headerlink" title="数据的机器级表示"></a>数据的机器级表示</h1><h2 id="补码解析"><a href="#补码解析" class="headerlink" title="补码解析"></a>补码解析</h2><hr><ul><li><code>补码</code>：计算机只能加法运算<code>2+(-5)</code>,所以需要补码，补码大小是<code>原码取反+1</code></li><li><p><code>原码</code>：补码取反+1</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">0000 0000 0000 0000 0000 0000 0000 0101     //5的原码</span><br><span class="line">1111 1111 1111 1111 1111 1111 1111 1011     //补码 -5    fffffffb </span><br></pre></td></tr></table></figure><p><code>由于X8架构采用的是小端存储</code>：低字节在前(低地址)，高字节在后(高地址) —&gt; <code>fbffffff</code></p></li><li><p><code>补码原码相加</code>：对应位置相加</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">0000 0000 0000 0000 0000 0000 0000 0010     //2的原码</span><br><span class="line">1111 1111 1111 1111 1111 1111 1111 1011     //补码 -5 </span><br><span class="line"></span><br><span class="line">1111 1111 1111 1111 1111 1111 1111 1101     //补码 -3 =2+(-5)  --&gt;依次相加</span><br></pre></td></tr></table></figure></li><li><p>对于有符号数，最高位为1，就是负数</p></li></ul><h2 id="整型不同类型"><a href="#整型不同类型" class="headerlink" title="整型不同类型"></a>整型不同类型</h2><div class="table-container"><table><thead><tr><th style="text-align:left">整型类型</th><th style="text-align:center">符号</th><th style="text-align:center">字节</th><th style="text-align:center">整型数范围</th></tr></thead><tbody><tr><td style="text-align:left">基本整型</td><td style="text-align:center">int</td><td style="text-align:center">4</td><td style="text-align:center">-2^31~(2^31-1)</td></tr><tr><td style="text-align:left">短整型</td><td style="text-align:center">short</td><td style="text-align:center">2</td><td style="text-align:center">-2^15~(2^15-1)</td></tr><tr><td style="text-align:left">长整型</td><td style="text-align:center">long</td><td style="text-align:center">(32位)4;(64位)8</td><td style="text-align:center">-2^31~(2^31-1)或-2^63~(-2^63-1)</td></tr><tr><td style="text-align:left">无符号整型</td><td style="text-align:center">unsigned int</td><td style="text-align:center">4</td><td style="text-align:center">0~2^32-1</td></tr><tr><td style="text-align:left">无符号短整型</td><td style="text-align:center">unsigned short</td><td style="text-align:center">2</td><td style="text-align:center">0~2^16-1</td></tr><tr><td style="text-align:left">无符号长整型</td><td style="text-align:center">unsigned long</td><td style="text-align:center">(32位)4;(62位)8</td><td style="text-align:center">0~(2^32-1)或0~(-2^64-1)</td></tr></tbody></table></div><ul><li><code>有符号数</code>：最高位只表示正负，不代表大小</li><li><code>无符号数</code>：最高位代表大小，不表示正负</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">short最小数字：</span><br><span class="line">1000 0000 0000 0000  //补码 -32768 </span><br><span class="line">1000 0000 0000 0000  //原码  32768</span><br></pre></td></tr></table></figure><h2 id="溢出解析"><a href="#溢出解析" class="headerlink" title="溢出解析"></a>溢出解析</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//数值溢出</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="type">short</span> a = <span class="number">32767</span>;   <span class="comment">//01111 1111 1111 1111     32767</span></span><br><span class="line">a = a+<span class="number">1</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,a);  <span class="comment">//10000 0000 0000 0000    -32768 </span></span><br><span class="line"><span class="comment">//解决办法是用更大的空间存储</span></span><br><span class="line"><span class="type">int</span> i;</span><br><span class="line">i=a+<span class="number">1</span>;   </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304111919441.png" alt="image.png"></p><h2 id="浮点数类型"><a href="#浮点数类型" class="headerlink" title="浮点数类型"></a>浮点数类型</h2><h3 id="浮点数IEE754标准解析"><a href="#浮点数IEE754标准解析" class="headerlink" title="浮点数IEE754标准解析"></a>浮点数IEE754标准解析</h3><hr><div class="table-container"><table><thead><tr><th style="text-align:center">浮点类型</th><th style="text-align:center">字节</th></tr></thead><tbody><tr><td style="text-align:center">float</td><td style="text-align:center">4</td></tr><tr><td style="text-align:center">double</td><td style="text-align:center">8</td></tr></tbody></table></div><div class="table-container"><table><thead><tr><th>格式</th><th>SEEEEEEE</th><th>EMMMMMMM</th><th>MMMMMMMM</th><th>MMMMMMMM</th></tr></thead><tbody><tr><td>二进制</td><td>01000000</td><td>10010000</td><td>00000000</td><td>00000000</td></tr><tr><td>十六进制</td><td>40</td><td>90</td><td>00</td><td>00</td></tr></tbody></table></div><ul><li><code>S</code>：符号位1表示正，0表示负</li><li><code>E</code>：指数部分，(指数部分的值规定只能是1到254，不能是全0，全1)，指数部分运算前都要减去127(这是EEE-754的规定)，因为还要表示负指数。这里的<code>10000001</code>转换为十进制数为129,129-127=2，即实际指数部分为2.<code>表示小数部分小数点往后移两位</code></li><li><code>M</code>：小数部分 <code>0010000 00000000 00000000</code> 左边默认省略了一个1，应该是<code>1.0010000 00000000 00000000(二进制数)</code></li></ul><blockquote><p>分析上面浮点数<br>S=0，表示正数<br>E=2^0+2^7-127=129-127=2,表示小数点向后移动两位<br>M=<code>0010000 00000000</code> ，前面默认有个1，<code>1.0010000 00000000 00000000</code><br>因为E，M小数点向后移动两位，<code>100.10000 00000000 00000000</code> =2^2 + 2^-1 =4.5</p></blockquote><h3 id="浮点数精度丢失"><a href="#浮点数精度丢失" class="headerlink" title="浮点数精度丢失"></a>浮点数精度丢失</h3><hr><ul><li>浮点型变量分为单精度（float）型、双精度（double）型</li><li>float的数值范围：<code>2^-126~2^127</code>(因为指数部分值1~254，再减去127，得到的-126~127，也就是二进制位数小数点后126位，到小数点前127位)</li><li>float的精度：<code>6~7位</code></li><li>double数值范围：<code>2^-1022~2^1023</code></li><li>double的精度：<code>15~16位</code><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">我们赋给a的值为1.23456789e10,加20后，应该得到的值为1.234567892e10,</span><br><span class="line">但b输出结果却是b=12345678848.000000,变得更小了。我们将这种现象称为精度丢失，因</span><br><span class="line">为float型数据能够表示的有效数字为7位，最多只保证1.234567e10的正确性，要使结果正确，</span><br><span class="line">就需要把a和b均改为double型，因为double可以表示的精度为15~16位。</span><br></pre></td></tr></table></figure><code>int 溢出 可以考虑改用double存储</code></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;数据的机器级表示&quot;&gt;&lt;a href=&quot;#数据的机器级表示&quot; class=&quot;headerlink&quot; title=&quot;数据的机器级表示&quot;&gt;&lt;/a&gt;数据的机器级表示&lt;/h1&gt;&lt;h2 id=&quot;补码解析&quot;&gt;&lt;a href=&quot;#补码解析&quot; class=&quot;headerlink&quot; </summary>
      
    
    
    
    
    <category term="C语言" scheme="https://fqzs.netlify.app/tags/C%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>git远程仓库</title>
    <link href="https://fqzs.netlify.app/undefined/3f8bae1e.html"/>
    <id>https://fqzs.netlify.app/undefined/3f8bae1e.html</id>
    <published>2023-04-09T18:20:00.000Z</published>
    <updated>2023-04-13T14:59:09.854Z</updated>
    
    <content type="html"><![CDATA[<h1 id="获取本地仓库及其基础操作指令"><a href="#获取本地仓库及其基础操作指令" class="headerlink" title="获取本地仓库及其基础操作指令"></a>获取本地仓库及其基础操作指令</h1><ul><li>初始化仓库文件夹：<code>git init</code></li><li><code>git status</code>：查看的修改的状态（暂存区、工作区）</li><li><code>git add 单个文件名|通配符.</code>：工作区-&gt;暂存区</li><li><code>git commit -m &#39;注释内容&#39;</code>：暂存区-&gt;本地仓库的当前分支</li><li><code>git-log</code>：查看提交日志</li><li><code>git reset --hard commitID</code>：版本回退；commitID 可以使用 git-log 或 git log 指令查看</li><li><code>git branch</code>：查看本地分支</li><li><code>git branch 分支名</code>：创建本地分支</li><li><code>git checkout 分支名</code>：切换本地分支</li><li><code>git merge 分支名称</code>：一个分支上的提交合并到另一个分支上</li><li><code>git branch -d 分支名</code>：删除分支，不能删除当前分支<h1 id="配置SSH公钥"><a href="#配置SSH公钥" class="headerlink" title="配置SSH公钥"></a>配置SSH公钥</h1></li></ul><hr><ul><li>生成SSH公钥：<code>ssh-keygen -t rsa</code>   不断回车; 如果公钥已经存在，则自动覆盖</li><li>获取公钥：<code>cat ~/.ssh/id_rsa.pub</code></li><li>公钥获取后，将其添加到github仓库设置中，以获取推送权限</li><li>验证是否配置成功: <code>ssh-T:git@github.com</code></li></ul><h1 id="添加远程仓库"><a href="#添加远程仓库" class="headerlink" title="添加远程仓库"></a>添加远程仓库</h1><hr><ul><li>命令：<code>git remote add &lt;远端名称&gt; &lt;仓库路径&gt;</code><ul><li>远端名称，默认是origin，取决于远端服务器设置</li><li>仓库路径，从远端服务器获取此URL<br><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304091828480.png" alt="image.png"></li></ul></li></ul><h1 id="查看远程仓库"><a href="#查看远程仓库" class="headerlink" title="查看远程仓库"></a>查看远程仓库</h1><hr><ul><li>命令：<code>git remote</code><br><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304091828567.png" alt="image.png"></li></ul><h1 id="推送到远程仓库"><a href="#推送到远程仓库" class="headerlink" title="推送到远程仓库"></a>推送到远程仓库</h1><hr><ul><li>命令：<code>git push [-f] [--set-upstream] [远端名称 [本地分支名][:远端分支名] ]</code></li><li>当前分支已经和远端分支关联，则可以省略分支名和远端名<code>git push</code></li><li><code>--set-upstream</code> 推送到远端的同时并且建立起和远端分支的关联关系。<br><code>git push --set-upstream origin master</code></li></ul><h1 id="从远程仓库克隆"><a href="#从远程仓库克隆" class="headerlink" title="从远程仓库克隆"></a>从远程仓库克隆</h1><hr><ul><li>命令: <code>git clone &lt;仓库路径&gt; [本地目录]</code><br><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304091834830.png" alt="image.png"></li></ul><h1 id="从远程仓库抓取和拉取"><a href="#从远程仓库抓取和拉取" class="headerlink" title="从远程仓库抓取和拉取"></a>从远程仓库抓取和拉取</h1><ul><li>抓取 命令：<code>git fetch [remote name] [branch name]</code> </li><li>抓取指令就是将仓库里的更新都抓取到本地，不会进行合并</li><li><p>如果不指定远端名称和分支名，则抓取所有分支。</p></li><li><p>拉取 命令：<code>git pull [remote name] [branch name]</code></p></li><li>拉取指令就是将远端仓库的修改拉到本地并自动进行合并，等同于fetch+merge</li><li>如果不指定远端名称和分支名，则抓取所有并更新当前分支。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;获取本地仓库及其基础操作指令&quot;&gt;&lt;a href=&quot;#获取本地仓库及其基础操作指令&quot; class=&quot;headerlink&quot; title=&quot;获取本地仓库及其基础操作指令&quot;&gt;&lt;/a&gt;获取本地仓库及其基础操作指令&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;初始化仓库文件夹：&lt;code&gt;g</summary>
      
    
    
    
    
    <category term="git" scheme="https://fqzs.netlify.app/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>白鲸vpn无限白嫖</title>
    <link href="https://fqzs.netlify.app/undefined/e47230b0.html"/>
    <id>https://fqzs.netlify.app/undefined/e47230b0.html</id>
    <published>2023-04-09T11:23:00.000Z</published>
    <updated>2023-04-13T14:59:09.858Z</updated>
    
    <content type="html"><![CDATA[<h1 id="pc端"><a href="#pc端" class="headerlink" title="pc端"></a>pc端</h1><h2 id="官网下载地址"><a href="#官网下载地址" class="headerlink" title="官网下载地址"></a>官网下载地址</h2><p><a href="https://www.bjchuhai.com/?mid=3020">https://www.bjchuhai.com/?mid=3020</a></p><h2 id="注册"><a href="#注册" class="headerlink" title="注册"></a>注册</h2><ul><li>随便填写一个邮箱，密码随意，没有二次验证</li><li>邀请码可以填写安卓手机端的账户邀请码，可以延长30天试用时间，并加速5%<br><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304091132920.png" alt="image.png"></li></ul><h2 id="重复注册"><a href="#重复注册" class="headerlink" title="重复注册"></a>重复注册</h2><ul><li><p>注册之后重新注册一个账号<br>一般情况提示账户密码错误<br><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304091136700.png" alt="image.png"></p></li><li><p>找到<code>‪C:\ProgramData\Whale</code> 路径下的文件，并将所有文件删除<br><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304091138420.png" alt="image.png"></p></li><li><p>再次注册即可</p></li></ul><h1 id="手机端-安卓"><a href="#手机端-安卓" class="headerlink" title="手机端(安卓)"></a>手机端(安卓)</h1><h2 id="手机注册"><a href="#手机注册" class="headerlink" title="手机注册"></a>手机注册</h2><p>与pc注册步骤一致</p><h2 id="重复注册-1"><a href="#重复注册-1" class="headerlink" title="重复注册"></a>重复注册</h2><p>手机最多注册两个账号，且无法像pc端进行重复注册操作<br>有两个方法：</p><ul><li>安装安卓模拟器(推荐voms pro)：通过手机模拟器，注册账号，并改变模拟器虚拟机的设备信息，实现重复注册，再通过填写邀请码延长时间</li><li>利用电脑端重复注册时，填写手机账号的邀请码，延长手机账号使用时间</li><li>注意,pc端，手机端 账号<code>不通用</code></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;pc端&quot;&gt;&lt;a href=&quot;#pc端&quot; class=&quot;headerlink&quot; title=&quot;pc端&quot;&gt;&lt;/a&gt;pc端&lt;/h1&gt;&lt;h2 id=&quot;官网下载地址&quot;&gt;&lt;a href=&quot;#官网下载地址&quot; class=&quot;headerlink&quot; title=&quot;官网下载地址&quot;&gt;&lt;</summary>
      
    
    
    
    
    <category term="VPN 白嫖 备用" scheme="https://fqzs.netlify.app/tags/VPN-%E7%99%BD%E5%AB%96-%E5%A4%87%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title>C语言(一)</title>
    <link href="https://fqzs.netlify.app/undefined/cc777f4a.html"/>
    <id>https://fqzs.netlify.app/undefined/cc777f4a.html</id>
    <published>2023-04-06T22:42:00.000Z</published>
    <updated>2023-04-13T14:59:09.854Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h1><div class="table-container"><table><thead><tr><th>类型</th><th>字节数</th><th>说明</th></tr></thead><tbody><tr><td>int</td><td>4字节</td><td></td></tr><tr><td>float</td><td>4字节</td><td>形式-&gt;0.123 或 1.23e-1</td></tr><tr><td>char</td><td>1字节</td><td>与int类型可通用，printf(“%c\n”,c+32);—&gt;a</td></tr><tr><td>字符串</td><td>字符数+1</td><td>字符串结尾\0字符不显示，用于判断字符串结束，因此+1</td></tr></tbody></table></div><p><code>一个字节byte = 8 bit</code><br>-&gt; 1 byte = 0000 0000 </p><h1 id="printf函数"><a href="#printf函数" class="headerlink" title="printf函数"></a>printf函数</h1><div class="note blue [icon] modern"><p>printf函数的具体代码格式</p></div><div class="table-container"><table><thead><tr><th style="text-align:center">代码</th><th style="text-align:center">格式</th></tr></thead><tbody><tr><td style="text-align:center">%c</td><td style="text-align:center">字符</td></tr><tr><td style="text-align:center">%d</td><td style="text-align:center">带符号整数,-左对齐，不带右对齐(printf函数默认靠右对齐)</td></tr><tr><td style="text-align:center">%x</td><td style="text-align:center">无符号十六进制数，用小写字母</td></tr><tr><td style="text-align:center">%X</td><td style="text-align:center">无符号十六进制数，用大写字母</td></tr><tr><td style="text-align:center">%f</td><td style="text-align:center">浮点数；%5.2f显示5位数字，并带有2位小数的浮点数</td></tr><tr><td style="text-align:center">%s</td><td style="text-align:center">一串字符，%10s代表占用10个字符位置</td></tr><tr><td style="text-align:center">%u</td><td style="text-align:center">无符号整数</td></tr><tr><td style="text-align:center">%p</td><td style="text-align:center">一个指针</td></tr></tbody></table></div><h1 id="scanf函数"><a href="#scanf函数" class="headerlink" title="scanf函数"></a>scanf函数</h1><h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><div class="table-container"><table><thead><tr><th style="text-align:left">数组初始化</th><th style="text-align:left">例子</th></tr></thead><tbody><tr><td style="text-align:left">（1）在定义数组时对数组元素赋初值。</td><td style="text-align:left">int a[10]={0,1,2,3,4,5,6,7,8,9};不能写成int a[10];a[10]={0,1,2,3,4,5,6,7,8,9}</td></tr><tr><td style="text-align:left">（2）可以只给一部分元素赋值</td><td style="text-align:left">int a[10]={0,1,2,3,4};</td></tr><tr><td style="text-align:left">（3）使一个数组中全部元素的值为 0，那么可以写为</td><td style="text-align:left">int a[10]={0,0,0,0,0,0,0,0,0,0};或int a[10]={0};</td></tr><tr><td style="text-align:left">（4）在对全部数组元素赋初值时，数据的个数，可以不指定数组的长度</td><td style="text-align:left">int a[]={1,2,3,4,5};</td></tr></tbody></table></div><ul><li>数组大小不能动态定义<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">int k;</span><br><span class="line">int a[k]; --&gt;错误</span><br></pre></td></tr></table></figure></li><li>数组名a存的是数组的起始地址，数组名传递到子函数后，形参接收到的是数组起始地址</li><li>指针在64为计算机上是8个字节</li></ul><h1 id="调试debug"><a href="#调试debug" class="headerlink" title="调试debug"></a>调试debug</h1><p><code>进入子函数</code></p><ul><li>按向下箭头进入子函数</li><li>按拐弯箭头越过子函数，只在当前函数一步一步走下去<br><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304091733716.png" alt="image.png"></li></ul><p><code>查看变量内存视图</code></p><ul><li>点击内存视图</li><li>输入&amp;i，i为要查看内存视图的变量<br><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304102154125.png" alt="image.png"></li></ul><h1 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h1><ul><li>指针在64位计算机上站8个字节</li></ul><h1 id="struct结构体"><a href="#struct结构体" class="headerlink" title="struct结构体"></a>struct结构体</h1><h2 id="定义结构体"><a href="#定义结构体" class="headerlink" title="定义结构体"></a>定义结构体</h2><hr><ul><li><p>方式1</p><div class="note pink [icon] [style] flat"><p>这种方式定义的结构体，每次结构体声明都要<code>struct student s；</code>指针声明<code>struct student *p*;</code></p></div><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> 结构体名&#123;</span></span><br><span class="line">[成员列表]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p>方式2</p><div class="note pink [icon] [style] flat"><p>这种方式定义的结构体，结构体声明方式直接<code>stu s；</code>结构体指针<code>pstu p;</code></p></div><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Student</span>&#123;</span><span class="comment">//下面起了别名stu后student可以省略不写</span></span><br><span class="line">[成员列表]</span><br><span class="line">&#125;stu,*pstu; <span class="comment">//stu结构体别名；*pstu结构体指针别名</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="typedef的使用"><a href="#typedef的使用" class="headerlink" title="typedef的使用"></a>typedef的使用</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> Element;<span class="comment">//重命名int类型  Element i;</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> *p;<span class="comment">//重命名指针类型      p k;</span></span><br><span class="line">trpedef <span class="class"><span class="keyword">struct</span> <span class="title">student</span> <span class="title">stu</span>;</span><span class="comment">//如上，重命名结构体类型 stu s;</span></span><br></pre></td></tr></table></figure><h1 id="循环体循环判断"><a href="#循环体循环判断" class="headerlink" title="循环体循环判断"></a>循环体循环判断</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">while(a&lt;i);找到第i个结点</span><br><span class="line">while(a&lt;=i);找到第i+1个结点</span><br><span class="line">同理&gt;;&gt;=</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;数据类型&quot;&gt;&lt;a href=&quot;#数据类型&quot; class=&quot;headerlink&quot; title=&quot;数据类型&quot;&gt;&lt;/a&gt;数据类型&lt;/h1&gt;&lt;div class=&quot;table-container&quot;&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;类型&lt;/th&gt;
&lt;t</summary>
      
    
    
    
    
    <category term="C语言" scheme="https://fqzs.netlify.app/tags/C%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>markdown语法</title>
    <link href="https://fqzs.netlify.app/undefined/f134a8e5.html"/>
    <id>https://fqzs.netlify.app/undefined/f134a8e5.html</id>
    <published>2023-04-06T21:13:00.000Z</published>
    <updated>2023-04-13T14:59:09.854Z</updated>
    
    <content type="html"><![CDATA[<h1 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">---</span><br></pre></td></tr></table></figure><h1 id="高亮显示"><a href="#高亮显示" class="headerlink" title="高亮显示"></a>高亮显示</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% label text color %&#125;</span><br></pre></td></tr></table></figure><ul><li>text    文字</li><li>color可选，背景顏色，默认为 default</li><li>default/blue/pink/red/purple/orange/green</li></ul><h1 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h1><h2 id="表格写法"><a href="#表格写法" class="headerlink" title="表格写法"></a>表格写法</h2><hr><blockquote><p>要添加表，请使用三个或多个连字符（<code>---</code>）创建每列的标题，并使用管道（<code>|</code>）分隔每列。您可以选择在表的任一端添加管道。<br><div class="tabs" id="test1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test1-1">写法1</button></li><li class="tab"><button type="button" data-href="#test1-2">效果1</button></li><li class="tab"><button type="button" data-href="#test1-3">写法2</button></li><li class="tab"><button type="button" data-href="#test1-4">效果2</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test1-1"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">| Syntax      | Description |</span><br><span class="line">| ----------- | ----------- |</span><br><span class="line">| Header      | Title       |</span><br><span class="line">| Paragraph   | Text        |</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-2"><div class="table-container"><table><thead><tr><th>Syntax</th><th>Description</th></tr></thead><tbody><tr><td>Header</td><td>Title</td></tr><tr><td>Paragraph</td><td>Text</td></tr></tbody></table></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-3"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">| Syntax | Description |</span><br><span class="line">| --- | ----------- |</span><br><span class="line">| Header | Title |</span><br><span class="line">| Paragraph | Text |</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-4"><div class="table-container"><table><thead><tr><th>Syntax</th><th>Description</th></tr></thead><tbody><tr><td>Header</td><td>Title</td></tr><tr><td>Paragraph</td><td>Text</td></tr></tbody></table></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div></p></blockquote><h2 id="对齐"><a href="#对齐" class="headerlink" title="对齐"></a>对齐</h2><hr><p>标题行中的连字符的左侧，右侧或两侧添加冒号（<code>:</code>），将列中的文本对齐到左侧，右侧或中心。<br><div class="tabs" id="test1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test1-1">语法</button></li><li class="tab"><button type="button" data-href="#test1-2">效果</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test1-1"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">| Syntax      | Description | Test Text     |</span><br><span class="line">| :---        |    :----:   |          ---: |</span><br><span class="line">| Header      | Title       | Here&#x27;s this   |</span><br><span class="line">| Paragraph   | Text        | And more      |</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-2"><div class="table-container"><table><thead><tr><th style="text-align:left">Syntax</th><th style="text-align:center">Description</th><th style="text-align:right">Test Text</th></tr></thead><tbody><tr><td style="text-align:left">Header</td><td style="text-align:center">Title</td><td style="text-align:right">Here’s this</td></tr><tr><td style="text-align:left">Paragraph</td><td style="text-align:center">Text</td><td style="text-align:right">And more</td></tr></tbody></table></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div></p><h1 id="分栏显示"><a href="#分栏显示" class="headerlink" title="分栏显示"></a>分栏显示</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tabs test1 %&#125;</span><br><span class="line">&lt;!-- tab 栏目1--&gt;</span><br><span class="line">**This is Tab 1.**</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab 栏目2--&gt;</span><br><span class="line">**This is Tab 2.**</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab 栏目3--&gt;</span><br><span class="line">**This is Tab 3.**</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure><div class="tabs" id="test1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test1-1">栏目1</button></li><li class="tab"><button type="button" data-href="#test1-2">栏目2</button></li><li class="tab"><button type="button" data-href="#test1-3">栏目3</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test1-1"><p>这里是1</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-2"><p>这里是2</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-3"><p>这里是2</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="标签外挂"><a href="#标签外挂" class="headerlink" title="标签外挂"></a>标签外挂</h1><div class="tabs" id="test1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test1-1">语法</button></li><li class="tab"><button type="button" data-href="#test1-2">效果</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test1-1"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note [color] [icon] [style] %&#125;</span><br><span class="line">Any content (support inline tags too.io).</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><div class="table-container"><table><thead><tr><th>名称</th><th>用法</th></tr></thead><tbody><tr><td>color</td><td>顔色(default / blue / pink / red / purple / orange / green)</td></tr><tr><td>icon</td><td>可配置自定义 icon (只支持 fontawesome 图标, 也可以配置 no-icon )</td></tr><tr><td>style</td><td>可以覆盖配置中的 style（simple/modern/flat/disabled）</td></tr></tbody></table></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-2"><div class="note blue [icon] modern"><p>效果展示</p></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="大量内容隐藏"><a href="#大量内容隐藏" class="headerlink" title="大量内容隐藏"></a>大量内容隐藏</h1><div class="tabs" id="test1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test1-1">写法</button></li><li class="tab"><button type="button" data-href="#test1-2">效果</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test1-1"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;details&gt;  </span><br><span class="line">&lt;summary&gt;显示的文字&lt;/summary&gt;  </span><br><span class="line">隐藏的内容  </span><br><span class="line">&lt;/details&gt;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-2"><details>  <summary>显示的文字</summary>  隐藏的内容  </details><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;分割线&quot;&gt;&lt;a href=&quot;#分割线&quot; class=&quot;headerlink&quot; title=&quot;分割线&quot;&gt;&lt;/a&gt;分割线&lt;/h1&gt;&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pr</summary>
      
    
    
    
    
    <category term="markdown" scheme="https://fqzs.netlify.app/tags/markdown/"/>
    
  </entry>
  
  <entry>
    <title>数据结构</title>
    <link href="https://fqzs.netlify.app/undefined/79666db.html"/>
    <id>https://fqzs.netlify.app/undefined/79666db.html</id>
    <published>2023-04-06T18:10:00.000Z</published>
    <updated>2023-04-13T14:59:09.858Z</updated>
    
    <content type="html"><![CDATA[<h1 id="绪论"><a href="#绪论" class="headerlink" title="绪论"></a>绪论</h1><blockquote><p>概念：</p><ul><li>数据元素：一个数据体，考虑为一个人，一份订单…</li><li>数据项：数据体内的各项，人的信息项，订单的信息项…</li><li>数据对象：具有相同性质，数据元素的集合<br><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304061849567.png" alt="image.png"></li><li>数据结构：相互间存在一种或多种特定关系的数据元素的集合</li></ul><p>数据结构三要素：<br><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304061902827.png" alt="image.png"></p><p>物理结构(存储结构)：</p><ul><li>链式存储：离散存放的</li><li>顺序存储：占用大片连续空间</li><li>索引存储</li><li>散列存储<br><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304061927176.png" alt="image.png"></li></ul><p>数据类型：是指一个值得集合，和定义在此集合上一组操作的总称</p><ul><li>原子类型：基本数据类型<br>  结构体运算：+ - * % …</li><li>结构类型：结构体(可以再分为若干分量)<br>  结构体运算—&gt;封装为函数</li></ul><p>算法：求解问题的步骤<br><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304061942250.png" alt="image.png"><br>-算法特性：</p><ul><li>有穷性，有限步骤内完成，有穷时间内完成</li><li>确定性，意义明确，无歧义；给定相同的输入，输出结果确定唯一</li><li>可行性，可以通过基本运算执行有限次来实现</li><li>输入，0个或多个输入</li><li>输出，1个或多个输出</li></ul><p>好的算法具备特质：</p><ul><li>正确性，能正确实现目的</li><li>可读性，容易理解阅读</li><li>健壮性，可以灵活处理数据中的非法数据，给出反应进行处理</li><li>高效率地存储需求，花费时间少(时间复杂度低)，不费内存(空间复杂度低)</li></ul><p><mark class="hl-label blue">时间复杂度</mark> ：</p></blockquote><div class="table-container"><table><thead><tr><th>a</th><th>结论</th></tr></thead><tbody><tr><td>1</td><td>顺序执行的代码只影响常数项</td></tr><tr><td>2</td><td>只需要挑去循环当中的某一个基本操作分析它的执行次数与n的关系</td></tr><tr><td>3</td><td>如果有多层嵌套循环，只需要关注最深层得循环执行了几次</td></tr></tbody></table></div><p><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304072136217.png" alt="image.png"></p><p><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304072140867.png" alt="image.png"></p><p><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304072141426.png" alt="image.png"></p><blockquote><p><mark class="hl-label blue">空间复杂度</mark> ：</p></blockquote><div class="table-container"><table><thead><tr><th style="text-align:center">普通程序</th><th style="text-align:center">结论</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:center">只需关注存储空间大小与问题规模相关的变量</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">分析所占空间x与问题规模n的关系 x=f(n)</td></tr><tr><td style="text-align:center">3</td><td style="text-align:center">x的数量级O(x)就是算法空间复杂度S(n)</td></tr></tbody></table></div><div class="table-container"><table><thead><tr><th style="text-align:center">递归程序</th><th style="text-align:center">结论</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:center">找到递归深度x与问题规模n的关系</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">x的数量级O(x)就是算法空间复杂度S(n)</td></tr></tbody></table></div><p><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304072151890.png" alt="image.png"></p><p><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304072152388.png" alt="image.png"></p><h1 id="线性表"><a href="#线性表" class="headerlink" title="线性表"></a>线性表</h1><div class="table-container"><table><thead><tr><th style="text-align:center">序号</th><th style="text-align:center">总结</th></tr></thead><tbody><tr><td style="text-align:center">定义</td><td style="text-align:center">数据类型同类型、有限、有序(先后顺序)</td></tr><tr><td style="text-align:center">位序</td><td style="text-align:center">线性表数据元素的位序从1开始(数组下标以0开始)</td></tr><tr><td style="text-align:center">基本操作</td><td style="text-align:center">创销、增删改查；判空、判长、打印输出</td></tr><tr><td style="text-align:center">注意</td><td style="text-align:center">函数名要有可读性、见名知意</td></tr><tr><td style="text-align:center">包括</td><td style="text-align:center">链表(链式存储)、顺序表(顺序存储)</td></tr></tbody></table></div><p><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304072231315.png" alt="image.png"></p><p><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304072232709.png" alt="image.png"></p><h2 id="顺序表"><a href="#顺序表" class="headerlink" title="顺序表"></a>顺序表</h2><h3 id="顺序表定义"><a href="#顺序表定义" class="headerlink" title="顺序表定义"></a>顺序表定义</h3><hr><blockquote><p>顺序表实现方式：</p><ul><li>静态分配：ElemType data[MaxSize]（存储空间不可调控）<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> Maxsize 10</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">ElemType data [MaxSize];</span><br><span class="line"><span class="type">int</span> Length;</span><br><span class="line">&#125;SqList; <span class="comment">//定义的是结构体的数据类型</span></span><br></pre></td></tr></table></figure></li></ul></blockquote><ul><li>动态分配：ElemType  * data （存储空间可调控）<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> Initsize10 <span class="comment">//默认的最大长度</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">ElemType *data ;</span><br><span class="line"><span class="type">int</span> Maxsize;<span class="comment">//记录最大容量</span></span><br><span class="line"><span class="type">int</span> Length;</span><br><span class="line">&#125;SqList; </span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//初始化</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">InitList</span><span class="params">(SeqList &amp;L)</span>&#123;</span><br><span class="line"><span class="comment">//用ma11oc函数申请一片连续的存储空间</span></span><br><span class="line">L.data=(<span class="type">int</span> *)<span class="built_in">malloc</span>(Initsize*<span class="keyword">sizeof</span>(<span class="type">int</span>));</span><br><span class="line">L.length=<span class="number">0</span>;</span><br><span class="line">L.MaxSize=Initsize;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//增加动态数组的长度</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Increasesize</span><span class="params">(SeqList &amp;L,<span class="type">int</span> len)</span>&#123;</span><br><span class="line"><span class="type">int</span> *p=L.data;</span><br><span class="line">L.data=(<span class="type">int</span> *)<span class="built_in">malloc</span>((L.MaxSize+len)*<span class="keyword">sizeof</span>(<span class="type">int</span>));<span class="comment">//申请另一块内存空</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;L.length;i++)&#123;</span><br><span class="line">L.data[i]=p[i];<span class="comment">//将数据复制到新区域</span></span><br><span class="line">&#125;</span><br><span class="line">L.MaxSize=L.MaxSize+len;<span class="comment">//顺序表最大长度增加len</span></span><br><span class="line"><span class="built_in">free</span>(p);<span class="comment">//释放原来的内存空间</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304072344443.png" alt="image.png"></li></ul><blockquote><p>顺序表特点</p><ul><li>随机访问：可以在O(1)时间内找到第i给元素</li><li>存储密度高，只能存储数据本身，不能存储指针信息</li><li>拓展容量不方便：每次拓展容量都需要开拓一个新的内存空间，并复制过去</li><li>插入删除元素不方便，需要移动大量的元素</li></ul></blockquote><h3 id="顺序表插入操作"><a href="#顺序表插入操作" class="headerlink" title="顺序表插入操作"></a>顺序表插入操作</h3><hr><blockquote><p>健壮性，异常处理：</p><ul><li>返回布尔型变量用于判断操作是否成功</li><li>方法要进行，判满，判断插入位置是否有效<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">bool</span> <span class="title function_">ListInsert</span><span class="params">(SqList&amp;L <span class="type">int</span> i，<span class="type">int</span> e)</span>&#123;<span class="comment">//i插入位置，e要插入元素</span></span><br><span class="line"><span class="keyword">if</span>（i&lt;<span class="number">1ll</span>i&gt;L.length+<span class="number">1</span>） <span class="comment">//判断i的范围是否有效</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>；</span><br><span class="line"><span class="keyword">if</span>（L.length&gt;=MaxSize） <span class="comment">//当前存储空间已满，不能插入</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>；</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>；</span><br><span class="line"><span class="keyword">for</span>（intj=L.length;j&gt;=i；j--） <span class="comment">//将第i个元素及之后的元素后移</span></span><br><span class="line">L.data[j]=L.data[j<span class="number">-1</span>]；</span><br><span class="line">L.data[i<span class="number">-1</span>]=e； <span class="comment">//在位置i处放入e</span></span><br><span class="line">L.length++； <span class="comment">//长度加1</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>；</span><br></pre></td></tr></table></figure></li></ul></blockquote><p>问题规模n:顺序表表长length<br>时间复杂度：</p><ul><li>最好：插入到表尾i=n+1，无需移动元素 <code>O(1)</code></li><li>最坏：插入到表头i=1，全部后移一位<code>O(n)</code></li><li>平均：假设新元素插入到任何一个位置的概率相同，即i=1,2,3,,length+1的概率都是p=1/n+1,i=1,循环n次：i=2时，循环n-1次：i=3,循环n-2次…i=n+1时，循环0次;平均循环次数=np+(n-1)p+(n-2)p+…+1p=n/2,  <code>O(n)</code></li></ul><h3 id="顺序表的删除操作"><a href="#顺序表的删除操作" class="headerlink" title="顺序表的删除操作"></a>顺序表的删除操作</h3><hr><blockquote><p>健壮性异常处理</p><ul><li>返回布尔型变量用于判断操作是否成功</li><li>判空、判断删除位置i是否有效</li><li>要加一个变量e(注意要&amp;e)，将被删除元素的值带回来<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">bool</span> <span class="title function_">ListDelete</span><span class="params">(SqList &amp;L,<span class="type">int</span> i,<span class="type">int</span> &amp;e)</span>&#123;<span class="comment">//引用，否则无法带回数据</span></span><br><span class="line"><span class="keyword">if</span>(i&lt;<span class="number">1</span> i&gt;L.length)<span class="comment">//判断i的范围是否有效</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">e=L.data[i<span class="number">-1</span>];<span class="comment">//将被删除的元素赋值给e</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=i;j&lt;L.length;j++)<span class="comment">//将第i个位置后的元素前移</span></span><br><span class="line">L.data[j<span class="number">-1</span>]=L.data[j];</span><br><span class="line">L.length--;<span class="comment">//线性表长度减1</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>问题规模n:顺序表表长length<br>时间复杂度：</li><li>最好：删除表尾i=n，无需移动元素 <code>O(1)</code></li><li>最坏：删除表头i=1，全部前移一位<code>O(n)</code></li><li>平均：假设删除任何一个位置的概率相同，即i=1,2,3,,length的概率都是p=1/n,i=1,循环n-1次：i=2时，循环n-2次：i=3,循环n-3次…i=n时，循环0次;平均循环次数=(n-1)p+(n-2)p+(n-3)p+…+1p=n-1/2,  <code>O(n)</code></li></ul></blockquote><h3 id="顺序表的查找"><a href="#顺序表的查找" class="headerlink" title="顺序表的查找"></a>顺序表的查找</h3><hr><h4 id="按位查找"><a href="#按位查找" class="headerlink" title="按位查找"></a>按位查找</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ElemType <span class="title function_">GetElem</span><span class="params">(SeqList L,<span class="type">int</span> i)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> L.data[i<span class="number">-1</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>时间复杂度：<code>O(1)</code></p><h4 id="按值查找"><a href="#按值查找" class="headerlink" title="按值查找"></a>按值查找</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">LocateElem</span><span class="params">(SeqList L,ElemType e)</span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;L.length;<span class="number">1</span>++)</span><br><span class="line"><span class="keyword">if</span>(L.data[i]==e)</span><br><span class="line"><span class="keyword">return</span> i+<span class="number">1</span>; <span class="comment">//数组下标为i的元素值等于e,返回其位i+1</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>; <span class="comment">//退出循环，说明查找失败</span></span><br></pre></td></tr></table></figure><p>时间复杂度：</p><ul><li>最好：<code>O(1)</code> 查找元素在表头</li><li>最坏：<code>O(n)</code> 查找元素在表尾</li><li>平均：<code>O(n)</code>  循环n+1/2次</li></ul><h3 id="单链表"><a href="#单链表" class="headerlink" title="单链表"></a>单链表</h3><h4 id="单链表的定义"><a href="#单链表的定义" class="headerlink" title="单链表的定义"></a>单链表的定义</h4><hr><ul><li>定义结构体</li><li>初始化</li><li>判空</li></ul><div class="tabs" id="test1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test1-1">不带头结点的链表</button></li><li class="tab"><button type="button" data-href="#test1-2">带头结点链表</button></li><li class="tab"><button type="button" data-href="#test1-3">区别</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test1-1"><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义单链表结点类型</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">LNode</span>&#123;</span></span><br><span class="line">ElemType data;<span class="comment">//每个节点存放一个数据元素</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LNode</span> *<span class="title">next</span>;</span><span class="comment">//指针指向下一个节点</span></span><br><span class="line">&#125;LNode *LinkList;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//初始化一个空的单链表</span></span><br><span class="line"><span class="type">bool</span> <span class="title function_">InitList</span><span class="params">(LinkList &amp;L)</span>&#123;</span><br><span class="line">L=<span class="literal">NULL</span>; <span class="comment">//空表，暂时还没有任何结点,同时为了防止脏数据</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//判断单链表是否为空</span></span><br><span class="line"><span class="type">bool</span> <span class="title function_">Empty</span><span class="params">(LinkList L)</span>&#123;</span><br><span class="line"><span class="keyword">if</span> (L =<span class="literal">NULL</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">LinkList L; <span class="comment">//声明一个指向单链表的指针</span></span><br><span class="line"><span class="comment">//初始化一个空表</span></span><br><span class="line">InitList(L);</span><br><span class="line">....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-2"><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义单链表结点类型</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">LNode</span>&#123;</span></span><br><span class="line">ElemType data;<span class="comment">//每个节点存放一个数据元素</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LNode</span> *<span class="title">next</span>;</span><span class="comment">//指针指向下一个节点</span></span><br><span class="line">&#125;LNode *LinkList;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//初始化一个空的单链表</span></span><br><span class="line"><span class="type">bool</span> <span class="title function_">InitList</span><span class="params">(LinkList &amp;L)</span>&#123;</span><br><span class="line">L=(LinkList) <span class="built_in">malloc</span>(<span class="keyword">sizeof</span> (LNode));</span><br><span class="line"><span class="keyword">if</span>(L==<span class="literal">NULL</span>)&#123; <span class="comment">//内存不足，分配失败</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">L-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//判断单链表是否为空</span></span><br><span class="line"><span class="type">bool</span> <span class="title function_">Empty</span><span class="params">(LinkList L)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(L-&gt;next==<span class="literal">NULL</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">LinkList L; <span class="comment">//声明一个指向单链表的指针</span></span><br><span class="line"><span class="comment">//初始化一个空的表</span></span><br><span class="line">InitList(L);</span><br><span class="line">....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-3"><p><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304081438655.png" alt="image.png"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h4 id="单链表的插入"><a href="#单链表的插入" class="headerlink" title="单链表的插入"></a>单链表的插入</h4><hr><div class="tabs" id="test1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test1-1">按位插入不带头结点</button></li><li class="tab"><button type="button" data-href="#test1-2">按位插入带头结点</button></li><li class="tab"><button type="button" data-href="#test1-3">指定结点的前插操作O(n)</button></li><li class="tab"><button type="button" data-href="#test1-4">指定结点的前插操作O(1)</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test1-1"><p><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304081503593.png" alt="image.png"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-2"><p><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304081501067.png" alt="image.png"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-3"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">指定结点，这种方式，先找到指定节点的前驱结点--&gt;遍历</span><br><span class="line">平均复杂度O(n)</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304081605285.png" alt="image.png"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-4"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">这种方式，无需找到指定结点前驱结点，先插入到后面，然后交换data,等效为前插</span><br><span class="line">O(1)</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304081550682.png" alt="image.png"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h4 id="单链表的删除"><a href="#单链表的删除" class="headerlink" title="单链表的删除"></a>单链表的删除</h4><hr><div class="note blue [icon] [style] flat"><p>这里就不讨论不带头结点的链表删除情况了</p></div><div class="tabs" id="test1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test1-1">按位序删除</button></li><li class="tab"><button type="button" data-href="#test1-2">指定结点删除</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test1-1"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">按位置删除，只能通过遍历找到第i-1个结点</span><br><span class="line">最坏，平均都是O(n)</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304081615962.png" alt="image.png"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-2"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">这种指定节点删除方式，时间复杂度`O(1)`,但是极限情况，当p最后结点的时候</span><br><span class="line">就无法通过转移数据的方式完成删除</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304081618302.png" alt="image.png"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h4 id="单链表的查找"><a href="#单链表的查找" class="headerlink" title="单链表的查找"></a>单链表的查找</h4><hr><h5 id="按位置查找"><a href="#按位置查找" class="headerlink" title="按位置查找"></a>按位置查找</h5><p><code>时间复杂度O(n)</code><br><div class="tabs" id="test1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test1-1">优化前</button></li><li class="tab"><button type="button" data-href="#test1-2">优化后</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test1-1"><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//按位置查找  </span></span><br><span class="line"> LinkList <span class="title function_">GetEle_by_pos</span><span class="params">(LinkList L,<span class="type">int</span> pos)</span>&#123;  </span><br><span class="line"> <span class="comment">//说明：L头结点的位置是0</span></span><br><span class="line">    <span class="keyword">if</span>(pos&lt;<span class="number">1</span>)&#123;  </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">if</span>(pos==<span class="number">0</span>)&#123;  </span><br><span class="line">        <span class="keyword">return</span> L;  </span><br><span class="line">    &#125;  </span><br><span class="line">    Linklist p;</span><br><span class="line">    p=L;</span><br><span class="line">    <span class="type">int</span> i=<span class="number">0</span>;  </span><br><span class="line">    <span class="keyword">while</span>(p!=<span class="literal">NULL</span>&amp;&amp;i&lt;pos)&#123;  </span><br><span class="line">        p=p-&gt;next;  </span><br><span class="line">        i++;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> p;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-2"><ul><li><code>无需再定义一个p指针用来遍历，直接用头结点L进行遍历，然后返回L，由于L没有用引用,最终并不会改变L</code><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//按位置查找  </span></span><br><span class="line"> LinkList <span class="title function_">GetEle_by_pos</span><span class="params">(LinkList L,<span class="type">int</span> pos)</span>&#123;  </span><br><span class="line"> <span class="comment">//说明：L头结点的位置是0</span></span><br><span class="line">    <span class="keyword">if</span>(pos&lt;<span class="number">1</span>)&#123;  </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">if</span>(pos==<span class="number">0</span>)&#123;  </span><br><span class="line">        <span class="keyword">return</span> L;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="type">int</span> i=<span class="number">0</span>;  </span><br><span class="line">    <span class="keyword">while</span>(L&amp;&amp;i&lt;pos)&#123;  </span><br><span class="line">        L=L-&gt;next;  </span><br><span class="line">        i++;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> L;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div></p><h5 id="按值查找-1"><a href="#按值查找-1" class="headerlink" title="按值查找"></a>按值查找</h5><p><code>时间复杂度O(n)</code><br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//按值查找，找到数据域==e的结点</span></span><br><span class="line">Linklist <span class="title function_">LocateElem</span><span class="params">(LinkList L,ElemType e)</span>&#123;</span><br><span class="line">L=L-&gt;next;</span><br><span class="line"><span class="comment">//从第1个结点开始查找数据域为e的结点</span></span><br><span class="line"><span class="keyword">while</span> (L !=<span class="literal">NULL</span>&amp;&amp;L-&gt;data!=e)</span><br><span class="line">L = L-&gt;next;</span><br><span class="line"><span class="keyword">return</span> L;<span class="comment">//找到后返回该结点指针，否则返回WULL</span></span><br></pre></td></tr></table></figure></p><h5 id="统计表长"><a href="#统计表长" class="headerlink" title="统计表长"></a>统计表长</h5><p><code>时间复杂度O(n)</code></p><h4 id="单链表的建立"><a href="#单链表的建立" class="headerlink" title="单链表的建立"></a>单链表的建立</h4><h5 id="头插法"><a href="#头插法" class="headerlink" title="头插法"></a>头插法</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">list_head_insert</span><span class="params">(LNode* &amp;L)</span>&#123;  </span><br><span class="line">    L= (LinkList)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));<span class="comment">//给L申请一个头结点结点空间  </span></span><br><span class="line">    L-&gt;next=<span class="literal">NULL</span>;  </span><br><span class="line">    ElemType x;<span class="comment">//读取的第一个元素  </span></span><br><span class="line">    LinkList s;<span class="comment">//用来指向新节点  </span></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x);  </span><br><span class="line">    <span class="keyword">while</span> (x!=<span class="number">9999</span>)&#123;  </span><br><span class="line">        s=(LinkList) <span class="built_in">malloc</span>(<span class="keyword">sizeof</span> (LNode));<span class="comment">//给s申请一个新的空间  </span></span><br><span class="line">        s-&gt;data=x;  </span><br><span class="line">        s-&gt;next=L-&gt;next;<span class="comment">//实现头插法，s成为第一个结点  </span></span><br><span class="line">        L-&gt;next=s;<span class="comment">//L作为头结点，任然指向第一个结点  </span></span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x);<span class="comment">//读取x的值  </span></span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><p><code>重要性质：头插法实现的链表数据是逆置的，用于链表的逆置</code><br><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304091654816.png" alt="image.png"><br><code>链表逆置：循环依次读取老链表数据，然后用头插法依次建立新链表/再次用头插法插入到之后，这样就是实现了链表逆置</code></p><h5 id="尾插法"><a href="#尾插法" class="headerlink" title="尾插法"></a>尾插法</h5><p><code>时间复杂度O(n)</code><br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//尾插法新建链表  </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">list_tail_insert</span><span class="params">(LinkList &amp;L)</span>&#123;  </span><br><span class="line">    L=(LinkList) <span class="built_in">malloc</span>(<span class="keyword">sizeof</span> (LNode));  </span><br><span class="line">    L-&gt;next=<span class="literal">NULL</span>;  </span><br><span class="line">    ElemType x;  </span><br><span class="line">    LNode *s,*r=L;<span class="comment">//s指向新节点，r指向尾结点 ,将L赋给s,r ,相当于s,r,L都是头结点</span></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x);  </span><br><span class="line">    <span class="keyword">while</span>(x!=<span class="number">9999</span>)&#123;  </span><br><span class="line">        s=(LinkList) <span class="built_in">malloc</span>(<span class="keyword">sizeof</span> (LNode));  </span><br><span class="line">        s-&gt;data=x;  </span><br><span class="line">        r-&gt;next=s;  </span><br><span class="line">        r=s;  <span class="comment">//将s赋给r,r重新指向尾结点</span></span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x);  </span><br><span class="line">    &#125;  </span><br><span class="line">    r-&gt;next=<span class="literal">NULL</span>;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure></p><h1 id="树与二叉树"><a href="#树与二叉树" class="headerlink" title="树与二叉树"></a>树与二叉树</h1><h2 id="基本术语"><a href="#基本术语" class="headerlink" title="基本术语"></a>基本术语</h2><hr><ul><li><code>分支结点</code>：有后继的结点</li><li><code>叶子结点</code>：没有后继的结点</li><li><code>结点之间的路径</code>：结点与结点之间的边的数量，只能单方向从上往下</li><li><code>结点的层次(深度)</code>：从上往下数，<code>默认从1开始</code></li><li><code>结点的高度</code>：从下往上数</li><li><code>树的高度(深度)</code></li><li><code>结点的度</code>：结点有多少个分支</li><li><code>树的度</code>：各结点的度的最大值</li><li><code>森林</code>：m个(m&gt;=0)互不相交的树组成</li></ul><h2 id="树的常考性质"><a href="#树的常考性质" class="headerlink" title="树的常考性质"></a>树的常考性质</h2><hr><ul><li><p>1.结点数=总度数+1<br><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304112248228.png" alt="image.png"></p></li><li><p>2.度为m的树第i层最多有<code>m^(i-1)</code>个结点<br><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304112246945.png" alt="image.png"></p></li><li><p>3.高度为h的m叉树最多有<code>(m^h - 1)/(m - 1)</code>个结点<br><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304112252306.png" alt="image.png"></p></li><li><p>4.具有n个结点的m叉树的最小高度为[logm(n(m-1)+1)]<br><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304112303705.png" alt="image.png"></p></li></ul><h2 id="几种特殊的二叉树"><a href="#几种特殊的二叉树" class="headerlink" title="几种特殊的二叉树"></a>几种特殊的二叉树</h2><ul><li><code>满二叉树</code>：度全为2或0</li><li><code>完全二叉树</code>:最多只有一个度为1的结点<br><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304131920559.png" alt="image.png">  </li><li><code>二叉排序树</code>：左子树上所有节点均小于根节点，右子树上均大于根节点</li><li><code>平衡二叉树</code>：树上任意结点的左子树和右子树的深度只差不超过1,能有更高的搜索效率<br><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304131922727.png" alt="image.png"></li></ul><h2 id="二叉树的常考性质"><a href="#二叉树的常考性质" class="headerlink" title="二叉树的常考性质"></a>二叉树的常考性质</h2><p><code>1.具有n个结点的完全二叉树的高度</code><br><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304131930292.png" alt="image.png"></p><p><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304131934037.png" alt="image.png"></p><p><code>2.完全二叉树，度为0、1、2的结点个数</code><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">假设度为0、1、2的结点个数分别为n0、n1、n2</span><br><span class="line">yw 是完全二叉树</span><br><span class="line">sy n0=0或1</span><br><span class="line">yw n0=n2+1</span><br><span class="line">sy n0+n2--&gt;奇数</span><br><span class="line">sy n0+n2+n0的奇偶性看n1</span><br><span class="line">sy 当n1=1时，结点数是偶数；当n1=0时，结点数为奇数</span><br></pre></td></tr></table></figure></p><h2 id="二叉树的存储结构"><a href="#二叉树的存储结构" class="headerlink" title="二叉树的存储结构"></a>二叉树的存储结构</h2><ul><li><code>顺序存储(指的是顺序表的结构实现)</code>：<ul><li><code>完全二叉树</code><ul><li>如果结点从1开始</li><li>i结点的左孩子：2i</li><li>i结点的右孩子：2i+1</li><li>i的父节点：i/2</li><li>i所在层次：参照3.4</li></ul></li><li><code>不完全二叉树</code><ul><li>判断是否有左右孩子就没有规律了</li><li>这样的顺序表的数组没被填满，造成存储空间浪费</li></ul></li><li><code>结论</code><ul><li>顺序存储只适合于存储完全二叉树</li></ul></li></ul></li><li><code>链式存储(链表结点实现)</code>：<ul><li></li></ul></li></ul><h2 id="二叉树的遍历"><a href="#二叉树的遍历" class="headerlink" title="二叉树的遍历"></a>二叉树的遍历</h2><h3 id="先序遍历"><a href="#先序遍历" class="headerlink" title="先序遍历"></a><code>先序遍历</code></h3><p><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304132223361.png" alt="image.png"></p><p><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304132234459.png" alt="image.png"></p><p><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304132236918.png" alt="image.png"></p><h3 id="层序遍历"><a href="#层序遍历" class="headerlink" title="层序遍历"></a><code>层序遍历</code></h3><p><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304132249885.png" alt="image.png"></p><p><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304132249734.png" alt="image.png"></p><h3 id="中序遍历"><a href="#中序遍历" class="headerlink" title="中序遍历"></a><code>中序遍历</code></h3><p><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304132256749.png" alt="image.png"></p><p><code>如果只是给定一个二叉树的前\中\后\层序\遍历序列中的一种，那么是无法确定唯一的</code></p><h1 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h1><h2 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h2><hr><p>1.实现逻辑<br> <code>1.整理为大根堆</code> :<br><div class="tabs" id="test1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test1-1">建堆</button></li><li class="tab"><button type="button" data-href="#test1-2">时间复杂度O(n)</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test1-1"><ul><li>把所有非终端结点都检查一遍，是否满足大根堆的要求，如果不满足，则进行调整</li><li>检查当前结点是否满足龈≥左、右若不满足，将当前结点与更大的一个孩子互换</li><li>若元素互换破坏了下一级的堆，则采用相同的方法继续往下调整(<code>小元素不断下坠</code>)</li><li>一般从<code>最底层的分支结点开始调整</code><br><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304102310589.png" alt="image.png"></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-2"><p><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304102311383.png" alt="image.png"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div></p><p><code>2.交换堆顶元素与最后一个元素.并将小元素下坠,恢复成大根堆</code><br><div class="tabs" id="test1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test1-1">排序过程</button></li><li class="tab"><button type="button" data-href="#test1-2">时间复杂度O(nlog2n)</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test1-1"><ul><li>交换顶部元素和末尾元素</li><li>小元素下坠</li><li>排除末尾最大元素，<code>len-1</code><br><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304102327365.png" alt="image.png"></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-2"><ul><li>根节点最多才下坠<code>h-1</code>次，且没下坠一次最多比较2次，根结点最多比较2(h-1)次 时间复杂度 <code>O(h)</code></li><li>时间复杂度,其他结点<code>&lt;</code>根节点 , 假设每个都是 O(h),公有n个结点<code>O(nh)</code></li><li>h高度=log2n ，总时间复杂度<code>O(nh)=O(nlog2n)</code><br><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304102326416.png" alt="image.png"></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div></p><p>2.算法稳定性</p><ul><li>堆排序<code>不稳定</code></li><li>假设只有<code>1、a1、a2</code>当左右子节点相同时a1=a2，会优先考虑左结点和根结点交换</li><li>排序时，交换根结点与最后结点，使得位序在前的a1跑到a2后面，—&gt;<code>1、a2、a1</code> 因此是不稳定的 </li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;绪论&quot;&gt;&lt;a href=&quot;#绪论&quot; class=&quot;headerlink&quot; title=&quot;绪论&quot;&gt;&lt;/a&gt;绪论&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;概念：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;数据元素：一个数据体，考虑为一个人，一份订单…&lt;/li&gt;
&lt;li&gt;数据项：数据体</summary>
      
    
    
    
    
    <category term="数据结构" scheme="https://fqzs.netlify.app/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>高数</title>
    <link href="https://fqzs.netlify.app/undefined/95b2ede4.html"/>
    <id>https://fqzs.netlify.app/undefined/95b2ede4.html</id>
    <published>2023-04-04T22:36:00.000Z</published>
    <updated>2023-04-13T14:59:09.858Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基础扫盲"><a href="#基础扫盲" class="headerlink" title="基础扫盲"></a>基础扫盲</h1><h2 id="偏导数存在-连续-可微-偏导数连续关系"><a href="#偏导数存在-连续-可微-偏导数连续关系" class="headerlink" title="偏导数存在-连续-可微-偏导数连续关系"></a>偏导数存在-连续-可微-偏导数连续关系</h2><details>  <summary>点击展开</summary>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">偏导数连续(x.y)</span><br><span class="line">一阶偏导数连续的意思是，该函数的图像是一条连续的线，无论从哪个方向接近某一点，偏导数的</span><br><span class="line">极限都存在且相等。也就是说，偏导数函数在每一点都满足连续性的定义。如果一个函数在某个区</span><br><span class="line">域内的所有点都有一阶连续偏导数，那么这个函数就是可微的(x、y方向的偏导数都连续)</span><br><span class="line">可微(x.y其他任意方向)</span><br><span class="line">是指曲面某一个点处存在一个切面，该点的各个方向的偏导数都存在(x、y和其他任意方向)</span><br><span class="line">偏导数存在(x.y)</span><br><span class="line">偏导数存在的意思是，一个多变量函数的偏导数，就是它关于其中一个变量的导数而保持其他变量</span><br><span class="line">恒定。也就是说，如果一个多元函数在某一点沿着某个方向的偏增量与该方向的增量之比当增量趋</span><br><span class="line">于零时的极限存在，那么这个极限值就是该函数在该点沿着该方向的偏导数(对于二元函数来说</span><br><span class="line">变量只有x.y那么要xy方向都存在偏导数，那么偏导数存在，要考虑两个变量)</span><br><span class="line">函数连续</span><br><span class="line">就是说二元函数所形成的的曲面是连续的没有断口，判断方法--&gt;该点函数值是否等于函数极限值</span><br><span class="line">等于就是连续</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">综上可以得到</span><br><span class="line"></span><br><span class="line">偏导数连续</span><br><span class="line">=&gt;可微</span><br><span class="line">=&gt;连续</span><br><span class="line">=&gt;偏导数存在</span><br></pre></td></tr></table></figure></details><div class="row">    <embed src="/pdf/基础扫盲题.pdf" width="100%" height="550" type="application/pdf"></div><h1 id="三大核心计算"><a href="#三大核心计算" class="headerlink" title="三大核心计算"></a>三大核心计算</h1><h2 id="函数求极限"><a href="#函数求极限" class="headerlink" title="函数求极限"></a>函数求极限</h2><h3 id="无穷小的比较-泰勒公式-极限"><a href="#无穷小的比较-泰勒公式-极限" class="headerlink" title="无穷小的比较-泰勒公式-极限"></a>无穷小的比较-泰勒公式-极限</h3><div class="row">    <embed src="/pdf/无穷小的比较-泰勒公式-极限.pdf" width="100%" height="550" type="application/pdf"></div><h3 id="课后习题"><a href="#课后习题" class="headerlink" title="课后习题"></a>课后习题</h3><div class="row">    <embed src="/pdf/习题.pdf" width="100%" height="550" type="application/pdf"></div><h2 id="函数与求导"><a href="#函数与求导" class="headerlink" title="函数与求导"></a>函数与求导</h2><h3 id="导数的定义"><a href="#导数的定义" class="headerlink" title="导数的定义"></a>导数的定义</h3><p><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304051135693.png" alt="image.png"><br><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304051135205.png" alt="image.png"></p><p><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304051139974.png" alt="image.png"></p><p><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304051146278.png" alt="image.png"></p><h3 id="导数的几何意义"><a href="#导数的几何意义" class="headerlink" title="导数的几何意义"></a>导数的几何意义</h3><p><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304051150223.png" alt="image.png"></p><p><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304051229079.png" alt="image.png"></p><h3 id="各类函数求导"><a href="#各类函数求导" class="headerlink" title="各类函数求导"></a>各类函数求导</h3><h4 id="基本求导公式与四则运算"><a href="#基本求导公式与四则运算" class="headerlink" title="基本求导公式与四则运算"></a>基本求导公式与四则运算</h4><p><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304051700546.png" alt="image.png"></p><h4 id="复合函数求导"><a href="#复合函数求导" class="headerlink" title="复合函数求导"></a>复合函数求导</h4><p><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304051701696.png" alt="image.png"></p><p><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304051708912.png" alt="image.png"></p><h4 id="隐函数求导"><a href="#隐函数求导" class="headerlink" title="隐函数求导"></a>隐函数求导</h4><p><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304051708838.png" alt="image.png"></p><h4 id="参数方程求导"><a href="#参数方程求导" class="headerlink" title="参数方程求导"></a>参数方程求导</h4><p><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304051747241.png" alt="image.png"></p><p><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304051757501.png" alt="image.png"></p><h4 id="反函数求导"><a href="#反函数求导" class="headerlink" title="反函数求导"></a>反函数求导</h4><p><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304051804246.png" alt="image.png"></p><p><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304051810310.png" alt="image.png"></p><h4 id="高阶导数求导"><a href="#高阶导数求导" class="headerlink" title="高阶导数求导"></a>高阶导数求导</h4><h5 id="找规律"><a href="#找规律" class="headerlink" title="找规律"></a>找规律</h5><p><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304051821928.png" alt="image.png"></p><h5 id="莱布尼茨公式"><a href="#莱布尼茨公式" class="headerlink" title="莱布尼茨公式"></a>莱布尼茨公式</h5><p><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304051821393.png" alt="image.png"></p><h5 id="泰勒展开"><a href="#泰勒展开" class="headerlink" title="泰勒展开"></a>泰勒展开</h5><p><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304052214444.png" alt="image.png"></p><h2 id="不定积分的计算"><a href="#不定积分的计算" class="headerlink" title="不定积分的计算"></a>不定积分的计算</h2><h3 id="四大积分方法"><a href="#四大积分方法" class="headerlink" title="四大积分方法"></a>四大积分方法</h3><hr><h4 id="基本积分公式"><a href="#基本积分公式" class="headerlink" title="基本积分公式"></a>基本积分公式</h4><p><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304081717182.png" alt="image.png"></p><h4 id="第一类换元法-凑微分"><a href="#第一类换元法-凑微分" class="headerlink" title="第一类换元法(凑微分)"></a>第一类换元法(凑微分)</h4><hr><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1.两部分相乘，其中一项的导数是否与另外一项有关</span><br><span class="line">2.提到dx里面</span><br><span class="line">3.换元整体求积分</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304081709362.png" alt="image.png"></p><p><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304081727642.png" alt="image.png"></p><h4 id="第二类换元法-去根号"><a href="#第二类换元法-去根号" class="headerlink" title="第二类换元法(去根号)"></a>第二类换元法(去根号)</h4><hr><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">根号下x是一次，整体换成t</span><br><span class="line">根号下x是二次，三角换元</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304082024835.png" alt="image.png"></p><p><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304082211375.png" alt="image.png"></p><p><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304082333064.png" alt="image.png"></p><h4 id="第三类分部积分法"><a href="#第三类分部积分法" class="headerlink" title="第三类分部积分法"></a>第三类分部积分法</h4><hr><p><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304091242072.png" alt="image.png"></p><p><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304091447042.png" alt="image.png"></p><p><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304091457248.png" alt="image.png"></p><h4 id="第四类有理函数积分"><a href="#第四类有理函数积分" class="headerlink" title="第四类有理函数积分"></a>第四类有理函数积分</h4><hr><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">假分式：分子幂次比分母幂次高--&gt;一定可以写成`多项式+真分式`</span><br><span class="line">真分式：分子的幂次比分母低--&gt;例如 </span><br><span class="line">?/(1)(2) --&gt; a/(1) + b/(2)</span><br><span class="line">?/(1)(2)(3)--&gt;a/(1) + b/(2) + c/(3); </span><br><span class="line">?/(1)(2)^2 --&gt; a/(1) + b/(2) + c/(2)^2</span><br><span class="line">其中(1)(2)(3)都是x的一次多项式</span><br><span class="line">多项式的除法如下：</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304091523975.png" alt="image.png"><br><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304091533686.png" alt="image.png"><br><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304091544726.png" alt="image.png"></p><p><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304091550885.png" alt="image.png"></p><h3 id="三角有理积分"><a href="#三角有理积分" class="headerlink" title="三角有理积分"></a>三角有理积分</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">奇数次凑微分</span><br><span class="line">偶数次降幂</span><br><span class="line">化为同倍角</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304091623849.png" alt="image.png"></p><p><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304091632455.png" alt="image.png"></p><p><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304091637269.png" alt="image.png"></p><p><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304091639418.png" alt="image.png"></p><h2 id="定积分"><a href="#定积分" class="headerlink" title="定积分"></a>定积分</h2><h3 id="定积分的性质"><a href="#定积分的性质" class="headerlink" title="定积分的性质"></a>定积分的性质</h3><h4 id="线性性质"><a href="#线性性质" class="headerlink" title="线性性质"></a>线性性质</h4><p><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304092231993.png" alt="image.png"></p><h4 id="不等式性质"><a href="#不等式性质" class="headerlink" title="不等式性质"></a>不等式性质</h4><p><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304092232647.png" alt="image.png"></p><h4 id="对称性"><a href="#对称性" class="headerlink" title="对称性"></a>对称性</h4><p><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304092239776.png" alt="image.png"></p><h3 id="定积分的计算"><a href="#定积分的计算" class="headerlink" title="定积分的计算"></a>定积分的计算</h3><h4 id="牛顿莱布尼茨公式"><a href="#牛顿莱布尼茨公式" class="headerlink" title="牛顿莱布尼茨公式"></a>牛顿莱布尼茨公式</h4><p><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304101351992.png" alt="image.png"></p><p><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304101357337.png" alt="image.png"></p><h4 id="定积分的换元法"><a href="#定积分的换元法" class="headerlink" title="定积分的换元法"></a>定积分的换元法</h4><p><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304101404616.png" alt="image.png"></p><p><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304101410502.png" alt="image.png"></p><p><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304101413007.png" alt="image.png"></p><p><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304101426085.png" alt="image.png"></p><h4 id="华里士公式"><a href="#华里士公式" class="headerlink" title="华里士公式"></a>华里士公式</h4><p><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304102132472.png" alt="image.png"></p><p><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304102132831.png" alt="image.png"></p><h4 id="定积分的分部积分法"><a href="#定积分的分部积分法" class="headerlink" title="定积分的分部积分法"></a>定积分的分部积分法</h4><p><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304102038875.png" alt="image.png"></p><p><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304102038203.png" alt="image.png"></p><h4 id="区间在线公式"><a href="#区间在线公式" class="headerlink" title="区间在线公式"></a>区间在线公式</h4><p><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304102102944.png" alt="image.png"></p><p><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304102102751.png" alt="image.png"></p><h2 id="变限积分与反常积分"><a href="#变限积分与反常积分" class="headerlink" title="变限积分与反常积分"></a>变限积分与反常积分</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;基础扫盲&quot;&gt;&lt;a href=&quot;#基础扫盲&quot; class=&quot;headerlink&quot; title=&quot;基础扫盲&quot;&gt;&lt;/a&gt;基础扫盲&lt;/h1&gt;&lt;h2 id=&quot;偏导数存在-连续-可微-偏导数连续关系&quot;&gt;&lt;a href=&quot;#偏导数存在-连续-可微-偏导数连续关系&quot; class</summary>
      
    
    
    
    
    <category term="高数" scheme="https://fqzs.netlify.app/tags/%E9%AB%98%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>C语言（二）</title>
    <link href="https://fqzs.netlify.app/undefined/3c47b44b.html"/>
    <id>https://fqzs.netlify.app/undefined/3c47b44b.html</id>
    <published>2023-04-03T15:12:00.000Z</published>
    <updated>2023-04-13T14:59:09.854Z</updated>
    
    <content type="html"><![CDATA[<h2 id="单链表的新建查找"><a href="#单链表的新建查找" class="headerlink" title="单链表的新建查找"></a>单链表的新建查找</h2><h3 id="链表的实现"><a href="#链表的实现" class="headerlink" title="链表的实现"></a>链表的实现</h3><p>链表的实现需要定义结点的结构体类型，例如：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    <span class="type">int</span> data; <span class="comment">// 数据域</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">next</span>;</span> <span class="comment">// 指针域</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>然后需要创建一个头指针，用于指向链表的第一个结点，例如：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">head</span> =</span> <span class="literal">NULL</span>; <span class="comment">// 创建一个空链表</span></span><br></pre></td></tr></table></figure><p>接下来，可以通过动态分配内存的方式，创建新的结点，并将它们链接起来，例如：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">p</span> =</span> (<span class="keyword">struct</span> node *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> node)); <span class="comment">// 创建一个新结点</span></span><br><span class="line">p-&gt;data = <span class="number">10</span>; <span class="comment">// 给数据域赋值</span></span><br><span class="line">p-&gt;next = <span class="literal">NULL</span>; <span class="comment">// 给指针域赋值</span></span><br><span class="line">head = p; <span class="comment">// 将头指针指向新结点</span></span><br></pre></td></tr></table></figure><p>这样就实现了一个只有一个结点的链表。如果要添加更多的结点，可以重复上述过程，并将新结点的地址赋给前一个结点的指针域，例如：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">q</span> =</span> (<span class="keyword">struct</span> node *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> node)); <span class="comment">// 创建另一个新结点</span></span><br><span class="line">q-&gt;data = <span class="number">20</span>; <span class="comment">// 给数据域赋值</span></span><br><span class="line">q-&gt;next = <span class="literal">NULL</span>; <span class="comment">// 给指针域赋值</span></span><br><span class="line">p-&gt;next = q; <span class="comment">// 将前一个结点的指针域指向新结点</span></span><br></pre></td></tr></table></figure><h3 id="链表的删除-插入-查找"><a href="#链表的删除-插入-查找" class="headerlink" title="链表的删除-插入-查找"></a>链表的删除-插入-查找</h3><p>例如，如果要删除链表中的第三个结点，可以用以下代码实现：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">temp</span> =</span> head; <span class="comment">// temp 指向头结点</span></span><br><span class="line">temp = temp-&gt;next; <span class="comment">// temp 指向第二个结点</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">del</span> =</span> temp-&gt;next; <span class="comment">// del 指向要删除的第三个结点</span></span><br><span class="line">temp-&gt;next = del-&gt;next; <span class="comment">// 将第二个结点的指针域指向第四个结点</span></span><br><span class="line"><span class="built_in">free</span>(del); <span class="comment">// 释放第三个结点的内存空间</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>例如，如果要在链表中的第三个结点后插入一个新的结点，可以用以下代码实现：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">new</span> =</span> (<span class="keyword">struct</span> node *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> node)); <span class="comment">// 申请一个新的结点</span></span><br><span class="line">new-&gt;data = x; <span class="comment">// 将要插入的数据赋值给新结点的数据域</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">temp</span> =</span> head; <span class="comment">// temp 指向头结点</span></span><br><span class="line">temp = temp-&gt;next-&gt;next; <span class="comment">// temp 指向第三个结点</span></span><br><span class="line">new-&gt;next = temp-&gt;next; <span class="comment">// 将新结点的指针域指向第四个结点</span></span><br><span class="line">temp-&gt;next = new; <span class="comment">// 将第三个结点的指针域指向新结点</span></span><br></pre></td></tr></table></figure><p>例如，如果要在链表中查找第一个值为 x 的结点，可以用以下代码实现：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">p</span> =</span> head-&gt;next; <span class="comment">// p 指向首元结点</span></span><br><span class="line"><span class="type">int</span> i = <span class="number">1</span>; <span class="comment">// i 记录当前结点的位置</span></span><br><span class="line"><span class="keyword">while</span> (p != <span class="literal">NULL</span>) &#123; <span class="comment">// 遍历链表</span></span><br><span class="line">    <span class="keyword">if</span> (p-&gt;data == x) &#123; <span class="comment">// 如果找到值为 x 的结点</span></span><br><span class="line">        <span class="keyword">return</span> i; <span class="comment">// 返回位置</span></span><br><span class="line">    &#125;</span><br><span class="line">    p = p-&gt;next; <span class="comment">// p 指向下一个结点</span></span><br><span class="line">    i++; <span class="comment">// i 加一</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>; <span class="comment">// 如果遍历到尾部，仍未找到，返回 -1</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="实现顺序表-插入-删除"><a href="#实现顺序表-插入-删除" class="headerlink" title="实现顺序表 插入 删除"></a>实现顺序表 插入 删除</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span>  </span></span><br><span class="line">  </span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MaxSize 100  </span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> ElemType;  </span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span>  </span><br><span class="line">    ElemType data[MaxSize];  </span><br><span class="line">    <span class="type">int</span> length;  </span><br><span class="line">&#125;SqList;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//插入到第二个的函数  </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Put_arry</span><span class="params">(SqList &amp;L,ElemType e)</span>&#123;  </span><br><span class="line">    <span class="type">int</span> i = L.data[<span class="number">1</span>];  </span><br><span class="line">    <span class="type">int</span> j;  </span><br><span class="line">    <span class="keyword">for</span>(j=L.length;j&gt;<span class="number">1</span>;j--)&#123;  </span><br><span class="line">        L.data[j]=L.data[j<span class="number">-1</span>];  </span><br><span class="line">    &#125;  </span><br><span class="line">    L.data[<span class="number">1</span>]=e;  </span><br><span class="line">    L.length++;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//打印顺序表的方法  </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">print_arr</span><span class="params">(SqList L)</span>&#123;  </span><br><span class="line">    <span class="type">int</span> i;  </span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;L.length;i++)&#123;  </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%3d &quot;</span>,L.data[i]);<span class="comment">//&quot;%3表示打印的数字占3个空格  </span></span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//删除元素方法  </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Delet_arry</span><span class="params">(SqList &amp;L,ElemType e)</span>&#123;  </span><br><span class="line">    <span class="type">int</span> i;  </span><br><span class="line">    <span class="keyword">for</span>(i=e;i&lt;L.length;i++)&#123;  </span><br><span class="line">        L.data[i<span class="number">-1</span>]=L.data[i];  </span><br><span class="line">    &#125;  </span><br><span class="line">    L.length--;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;  </span><br><span class="line">    SqList L;  </span><br><span class="line">    L.data[<span class="number">0</span>]=<span class="number">1</span>;  </span><br><span class="line">    L.data[<span class="number">1</span>]=<span class="number">2</span>;  </span><br><span class="line">    L.data[<span class="number">2</span>]=<span class="number">3</span>;  </span><br><span class="line">    L.length=<span class="number">3</span>;  </span><br><span class="line">    ElemType e;  </span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;e);  </span><br><span class="line">    Put_arry(L,e);  </span><br><span class="line">    print_arr(L);  </span><br><span class="line">  </span><br><span class="line">    ElemType del;  </span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;del);  </span><br><span class="line">    Delet_arry(L,del);  </span><br><span class="line">    print_arr(L);  </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="头插法新建链表"><a href="#头插法新建链表" class="headerlink" title="头插法新建链表"></a>头插法新建链表</h3><p>这段代码，实现头插法新建一个链表，每次新建一个结点，都是放到第一个结点（注意头结点不是第一个结点，头结点指向第一个结点），该链表存储int类型数据，通过scanf输入建立对应的存储结点，直到输入9999,结束创建，并且不会包含9999</p><p><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304032033156.png" alt="Snipaste_2023-03-07_17-01-14.png"></p><p><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304032032806.png" alt="Snipaste_2023-03-07_17-07-51.png"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span>  </span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> ElemType;  </span><br><span class="line"><span class="comment">//定义结点结构体  </span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">LNode</span>&#123;</span>  </span><br><span class="line">    ElemType data;<span class="comment">//数据域  </span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">LNode</span> *<span class="title">next</span>;</span><span class="comment">//指针域  </span></span><br><span class="line">&#125;LNode,*LinkList;  </span><br><span class="line"></span><br><span class="line"><span class="comment">//头插法新建链表</span></span><br><span class="line"><span class="comment">//定义一个方法，申请头结点的空间  </span></span><br><span class="line"><span class="comment">//LNode*是结构体指针，与LinkList是完全等价的  </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">list_head_insert</span><span class="params">(LNode* &amp;L)</span>&#123;  </span><br><span class="line">    L= (LinkList)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));<span class="comment">//给L申请一个头结点结点空间  </span></span><br><span class="line">    L-&gt;next=<span class="literal">NULL</span>;  </span><br><span class="line">    ElemType x;<span class="comment">//读取的第一个元素  </span></span><br><span class="line">    LinkList s;<span class="comment">//用来指向新节点  </span></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x);  </span><br><span class="line">    <span class="keyword">while</span> (x!=<span class="number">9999</span>)&#123;  </span><br><span class="line">        s=(LinkList) <span class="built_in">malloc</span>(<span class="keyword">sizeof</span> (LNode));<span class="comment">//给s申请一个新的空间  </span></span><br><span class="line">        s-&gt;data=x;  </span><br><span class="line">        s-&gt;next=L-&gt;next;<span class="comment">//实现头插法，s成为第一个结点  </span></span><br><span class="line">        L-&gt;next=s;<span class="comment">//L作为头结点，任然指向第一个结点  </span></span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x);<span class="comment">//读取x的值  </span></span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="type">void</span> <span class="title function_">print_LinKlist</span><span class="params">(LinkList L)</span>&#123;  </span><br><span class="line">    L=L-&gt;next;  </span><br><span class="line">    <span class="keyword">while</span>(L!=<span class="literal">NULL</span>)&#123;  </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%3d&quot;</span>,L-&gt;data);  </span><br><span class="line">        L=L-&gt;next;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;  </span><br><span class="line">    LinkList L;<span class="comment">//定义链表的头指针  </span></span><br><span class="line">    list_head_insert(L);  </span><br><span class="line">    print_LinKlist(L);  </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="尾插法新建链表"><a href="#尾插法新建链表" class="headerlink" title="尾插法新建链表"></a>尾插法新建链表</h3><p><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304032042218.png" alt="Snipaste_2023-03-07_17-20-00.png"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span>  </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> ElemType;  </span><br><span class="line"><span class="comment">//定义结点结构体  </span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">LNode</span>&#123;</span>  </span><br><span class="line">    ElemType data;<span class="comment">//数据域  </span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">LNode</span> *<span class="title">next</span>;</span><span class="comment">//指针域  </span></span><br><span class="line">&#125;LNode,*LinkList;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//尾插法新建链表  </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">list_tail_insert</span><span class="params">(LinkList &amp;L)</span>&#123;  </span><br><span class="line">    L=(LinkList) <span class="built_in">malloc</span>(<span class="keyword">sizeof</span> (LNode));  </span><br><span class="line">    L-&gt;next=<span class="literal">NULL</span>;  </span><br><span class="line">    ElemType x;  </span><br><span class="line">    LNode *s,*r=L;<span class="comment">//s指向新节点，r指向尾结点 ,将L赋给s,r ,相当于s,r,L都是头结点</span></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x);  </span><br><span class="line">    <span class="keyword">while</span>(x!=<span class="number">9999</span>)&#123;  </span><br><span class="line">        s=(LinkList) <span class="built_in">malloc</span>(<span class="keyword">sizeof</span> (LNode));  </span><br><span class="line">        s-&gt;data=x;  </span><br><span class="line">        r-&gt;next=s;  </span><br><span class="line">        r=s;  <span class="comment">//将s赋给r,r重新指向尾结点</span></span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x);  </span><br><span class="line">    &#125;  </span><br><span class="line">    r-&gt;next=<span class="literal">NULL</span>;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="type">void</span> <span class="title function_">print_LinKlist</span><span class="params">(LinkList L)</span>&#123;  </span><br><span class="line">    L=L-&gt;next;  </span><br><span class="line">    <span class="keyword">while</span>(L!=<span class="literal">NULL</span>)&#123;  </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%3d&quot;</span>,L-&gt;data);  </span><br><span class="line">        L=L-&gt;next;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;  </span><br><span class="line">    LinkList L;<span class="comment">//定义链表的头指针  </span></span><br><span class="line">    list_tail_insert(L);  </span><br><span class="line">    print_LinKlist(L);  </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="链表-按值查找-按位置查找"><a href="#链表-按值查找-按位置查找" class="headerlink" title="链表-按值查找-按位置查找"></a>链表-按值查找-按位置查找</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span>  </span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> ElemType;  </span><br><span class="line"><span class="comment">//定义结点结构体  </span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">LNode</span>&#123;</span>  </span><br><span class="line">    ElemType data;<span class="comment">//数据域  </span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">LNode</span> *<span class="title">next</span>;</span><span class="comment">//指针域  </span></span><br><span class="line">&#125;LNode,*LinkList;  </span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment">//尾插法新建链表  </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">list_tail_insert</span><span class="params">(LinkList &amp;L)</span>&#123;  </span><br><span class="line">    L=(LinkList) <span class="built_in">malloc</span>(<span class="keyword">sizeof</span> (LNode));  </span><br><span class="line">    L-&gt;next=<span class="literal">NULL</span>;  </span><br><span class="line">    ElemType x;  </span><br><span class="line">    LNode *s,*r=L;<span class="comment">//s指向新节点，r指向尾结点  </span></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x);  </span><br><span class="line">    <span class="keyword">while</span>(x!=<span class="number">9999</span>)&#123;  </span><br><span class="line">        s=(LinkList) <span class="built_in">malloc</span>(<span class="keyword">sizeof</span> (LNode));  </span><br><span class="line">        s-&gt;data=x;  </span><br><span class="line">        r-&gt;next=s;  </span><br><span class="line">        r=s;  </span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x);  </span><br><span class="line">    &#125;  </span><br><span class="line">    r-&gt;next=<span class="literal">NULL</span>;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="type">void</span> <span class="title function_">print_LinKlist</span><span class="params">(LinkList L)</span>&#123;  </span><br><span class="line">    L=L-&gt;next;  </span><br><span class="line">    <span class="keyword">while</span>(L!=<span class="literal">NULL</span>)&#123;  </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%3d&quot;</span>,L-&gt;data);  </span><br><span class="line">        L=L-&gt;next;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//按位置查找  </span></span><br><span class="line"> LinkList <span class="title function_">GetEle_by_pos</span><span class="params">(LinkList L,<span class="type">int</span> pos)</span>&#123;  </span><br><span class="line"> <span class="comment">//说明：L头结点的位置是0</span></span><br><span class="line">    <span class="keyword">if</span>(pos&lt;<span class="number">1</span>)&#123;  </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">if</span>(pos==<span class="number">0</span>)&#123;  </span><br><span class="line">        <span class="keyword">return</span> L;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="type">int</span> i=<span class="number">0</span>;  </span><br><span class="line">    <span class="keyword">while</span>(L&amp;&amp;i&lt;pos)&#123;  </span><br><span class="line">        L=L-&gt;next;  </span><br><span class="line">        i++;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> L;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//按值查找  </span></span><br><span class="line">LinkList <span class="title function_">GetEle_by_value</span><span class="params">(LinkList L,<span class="type">int</span> value)</span>&#123;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">while</span>(L)&#123;<span class="comment">//表示L不为空，循环  </span></span><br><span class="line">        <span class="keyword">if</span>(L-&gt;data!=value)&#123;  </span><br><span class="line">            L=L-&gt;next;  </span><br><span class="line">        &#125;<span class="keyword">if</span>(L-&gt;data==value)&#123;  </span><br><span class="line">            <span class="keyword">return</span> L;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;  </span><br><span class="line">  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;  </span><br><span class="line">    LinkList L;<span class="comment">//定义链表的头指针  </span></span><br><span class="line">    list_tail_insert(L);  </span><br><span class="line">    print_LinKlist(L);  </span><br><span class="line">  </span><br><span class="line">    LinkList pNode1 = GetEle_by_pos(L,<span class="number">3</span>);  </span><br><span class="line">    <span class="keyword">if</span>(pNode1!=<span class="literal">NULL</span>)&#123;  </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\nsearch by postion success\n&quot;</span>);  </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;the value is %d\n&quot;</span>,pNode1-&gt;data);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">    LinkList pNode2 = GetEle_by_value(L, <span class="number">8</span>);  </span><br><span class="line">    <span class="keyword">if</span>(pNode2!=<span class="literal">NULL</span>)&#123;  </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;search by value success\n&quot;</span>);  </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;the value is %d\n&quot;</span>,pNode2-&gt;data);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="链表-往第i-个位置插入元素"><a href="#链表-往第i-个位置插入元素" class="headerlink" title="链表 往第i 个位置插入元素"></a>链表 往第i 个位置插入元素</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span>  </span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> ElemType;  </span><br><span class="line"><span class="comment">//定义结点结构体  </span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">LNode</span>&#123;</span>  </span><br><span class="line">    ElemType data;<span class="comment">//数据域  </span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">LNode</span> *<span class="title">next</span>;</span><span class="comment">//指针域  </span></span><br><span class="line">&#125;LNode,*LinkList;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//尾插法新建链表  </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">list_tail_insert</span><span class="params">(LinkList &amp;L)</span>&#123;  </span><br><span class="line">    L=(LinkList) <span class="built_in">malloc</span>(<span class="keyword">sizeof</span> (LNode));  </span><br><span class="line">    L-&gt;next=<span class="literal">NULL</span>;  </span><br><span class="line">    ElemType x;  </span><br><span class="line">    LNode *s,*r=L;<span class="comment">//s指向新节点，r指向尾结点  </span></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x);  </span><br><span class="line">    <span class="keyword">while</span>(x!=<span class="number">9999</span>)&#123;  </span><br><span class="line">        s=(LinkList) <span class="built_in">malloc</span>(<span class="keyword">sizeof</span> (LNode));  </span><br><span class="line">        s-&gt;data=x;  </span><br><span class="line">        r-&gt;next=s;  </span><br><span class="line">        r=s;  </span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x);  </span><br><span class="line">    &#125;  </span><br><span class="line">    r-&gt;next=<span class="literal">NULL</span>;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="comment">//打印链表的方法</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">print_LinKlist</span><span class="params">(LinkList L)</span>&#123;  </span><br><span class="line">    L=L-&gt;next;  </span><br><span class="line">    <span class="keyword">while</span>(L!=<span class="literal">NULL</span>)&#123;  </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%3d&quot;</span>,L-&gt;data);  </span><br><span class="line">        L=L-&gt;next;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//按位置查找  </span></span><br><span class="line"> LinkList <span class="title function_">GetEle_by_pos</span><span class="params">(LinkList L,<span class="type">int</span> pos)</span>&#123;  </span><br><span class="line">    <span class="keyword">if</span>(pos&lt;<span class="number">1</span>)&#123;  </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">if</span>(pos==<span class="number">0</span>)&#123;  </span><br><span class="line">        <span class="keyword">return</span> L;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="type">int</span> i=<span class="number">0</span>;  </span><br><span class="line">    <span class="keyword">while</span>(i&lt;pos)&#123;  </span><br><span class="line">        L=L-&gt;next;  </span><br><span class="line">        i++;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> L;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//插入方法，往第i个位置插入元素  </span></span><br><span class="line"><span class="type">bool</span> <span class="title function_">ListFrontInsert</span><span class="params">(LinkList L,<span class="type">int</span> i,<span class="type">int</span> insert)</span>&#123;  </span><br><span class="line">    <span class="comment">//先找到链表第i-1个位置，并指向  </span></span><br><span class="line">    LinkList p = GetEle_by_pos(L, i<span class="number">-1</span>);  </span><br><span class="line">    <span class="keyword">if</span>(p==<span class="literal">NULL</span>)&#123;  </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="comment">//定义一个新的结点  </span></span><br><span class="line">    LinkList q;  </span><br><span class="line">    q = (LinkList) <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));  </span><br><span class="line">    q-&gt;next=p-&gt;next;  </span><br><span class="line">    q-&gt;data=insert;  </span><br><span class="line">    p-&gt;next=q;  </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"> &#125;  </span><br><span class="line">  </span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;  </span><br><span class="line">    LinkList L;<span class="comment">//定义链表的头指针  </span></span><br><span class="line"></span><br><span class="line">    list_tail_insert(L);  </span><br><span class="line">    print_LinKlist(L);  </span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);  </span><br><span class="line">    ListFrontInsert(L,<span class="number">2</span>,<span class="number">80</span>);  <span class="comment">//往第二个位置，插入80</span></span><br><span class="line">    print_LinKlist(L);  </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="单链表的删除"><a href="#单链表的删除" class="headerlink" title="单链表的删除"></a>单链表的删除</h2><h3 id="单链表删除实战"><a href="#单链表删除实战" class="headerlink" title="单链表删除实战"></a>单链表删除实战</h3><p><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304032047101.png" alt="Snipaste_2023-03-08_22-06-07.png"></p><p><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304032048552.png" alt="Snipaste_2023-03-08_22-03-33.png"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span>  </span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> ElemType;  </span><br><span class="line"><span class="comment">//定义结点结构体  </span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">LNode</span>&#123;</span>  </span><br><span class="line">    ElemType data;<span class="comment">//数据域  </span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">LNode</span> *<span class="title">next</span>;</span><span class="comment">//指针域  </span></span><br><span class="line">&#125;LNode,*LinkList;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//尾插法新建链表  </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">list_tail_insert</span><span class="params">(LinkList &amp;L)</span>&#123;  </span><br><span class="line">    L=(LinkList) <span class="built_in">malloc</span>(<span class="keyword">sizeof</span> (LNode));  </span><br><span class="line">    L-&gt;next=<span class="literal">NULL</span>;  </span><br><span class="line">    ElemType x;  </span><br><span class="line">    LNode *s,*r=L;<span class="comment">//s指向新节点，r指向尾结点  </span></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x);  </span><br><span class="line">    <span class="keyword">while</span>(x!=<span class="number">9999</span>)&#123;  </span><br><span class="line">        s=(LinkList) <span class="built_in">malloc</span>(<span class="keyword">sizeof</span> (LNode));  </span><br><span class="line">        s-&gt;data=x;  </span><br><span class="line">        r-&gt;next=s;  </span><br><span class="line">        r=s;  </span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x);  </span><br><span class="line">    &#125;  </span><br><span class="line">    r-&gt;next=<span class="literal">NULL</span>;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="comment">//按位置查找  </span></span><br><span class="line">LinkList <span class="title function_">GetEle_by_pos</span><span class="params">(LinkList L,<span class="type">int</span> pos)</span>&#123;  </span><br><span class="line">    <span class="comment">//说明：L头结点的位置是0  </span></span><br><span class="line">    <span class="keyword">if</span>(pos&lt;<span class="number">1</span>)&#123;  </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">if</span>(pos==<span class="number">0</span>)&#123;  </span><br><span class="line">        <span class="keyword">return</span> L;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="type">int</span> i=<span class="number">0</span>;  </span><br><span class="line">    <span class="keyword">while</span>(i&lt;pos)&#123;  </span><br><span class="line">        L=L-&gt;next;  </span><br><span class="line">        i++;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> L;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="comment">//打印链表的方法  </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">print_LinKlist</span><span class="params">(LinkList L)</span>&#123;  </span><br><span class="line">    L=L-&gt;next;  </span><br><span class="line">    <span class="keyword">while</span>(L!=<span class="literal">NULL</span>)&#123;  </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%3d&quot;</span>,L-&gt;data);  </span><br><span class="line">        L=L-&gt;next;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//单链表的删除方法  </span></span><br><span class="line"><span class="type">bool</span> <span class="title function_">delet_list</span><span class="params">(LinkList L,<span class="type">int</span> pos)</span>&#123;  <span class="comment">//删除时，L是不会变得，所以不需要加引用</span></span><br><span class="line">    <span class="keyword">if</span>(pos&gt;<span class="number">1</span>)&#123;  </span><br><span class="line">        LinkList p = GetEle_by_pos(L,pos - <span class="number">1</span>); <span class="comment">//拿到哟啊删除结点的前一个结点指针</span></span><br><span class="line">        LinkList q=p-&gt;next;  <span class="comment">//拿到要删除的结点指针</span></span><br><span class="line">        <span class="keyword">if</span>(q!=<span class="literal">NULL</span>)&#123;  </span><br><span class="line">            p-&gt;next=q-&gt;next;  </span><br><span class="line">            <span class="built_in">free</span>(q);  <span class="comment">//释放被删除元素的空间</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;        </span><br><span class="line">            &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;  </span><br><span class="line">    LinkList L;  </span><br><span class="line">    list_tail_insert(L);  </span><br><span class="line">    print_LinKlist(L);  </span><br><span class="line">    delet_list(L,<span class="number">2</span>);  </span><br><span class="line">    print_LinKlist(L);  </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="真题，链表转置实战"><a href="#真题，链表转置实战" class="headerlink" title="真题，链表转置实战"></a>真题，链表转置实战</h3><p>转置图示<img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304041933031.png" alt="image.png"></p><p>合并图解<br><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304041933379.png" alt="image.png"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span>  </span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> ElemType;  </span><br><span class="line"><span class="comment">//定义结点结构体  </span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">LNode</span>&#123;</span>  </span><br><span class="line">    ElemType data;<span class="comment">//数据域  </span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">LNode</span> *<span class="title">next</span>;</span><span class="comment">//指针域  </span></span><br><span class="line">&#125;LNode,*LinkList;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//尾插法新建链表  </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">list_tail_insert</span><span class="params">(LinkList &amp;L)</span>&#123;  </span><br><span class="line">    L=(LinkList) <span class="built_in">malloc</span>(<span class="keyword">sizeof</span> (LNode));  </span><br><span class="line">    L-&gt;next=<span class="literal">NULL</span>;  </span><br><span class="line">    ElemType x;  </span><br><span class="line">    LNode *s,*r=L;<span class="comment">//s指向新节点，r指向尾结点  </span></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x);  </span><br><span class="line">    <span class="keyword">while</span>(x!=<span class="number">9999</span>)&#123;  </span><br><span class="line">        s=(LinkList) <span class="built_in">malloc</span>(<span class="keyword">sizeof</span> (LNode));  </span><br><span class="line">        s-&gt;data=x;  </span><br><span class="line">        r-&gt;next=s;  </span><br><span class="line">        r=s;  </span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x);  </span><br><span class="line">    &#125;  </span><br><span class="line">    r-&gt;next=<span class="literal">NULL</span>;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="comment">//打印链表的方法  </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">print_LinKlist</span><span class="params">(LinkList L)</span>&#123;  </span><br><span class="line">    L=L-&gt;next;  </span><br><span class="line">    <span class="keyword">while</span>(L!=<span class="literal">NULL</span>)&#123;  </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%3d&quot;</span>,L-&gt;data);  </span><br><span class="line">        L=L-&gt;next;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//找中心结点  </span></span><br><span class="line"><span class="comment">//当链表奇数个结点取中间，偶数个结点取前一个  </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">find_middle</span><span class="params">(LinkList L,LinkList &amp;L2)</span>&#123;<span class="comment">//L表示第一条链表头结点，L2表示第二条链表头结点  </span></span><br><span class="line">    L2=(LinkList) <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));  </span><br><span class="line">    LinkList p,pp;<span class="comment">//双指针  </span></span><br><span class="line">    p=pp=L-&gt;next;  </span><br><span class="line">    <span class="keyword">while</span>(pp)&#123;  </span><br><span class="line">        pp=pp-&gt;next;  </span><br><span class="line">        <span class="keyword">if</span>(pp==<span class="literal">NULL</span>)&#123;<span class="comment">//必须判断每一步是否为空，防止崩溃  </span></span><br><span class="line">            <span class="keyword">break</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">        pp=pp-&gt;next;  </span><br><span class="line">        <span class="keyword">if</span>(pp==<span class="literal">NULL</span>)&#123;  </span><br><span class="line">            <span class="keyword">break</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">        p=p-&gt;next;  </span><br><span class="line">    &#125;  </span><br><span class="line">    L2-&gt;next=p-&gt;next;  </span><br><span class="line">    p-&gt;next=<span class="literal">NULL</span>;<span class="comment">//链表最后一个结点next要为空  </span></span><br><span class="line">&#125;  </span><br><span class="line"><span class="comment">//找中心结点，while循环次数是n/2</span></span><br><span class="line">  </span><br><span class="line"><span class="comment">//逆置方法  </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">reverse</span><span class="params">(LinkList L2)</span>&#123;<span class="comment">//逆转是不改变头指针的  </span></span><br><span class="line">    LinkList r,s,t;  </span><br><span class="line">    r=L2-&gt;next;  </span><br><span class="line">    <span class="keyword">if</span>(r==<span class="literal">NULL</span>)&#123;<span class="comment">//没有结点  </span></span><br><span class="line">        <span class="keyword">return</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">    s=r-&gt;next;  </span><br><span class="line">    <span class="keyword">if</span>(s==<span class="literal">NULL</span>)&#123;<span class="comment">//一个结点  </span></span><br><span class="line">        <span class="keyword">return</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">    t=s-&gt;next;  </span><br><span class="line">    <span class="keyword">while</span>(t)&#123;  </span><br><span class="line">        s-&gt;next=r;<span class="comment">//逆转  </span></span><br><span class="line">        r=s;  </span><br><span class="line">        s=t;  </span><br><span class="line">        t=t-&gt;next;  </span><br><span class="line">    &#125;  </span><br><span class="line">    s-&gt;next=r;  </span><br><span class="line">    L2-&gt;next-&gt;next=<span class="literal">NULL</span>;<span class="comment">//逆置后原链表第一个结点，变成最后一个结点，它的next=NULL;  </span></span><br><span class="line">    L2-&gt;next=s;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="comment">//逆转函数逆转的是L2链表，执行次数是n/2,</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//合并方法</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">merge</span><span class="params">(LinkList L,LinkList L2)</span>&#123;  </span><br><span class="line">    LinkList pcur,p,q;  </span><br><span class="line">    pcur=L-&gt;next;  </span><br><span class="line">    p=pcur-&gt;next;  </span><br><span class="line">    q=L2-&gt;next;  </span><br><span class="line">    <span class="keyword">while</span>(p!=<span class="literal">NULL</span>&amp;&amp;q!=<span class="literal">NULL</span>)&#123;  </span><br><span class="line">        pcur-&gt;next=q;  </span><br><span class="line">        q=q-&gt;next;  </span><br><span class="line">        pcur=pcur-&gt;next;  </span><br><span class="line">        pcur-&gt;next=p;  </span><br><span class="line">        p=p-&gt;next;  </span><br><span class="line">        pcur=pcur-&gt;next;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="comment">//上面merge函数的while循环遍历次数是n/2,所以时间复杂度是O(n)</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;  </span><br><span class="line">    LinkList L;  </span><br><span class="line">    LinkList L2;  </span><br><span class="line">  </span><br><span class="line">    list_tail_insert(L);  </span><br><span class="line">    print_LinKlist(L);  </span><br><span class="line">  </span><br><span class="line">    find_middle(L,L2);  </span><br><span class="line">    print_LinKlist(L);  </span><br><span class="line">    print_LinKlist(L2);  </span><br><span class="line">  </span><br><span class="line">    reverse(L2);  </span><br><span class="line">    print_LinKlist(L2);  </span><br><span class="line">  </span><br><span class="line">    merge(L,L2);  </span><br><span class="line">    <span class="built_in">free</span>(L2);  </span><br><span class="line">    print_LinKlist(L);  </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line"><span class="comment">//综上，merge、find_middle、reverse函数总的时间复杂度是1.5n,忽略首项系数O(n)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="OJ测试"><a href="#OJ测试" class="headerlink" title="OJ测试"></a>OJ测试</h3><p>作业说明<img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304032107529.png" alt=""></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span>  </span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> ElemType;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">LNode</span>&#123;</span>  </span><br><span class="line">    ElemType data;  </span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">LNode</span>* <span class="title">next</span>;</span>  </span><br><span class="line">&#125;LNOde,*Linklist;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//尾插法新建链表  </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">list_tail_insert</span><span class="params">(Linklist &amp;L)</span>&#123;  </span><br><span class="line">    L=(Linklist) <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));  </span><br><span class="line">    L-&gt;next=<span class="literal">NULL</span>;  </span><br><span class="line">    Linklist s,r=L;  </span><br><span class="line">    <span class="type">int</span> x;  </span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x);  </span><br><span class="line">    <span class="keyword">while</span>(x!=<span class="number">9999</span>)&#123;  </span><br><span class="line">        s=(Linklist) <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));  </span><br><span class="line">        s-&gt;data=x;  </span><br><span class="line">        r-&gt;next=s;  </span><br><span class="line">        r=s;  </span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x);  </span><br><span class="line">    &#125;  </span><br><span class="line">    s-&gt;next=<span class="literal">NULL</span>;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//按位置查找的方法  </span></span><br><span class="line">Linklist <span class="title function_">getEle_by_pos</span><span class="params">(Linklist L,<span class="type">int</span> pos)</span>&#123;  </span><br><span class="line">    <span class="keyword">if</span>(pos==<span class="number">0</span>)&#123;  </span><br><span class="line">        <span class="keyword">return</span> L;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">if</span>(pos&lt;<span class="number">1</span>)&#123;  </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="type">int</span> i=<span class="number">0</span>;  </span><br><span class="line">    <span class="keyword">while</span>(L&amp;&amp;i&lt;pos)&#123; <span class="comment">//注意：while(i&lt;pos)&#123;&#125; 忽略了L为空 也不能循环 </span></span><br><span class="line">        L=L-&gt;next;  </span><br><span class="line">        i++;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> L;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//按位置插入的方法  </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">list_insert</span><span class="params">(Linklist L,<span class="type">int</span> i,<span class="type">int</span> insert)</span>&#123;  </span><br><span class="line">    Linklist p = getEle_by_pos(L,i - <span class="number">1</span>);  </span><br><span class="line">    <span class="keyword">if</span>(p==<span class="literal">NULL</span>)&#123;  </span><br><span class="line">        <span class="keyword">return</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">    Linklist s;  </span><br><span class="line">  </span><br><span class="line">    s=(Linklist) <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));  </span><br><span class="line">    s-&gt;next=p-&gt;next;  </span><br><span class="line">    s-&gt;data=insert;  </span><br><span class="line">    p-&gt;next=s;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//打印链表的方法  </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">print_list</span><span class="params">(Linklist L)</span>&#123;  </span><br><span class="line">    <span class="keyword">while</span>(L)&#123;  </span><br><span class="line">        L=L-&gt;next;  </span><br><span class="line">        <span class="keyword">if</span>(L==<span class="literal">NULL</span>)&#123;  </span><br><span class="line">            <span class="keyword">break</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%3d&quot;</span>,L-&gt;data);  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;  </span><br><span class="line">    Linklist L;  </span><br><span class="line">    list_tail_insert(L);  </span><br><span class="line">    print_list(L);  </span><br><span class="line">    list_insert(L,<span class="number">2</span>,<span class="number">99</span>);  </span><br><span class="line">    print_list(L);  </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="栈与队列"><a href="#栈与队列" class="headerlink" title="栈与队列"></a>栈与队列</h2><h3 id="栈原理解析"><a href="#栈原理解析" class="headerlink" title="栈原理解析"></a>栈原理解析</h3><p><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304042113354.png" alt="image.png"></p><p><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304042114958.png" alt="image.png"><br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义一个结构体(栈)</span></span><br><span class="line">typrdef <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">Elemtype data[<span class="number">50</span>];</span><br><span class="line"><span class="type">int</span> top;</span><br><span class="line">&#125;SqStack;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//此时栈为空</span></span><br><span class="line">S.top=<span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//入栈操作</span></span><br><span class="line"><span class="comment">//前加加，先获取栈位置，在加元素</span></span><br><span class="line"><span class="comment">//S.top=S.top+1;</span></span><br><span class="line"><span class="comment">//S.data[S.top]=4;</span></span><br><span class="line">S.data[++S.top]</span><br><span class="line"></span><br><span class="line"><span class="comment">//前加加--&gt;先做加1，后做其他运算；</span></span><br><span class="line"><span class="comment">//后加加--&gt;先做其他运算，在做加1；</span></span><br></pre></td></tr></table></figure></p><p><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304042114934.png" alt="image.png"><br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//出栈操作</span></span><br><span class="line"><span class="comment">//后减减，先拿到取出的元素</span></span><br><span class="line"><span class="comment">//x=S.data[S.top];</span></span><br><span class="line"><span class="comment">//S.top=S.top-1;</span></span><br><span class="line">x=S.data[S.top--]</span><br></pre></td></tr></table></figure></p><h3 id="初始化栈-入栈-出栈"><a href="#初始化栈-入栈-出栈" class="headerlink" title="初始化栈-入栈-出栈"></a>初始化栈-入栈-出栈</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span>  </span></span><br><span class="line">  </span><br><span class="line"><span class="meta">#<span class="keyword">define</span> Maxsize 50  </span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> ElemType;  </span><br><span class="line"><span class="comment">//定义栈结构体  </span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span>  </span><br><span class="line">    ElemType data[Maxsize];<span class="comment">//栈空间  </span></span><br><span class="line">    <span class="type">int</span> top;<span class="comment">//栈针  </span></span><br><span class="line">&#125;SqStack;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//初始化栈方法  </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">innit</span><span class="params">(SqStack &amp;S)</span>&#123;  </span><br><span class="line">    S.top=<span class="number">-1</span>;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//压栈方法  </span></span><br><span class="line"><span class="type">bool</span> <span class="title function_">Push</span><span class="params">(SqStack &amp;S,ElemType e)</span>&#123;  </span><br><span class="line">    <span class="keyword">if</span>(S.top==Maxsize<span class="number">-1</span>)&#123;  </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">    S.data[++S.top]=e;  </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//打印栈的方法  </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">print_satck</span><span class="params">(SqStack S)</span>&#123;  </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;S.top+<span class="number">1</span>;i++)&#123;  </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%3d&quot;</span>,S.data[i]);  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//判断栈是否为空  </span></span><br><span class="line"><span class="type">bool</span> <span class="title function_">isEmpty</span><span class="params">(SqStack S)</span>&#123;  </span><br><span class="line">    <span class="keyword">if</span>(S.top==<span class="number">-1</span>)&#123;  </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//弹栈方法  </span></span><br><span class="line"><span class="type">bool</span> <span class="title function_">Pop</span><span class="params">(SqStack &amp;S,ElemType &amp;e)</span>&#123;  </span><br><span class="line">    <span class="keyword">if</span>(isEmpty(S))&#123;  </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">    e=S.data[S.top--];<span class="comment">//拿完栈顶元素后，弹栈  </span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;  </span><br><span class="line">    SqStack S;  </span><br><span class="line">    innit(S);  </span><br><span class="line">      </span><br><span class="line">    Push(S,<span class="number">79</span>);  </span><br><span class="line">    Push(S,<span class="number">2</span>);  </span><br><span class="line">    Push(S,<span class="number">3</span>);  </span><br><span class="line">    print_satck(S);  </span><br><span class="line">  </span><br><span class="line">    ElemType e;  </span><br><span class="line">    <span class="type">bool</span> flag;  </span><br><span class="line">    flag=Pop(S,e);  </span><br><span class="line">    <span class="keyword">if</span>(flag)&#123;  </span><br><span class="line">        print_satck(S);  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="队列循环队列原理解析"><a href="#队列循环队列原理解析" class="headerlink" title="队列循环队列原理解析"></a>队列循环队列原理解析</h3><h4 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h4><p><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304042117893.png" alt="image.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">队列实现有两种常见方式：数组、链表</span><br><span class="line"></span><br><span class="line">特点：允许头部删除，尾部增加</span><br></pre></td></tr></table></figure><h5 id="循环队列"><a href="#循环队列" class="headerlink" title="循环队列"></a>循环队列</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">循环队列实现是通过数组的方式</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304042119873.png" alt="image.png"></p><p><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304042144375.png" alt="image.png"></p><p><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304042119533.png" alt="image.png"></p><p><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304042119792.png" alt="image.png"></p><h5 id="链式队列"><a href="#链式队列" class="headerlink" title="链式队列"></a>链式队列</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">链式队列的实现通过链表</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304042121691.png" alt="image.png"></p><h3 id="循环队列数组实现"><a href="#循环队列数组实现" class="headerlink" title="循环队列数组实现"></a>循环队列数组实现</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span>  </span></span><br><span class="line">  </span><br><span class="line"><span class="meta">#<span class="keyword">define</span> Maxsize 5  </span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> ElemType;  </span><br><span class="line"><span class="comment">//循环队列结构体  </span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span>  </span><br><span class="line">    ElemType data[Maxsize];<span class="comment">//数组，存储Maxsize-1个元素  </span></span><br><span class="line">    <span class="type">int</span> front,rear;<span class="comment">//队列头，队列尾  </span></span><br><span class="line">&#125;SqQueue;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//初始化队列方法  </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Innit</span><span class="params">(SqQueue &amp;Q)</span>&#123;  </span><br><span class="line">    Q.rear=Q.front=<span class="number">0</span>;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//入队列函数  </span></span><br><span class="line"><span class="type">bool</span> <span class="title function_">EnQueue</span><span class="params">(SqQueue &amp;Q,ElemType e)</span>&#123;  </span><br><span class="line">    <span class="keyword">if</span>((Q.rear+<span class="number">1</span>)%Maxsize==Q.front)&#123;<span class="comment">//判断队列是否满了  </span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">    Q.data[Q.rear]=e;<span class="comment">//放入元素  </span></span><br><span class="line">    Q.rear=(Q.rear+<span class="number">1</span>)%Maxsize;<span class="comment">//改变队尾标记  </span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//出队列函数  </span></span><br><span class="line"><span class="type">bool</span> <span class="title function_">OutQueue</span><span class="params">(SqQueue &amp;Q,ElemType &amp;x)</span>&#123;  </span><br><span class="line">    <span class="keyword">if</span>(Q.rear==Q.front)&#123;  </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">    x=Q.data[Q.front];<span class="comment">//拿到删除的元素  </span></span><br><span class="line">    Q.front=(Q.front+<span class="number">1</span>)%Maxsize;  </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//打印队列的方法  </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">print_queue</span><span class="params">(SqQueue Q)</span>&#123;  </span><br><span class="line">    <span class="type">int</span> i;  </span><br><span class="line">    <span class="keyword">for</span>(i=Q.front;i&lt;Q.rear;i++)&#123;  </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%3d&quot;</span>,Q.data[i]);  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;  </span><br><span class="line">    SqQueue Q;  </span><br><span class="line">    <span class="type">bool</span> flag;</span><br><span class="line">    ElemType e; </span><br><span class="line">    </span><br><span class="line">    Innit(Q);  </span><br><span class="line">    EnQueue(Q,<span class="number">29</span>);  </span><br><span class="line">    EnQueue(Q,<span class="number">39</span>);  </span><br><span class="line">    EnQueue(Q,<span class="number">9</span>);  </span><br><span class="line">    print_queue(Q);  </span><br><span class="line">  </span><br><span class="line">   </span><br><span class="line">    flag=OutQueue(Q,e); </span><br><span class="line">    <span class="keyword">if</span>(flag)&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Pop success ,the pop value is %d\n&quot;</span>,e);</span><br><span class="line">    &#125; </span><br><span class="line">    print_queue(Q);  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304042122600.png" alt="image.png"></p><h3 id="队列链表实现-1"><a href="#队列链表实现-1" class="headerlink" title="队列链表实现-1"></a>队列链表实现-1</h3><p>这是 带有头结点 的方式实现<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">一般队列的头结点是否有数据取决于队列的实现方式：</span><br><span class="line"></span><br><span class="line">-   如果队列是用数组实现的，那么头结点就是数组的第一个元素，它有数据；</span><br><span class="line">-   如果队列是用链表实现的，那么头结点可以是一个空结点，也可以是链表的第一个元素，这取决于是否使用带头结点的链表。如果使用带头结点的链表，那么头结点没有数据，只是一个指针；如果使用不带头结点的链表，那么头结点就是链表的第一个元素，它有数据。</span><br><span class="line"></span><br></pre></td></tr></table></figure></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span>  </span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> Elemype;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">LinkNode</span>&#123;</span>  </span><br><span class="line">    Elemype data;  </span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">LinkNode</span>* <span class="title">next</span>;</span>  </span><br><span class="line">&#125;LinkNode,*LinkList;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span>  </span><br><span class="line">    LinkList front,rear;<span class="comment">//链表头，链表尾  </span></span><br><span class="line">&#125;LinkQueue;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//初始化链表的方法  </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">innit</span><span class="params">(LinkQueue &amp;Q)</span>&#123;  </span><br><span class="line">    Q.rear=Q.front=(LinkList) <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LinkNode));  <span class="comment">//这是一种带头结点的实现方式</span></span><br><span class="line">    Q.rear-&gt;next</span><br><span class="line">    =<span class="literal">NULL</span>;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//入队列函数,尾部插入法  </span></span><br><span class="line"><span class="type">bool</span> <span class="title function_">EnQueue</span><span class="params">(LinkQueue &amp;Q,Elemype x)</span>&#123;  </span><br><span class="line">    LinkList s;  </span><br><span class="line">    s=(LinkList) <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LinkNode));  </span><br><span class="line">    s-&gt;data=x;  </span><br><span class="line">    Q.rear-&gt;next=s;  </span><br><span class="line">    Q.rear=s;<span class="comment">//注意这一步容易漏掉  </span></span><br><span class="line">    s-&gt;next=<span class="literal">NULL</span>;  </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//出队列函数  </span></span><br><span class="line"><span class="type">bool</span> <span class="title function_">OutQueue</span><span class="params">(LinkQueue &amp;Q)</span>&#123;  </span><br><span class="line">    <span class="keyword">if</span>(Q.front-&gt;next==<span class="literal">NULL</span>)&#123;<span class="comment">//判断一个元素也没有  </span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">    LinkList s=Q.front-&gt;next;  </span><br><span class="line">    Q.front-&gt;next=s-&gt;next;  </span><br><span class="line">    <span class="keyword">if</span>(Q.rear==s)&#123;<span class="comment">//判断删除的是最后一个元素  </span></span><br><span class="line">        Q.rear=Q.front;<span class="comment">//队列为空  </span></span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="built_in">free</span>(s);  </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;  </span><br><span class="line">    LinkQueue Q;  </span><br><span class="line">    innit(Q);  </span><br><span class="line">  </span><br><span class="line">    EnQueue(Q,<span class="number">20</span>);  </span><br><span class="line">    EnQueue(Q,<span class="number">20</span>);  </span><br><span class="line">    EnQueue(Q,<span class="number">20</span>);  </span><br><span class="line">    EnQueue(Q,<span class="number">20</span>);  </span><br><span class="line">  </span><br><span class="line">    <span class="type">bool</span> ret;  </span><br><span class="line">    ret= OutQueue(Q);  </span><br><span class="line">    <span class="keyword">if</span>(ret)&#123;  </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Pop success&quot;</span>);  </span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;  </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Pop fail&quot;</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="队列链表的实现-2"><a href="#队列链表的实现-2" class="headerlink" title="队列链表的实现-2"></a>队列链表的实现-2</h3><ul><li>带头结点的队列，队列的头指针和尾指针都指向一个空的头结点，头结点的next指针指向第一个元素，尾结点的next指针为NULL。</li><li></li><li>不带头结点的队列，队列的头指针指向第一个元素，尾指针指向最后一个元素，尾结点的<br>不带头结点</li></ul><p><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304042149365.png" alt="image.png"></p><p>不带头结点的链表<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*实现不带头结点的链式队列*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> ElemType;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">bool</span> Status;</span><br><span class="line"><span class="comment">/*0.定义链式队列的基本结构*/</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">LinkNode</span> &#123;</span></span><br><span class="line">    <span class="comment">//链式队列结点</span></span><br><span class="line">    ElemType data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">LinkNode</span>* <span class="title">next</span>;</span></span><br><span class="line">&#125;LinkNode;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="comment">//链式队列</span></span><br><span class="line">    LinkNode* front, * rear; <span class="comment">//队列的队头和队尾指针</span></span><br><span class="line">&#125;LinkQueue;</span><br><span class="line"><span class="comment">/*1.初始化链式队列 (不带头结点)*/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">InitQueue</span><span class="params">(LinkQueue&amp; Q)</span> &#123;<span class="comment">//初始时，front、rear都指向NULL</span></span><br><span class="line">    Q.front = <span class="literal">NULL</span>;</span><br><span class="line">    Q.rear = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*2.判断队列是为空（不带头结点）*/</span></span><br><span class="line">Status <span class="title function_">IsEmpty</span><span class="params">(LinkQueue Q)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (Q.front == <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*3.入队 (不带头结点)*/</span></span><br><span class="line">Status <span class="title function_">EnQueue</span><span class="params">(LinkQueue&amp; Q, ElemType x)</span> &#123;</span><br><span class="line">    LinkNode* s = (LinkNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LinkNode));</span><br><span class="line">    <span class="keyword">if</span> (s == <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    s-&gt;data = x;</span><br><span class="line">    s-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">if</span> (Q.front == <span class="literal">NULL</span>) <span class="comment">//在空的队列中插入第一元素</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//不带头结点的队列，第一个元素入队时需要特别处理</span></span><br><span class="line">        Q.front = s; <span class="comment">//修改队头队尾指针</span></span><br><span class="line">        Q.rear = s;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        Q.rear-&gt;next = s; <span class="comment">//新结点插入到rear之后</span></span><br><span class="line">        Q.rear = s; <span class="comment">//修改表尾指针</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*4.出队（不带头结点）*/</span></span><br><span class="line">Status <span class="title function_">DeQueue</span><span class="params">(LinkQueue&amp; Q, ElemType&amp; x)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (Q.front == <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">//空队</span></span><br><span class="line">    LinkNode* p = Q.front; <span class="comment">//p指向此次出队的结点</span></span><br><span class="line">    x = p-&gt;data; <span class="comment">//用变量x返回队头元素</span></span><br><span class="line">    Q.front = p-&gt;next; <span class="comment">//修改front指针</span></span><br><span class="line">    <span class="keyword">if</span> (Q.rear == p) <span class="comment">//此次是最后一个结点出队</span></span><br><span class="line">    &#123;</span><br><span class="line">        Q.front = <span class="literal">NULL</span>; <span class="comment">//front指向NULL</span></span><br><span class="line">        Q.rear = <span class="literal">NULL</span>; <span class="comment">//rear指向NULL</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">free</span>(p); <span class="comment">//释放结点空间</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    LinkQueue Q;</span><br><span class="line">    ElemType x = <span class="number">-1</span>;</span><br><span class="line">    InitQueue(Q);</span><br><span class="line">    EnQueue(Q, <span class="number">3</span>);</span><br><span class="line">    EnQueue(Q, <span class="number">6</span>);</span><br><span class="line">    EnQueue(Q, <span class="number">8</span>);</span><br><span class="line">    EnQueue(Q, <span class="number">9</span>);</span><br><span class="line">    EnQueue(Q, <span class="number">7</span>);</span><br><span class="line">    EnQueue(Q, <span class="number">5</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; <span class="number">6</span>; i++) &#123;</span><br><span class="line">        DeQueue(Q, x);</span><br></pre></td></tr></table></figure></p><h3 id="OJ测试-1"><a href="#OJ测试-1" class="headerlink" title="OJ测试"></a>OJ测试</h3><p><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304042124302.png" alt="image.png"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span>  </span></span><br><span class="line">  </span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MaxSize 5  </span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> ElemType;  </span><br><span class="line"><span class="comment">//定义一个栈结构体  </span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span>  </span><br><span class="line">    ElemType data[MaxSize];  </span><br><span class="line">    <span class="type">int</span> top;  </span><br><span class="line">&#125;SqStack;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//定义一个循环队列结构体  </span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span>  </span><br><span class="line">    ElemType data[MaxSize];  </span><br><span class="line">    <span class="type">int</span> front,rear;<span class="comment">//队列头，队列尾  </span></span><br><span class="line">&#125;SqQueue;  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//初始化栈方法  </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">initStack</span><span class="params">(SqStack &amp;S)</span>&#123;  </span><br><span class="line">    S.top=<span class="number">-1</span>;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//入栈方法  </span></span><br><span class="line"><span class="type">bool</span> <span class="title function_">Push</span><span class="params">(SqStack &amp;S,ElemType e)</span>&#123;  </span><br><span class="line">    <span class="keyword">if</span>(S.top==MaxSize<span class="number">-1</span>)&#123;  </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">    S.data[++S.top]=e;  </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//出栈方法  </span></span><br><span class="line"><span class="type">bool</span> <span class="title function_">Pop</span><span class="params">(SqStack &amp;S,ElemType &amp;e)</span>&#123;  </span><br><span class="line">    <span class="keyword">if</span>(S.top==<span class="number">-1</span>)&#123;  </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">    e=S.data[S.top--];  </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//打印栈的方法  </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">print_stack</span><span class="params">(SqStack S)</span>&#123;  </span><br><span class="line">    <span class="type">int</span> i;  </span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;S.top+<span class="number">1</span>;i++)&#123;  </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%3d&quot;</span>,S.data[i]);  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//初始化队列的方法  </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">initQueue</span><span class="params">(SqQueue &amp;Q)</span>&#123;  </span><br><span class="line">    Q.front=Q.rear=<span class="number">0</span>;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//入队列方法  </span></span><br><span class="line"><span class="type">bool</span> <span class="title function_">EnQueue</span><span class="params">(SqQueue &amp;Q,ElemType e)</span>&#123;  </span><br><span class="line">    <span class="keyword">if</span>((Q.rear+<span class="number">1</span>)%MaxSize==Q.front)&#123;<span class="comment">//判断队列是否满  </span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">    Q.data[Q.rear]=e;  </span><br><span class="line">    Q.rear=(Q.rear+<span class="number">1</span>)%MaxSize;  </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//出队列方法  </span></span><br><span class="line"><span class="type">bool</span> <span class="title function_">OutQueue</span><span class="params">(SqQueue &amp;Q,ElemType &amp;e)</span>&#123;  </span><br><span class="line">    <span class="keyword">if</span>(Q.rear==Q.front)&#123;  </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">    e=Q.data[Q.front];  </span><br><span class="line">    Q.front=(Q.front+<span class="number">1</span>)%MaxSize;  </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//打印队列的方法  </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">print_queue</span><span class="params">(SqQueue Q)</span>&#123;  </span><br><span class="line">    <span class="type">int</span> i;  </span><br><span class="line">    <span class="keyword">for</span>(i=Q.front;i&lt;Q.rear;i++)&#123;  </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%3d&quot;</span>,Q.data[i]);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;  </span><br><span class="line">    SqStack S;  </span><br><span class="line">    initStack(S);  </span><br><span class="line">  </span><br><span class="line">    <span class="type">int</span> i,num;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++)&#123;  </span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;num);  </span><br><span class="line">        Push(S,num);  </span><br><span class="line">    &#125;  </span><br><span class="line">    print_stack(S);  </span><br><span class="line">  </span><br><span class="line">    ElemType m;<span class="comment">//用来存放拿出来的元素  </span></span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++)&#123;  </span><br><span class="line">        Pop(S,m);  </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;the ride num is %d\n&quot;</span>,m);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">    SqQueue Q;  </span><br><span class="line">    ElemType e;  </span><br><span class="line">    initQueue(Q);  </span><br><span class="line">  </span><br><span class="line">    <span class="type">int</span> i2,num2;  </span><br><span class="line">    <span class="type">bool</span> flag;  </span><br><span class="line">    <span class="keyword">for</span>(i2=<span class="number">0</span>;i2&lt;<span class="number">5</span>;i2++)&#123;  </span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;num2);  </span><br><span class="line">        flag=EnQueue(Q,num2);  </span><br><span class="line">        <span class="keyword">if</span>(!flag)&#123;  </span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;flase Queue is full\n&quot;</span>);  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">for</span>(i2=<span class="number">0</span>;i2&lt;<span class="number">4</span>;i2++)&#123;  </span><br><span class="line">        OutQueue(Q,e);  </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%3d&quot;</span>,e);  </span><br><span class="line">    &#125;  </span><br><span class="line">      </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="二叉树的建树和遍历"><a href="#二叉树的建树和遍历" class="headerlink" title="二叉树的建树和遍历"></a>二叉树的建树和遍历</h2><h3 id="树与二叉树原理解析"><a href="#树与二叉树原理解析" class="headerlink" title="树与二叉树原理解析"></a>树与二叉树原理解析</h3><h4 id="树原理解析"><a href="#树原理解析" class="headerlink" title="树原理解析"></a>树原理解析</h4><p><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304042158536.png" alt="image.png"></p><h4 id="二叉树原理"><a href="#二叉树原理" class="headerlink" title="二叉树原理"></a>二叉树原理</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1、满二叉树:每一层都放满了</span><br><span class="line"></span><br><span class="line">2、完全二叉树:除了最后一层，前面层数全部放满，最后一层从左往右，只能是右侧有空</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304042159720.png" alt="image.png"></p><p><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304042200909.png" alt="image.png"></p><h3 id="二叉树的层次建树"><a href="#二叉树的层次建树" class="headerlink" title="二叉树的层次建树"></a>二叉树的层次建树</h3><p><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304042201927.png" alt="image.png"></p><p><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304042201135.png" alt="image.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">上面层次建树的实现通过辅助队列实现</span><br><span class="line">每加一个元素，辅助队列就往队尾加一个元素</span><br><span class="line">而pcur指针判断结点的左右两侧都放满了时，才往后移动</span><br><span class="line">这样就实现了层次建树</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304042201587.png" alt="image.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">以下代码实现了，输入abcdefgj一串连续字符，然后按层次建树存储</span><br><span class="line"></span><br><span class="line">这里的辅助队列有四个指针：front-rear-listpnew-pcur 起初都赋值为NULL,就是没有头结点得方式创建队列</span><br><span class="line"></span><br><span class="line">front指向第一个结点</span><br><span class="line">rear指向末尾结点</span><br><span class="line">listpnew指向新加元素</span><br><span class="line">pcur指向当前结点</span><br><span class="line"></span><br><span class="line">这里的二叉树有一个指针:pnew指向树的最新结点</span><br></pre></td></tr></table></figure><p>头文件  function.h 代码如下<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span>  </span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">typedef</span> <span class="type">char</span> ElenType;  </span><br><span class="line"></span><br><span class="line"><span class="comment">//二叉树的链表结点</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">TNode</span>&#123;</span>  </span><br><span class="line">    ElenType c;<span class="comment">//数据域  </span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">TNode</span> *<span class="title">lift</span>,*<span class="title">right</span>;</span><span class="comment">//指针域:左指针、右指针  </span></span><br><span class="line">&#125;BiTNode,*BiTree;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//辅助队列的链表结点</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">tag</span>&#123;</span>  </span><br><span class="line">    BiTree p;<span class="comment">//p获取数的结点 </span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">tag</span> *<span class="title">pnext</span>;</span>  </span><br><span class="line">&#125;tag,*ptag;</span><br></pre></td></tr></table></figure></p><p>主文件 main.cpp 代码如下<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;function.h&quot;</span>  </span></span><br><span class="line">  </span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;  </span><br><span class="line">    BiTree pnew;<span class="comment">//用来指向树的新节点  </span></span><br><span class="line">    BiTree root=<span class="literal">NULL</span>;<span class="comment">//赋值为NULL用于下面的if判断  </span></span><br><span class="line">    <span class="comment">//注意，树根不像链表头结点  </span></span><br><span class="line">    <span class="comment">//链表头结点用来指向第一个结点，里面可以不放东西  </span></span><br><span class="line">    <span class="comment">//但是二叉树没有头结点</span></span><br><span class="line">    <span class="comment">//第一个结点就是树根，用来存数据 </span></span><br><span class="line">  </span><br><span class="line">    <span class="type">char</span> c;  </span><br><span class="line">    ptag front=<span class="literal">NULL</span>,rear=<span class="literal">NULL</span>,listpnew=<span class="literal">NULL</span>,pcur=<span class="literal">NULL</span>;<span class="comment">//队列头、队列尾、指向树的新节点、指向当前队列结点  </span></span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">&quot;%c&quot;</span>,&amp;c))&#123;  </span><br><span class="line">        <span class="keyword">if</span>(c==<span class="string">&#x27;\n&#x27;</span>)&#123;  </span><br><span class="line">            <span class="keyword">break</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="comment">//calloc申请的空间大小是两个参数相乘，并且初始化空间，赋值为Null(左右指针赋值为Null)  </span></span><br><span class="line">        pnew=(BiTree) <span class="built_in">calloc</span>(<span class="number">1</span>,<span class="keyword">sizeof</span> (BiTNode));  </span><br><span class="line">        pnew-&gt;c=c;  </span><br><span class="line">        listpnew= (ptag)<span class="built_in">calloc</span>(<span class="number">1</span>,<span class="keyword">sizeof</span>(tag));  </span><br><span class="line">        listpnew-&gt;p=pnew;  </span><br><span class="line">        <span class="comment">//如果是树的第一个结点  </span></span><br><span class="line">        <span class="keyword">if</span>(root==<span class="literal">NULL</span>)&#123;  </span><br><span class="line">            root=pnew;<span class="comment">//root指向根结点  </span></span><br><span class="line">            rear=front=listpnew;  </span><br><span class="line">            pcur=listpnew;<span class="comment">//pcur要指向要进入树的父亲元素(当前元素)  </span></span><br><span class="line">        <span class="comment">//if无论是否满足条件都会向下执行，else if只有在上一个条件不满足的情况下才会执行</span></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;  </span><br><span class="line">            rear-&gt;pnext=listpnew;<span class="comment">//入队列  </span></span><br><span class="line">            rear=listpnew;  </span><br><span class="line">            <span class="keyword">if</span>(pcur-&gt;p-&gt;lift==<span class="literal">NULL</span>)&#123;<span class="comment">//左为空，放入左  </span></span><br><span class="line">                pcur-&gt;p-&gt;lift=pnew;  </span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(pcur-&gt;p-&gt;right==<span class="literal">NULL</span>)&#123;<span class="comment">//右为空，放入右  </span></span><br><span class="line">                pcur-&gt;p-&gt;right=pnew;  </span><br><span class="line">                <span class="comment">//此时结点满了  </span></span><br><span class="line">                <span class="comment">//pcur往后移一位  </span></span><br><span class="line">                pcur=pcur-&gt;pnext;  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="二叉树的-前中后-序遍历"><a href="#二叉树的-前中后-序遍历" class="headerlink" title="二叉树的-前中后-序遍历"></a>二叉树的-前中后-序遍历</h3><p>递归思想</p><pre><code>1前序遍历:PreOrder     前序遍历也叫深度优先遍历2中序遍历：InOrder3后序遍历：PostOrder</code></pre><p>function.h代码如下<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span>  </span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">typedef</span> <span class="type">char</span> ElenType;  </span><br><span class="line"></span><br><span class="line"><span class="comment">//二叉树的链表结点</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">TNode</span>&#123;</span>  </span><br><span class="line">    ElenType c;<span class="comment">//数据域  </span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">TNode</span> *<span class="title">lift</span>,*<span class="title">right</span>;</span><span class="comment">//指针域:左指针、右指针  </span></span><br><span class="line">&#125;BiTNode,*BiTree;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//辅助队列的链表结点</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">tag</span>&#123;</span>  </span><br><span class="line">    BiTree p;<span class="comment">//p获取数的结点 </span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">tag</span> *<span class="title">pnext</span>;</span>  </span><br><span class="line">&#125;tag,*ptag;</span><br></pre></td></tr></table></figure></p><p>main.cpp代码如下<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;function.h&quot;</span>  </span></span><br><span class="line">  </span><br><span class="line"><span class="comment">//前序遍历，先序遍历，也叫深度优先遍历  </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">PreOrder</span><span class="params">(BiTree p)</span>&#123;  </span><br><span class="line">    <span class="keyword">if</span>(p!=<span class="literal">NULL</span>) &#123;  </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, p-&gt;c);  </span><br><span class="line">        PreOrder(p-&gt;lift);<span class="comment">//打印左子树  </span></span><br><span class="line">        PreOrder(p-&gt;right);<span class="comment">//打印又子树  </span></span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//中序遍历  </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">InOrder</span><span class="params">(BiTree p)</span>&#123;  </span><br><span class="line">    <span class="keyword">if</span>(p!=<span class="literal">NULL</span>) &#123;  </span><br><span class="line">        InOrder(p-&gt;lift);  </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, p-&gt;c);  </span><br><span class="line">        InOrder(p-&gt;right);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//后序遍历  </span></span><br><span class="line"><span class="type">void</span>  <span class="title function_">PostOrder</span><span class="params">(BiTree p)</span>&#123;  </span><br><span class="line">    <span class="keyword">if</span>(p!=<span class="literal">NULL</span>)&#123;  </span><br><span class="line">        PostOrder(p-&gt;lift);  </span><br><span class="line">        PostOrder(p-&gt;right);  </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,p-&gt;c);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;  </span><br><span class="line">    BiTree pnew;<span class="comment">//用来指向树的新节点  </span></span><br><span class="line">    BiTree root=<span class="literal">NULL</span>;<span class="comment">//用来指向树根  </span></span><br><span class="line">    <span class="comment">//注意，树根不像链表头结点  </span></span><br><span class="line">    <span class="comment">//链表头结点用来指向第一个结点，里面可以不放东西  </span></span><br><span class="line">    <span class="comment">//根就相当于第一个结点，必须有数据  </span></span><br><span class="line">  </span><br><span class="line">    <span class="type">char</span> c;  </span><br><span class="line">    <span class="comment">//队列头、队列尾、指向树的新节点、指向当前队列结点  </span></span><br><span class="line">    ptag front=<span class="literal">NULL</span>,rear=<span class="literal">NULL</span>,listpnew=<span class="literal">NULL</span>,pcur;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">&quot;%c&quot;</span>,&amp;c))&#123;  </span><br><span class="line">        <span class="keyword">if</span>(c==<span class="string">&#x27;\n&#x27;</span>)&#123;  </span><br><span class="line">            <span class="keyword">break</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">    <span class="comment">//calloc申请的空间大小是两个参数相乘，并且初始化空间，赋值为Null(左右指针赋值为Null)  </span></span><br><span class="line">        pnew=(BiTree) <span class="built_in">calloc</span>(<span class="number">1</span>,<span class="keyword">sizeof</span> (BiTNode));  </span><br><span class="line">        pnew-&gt;c=c;  </span><br><span class="line">        listpnew= (ptag)<span class="built_in">calloc</span>(<span class="number">1</span>,<span class="keyword">sizeof</span>(tag));  </span><br><span class="line">        listpnew-&gt;p=pnew;  </span><br><span class="line">        <span class="comment">//如果是树的第一个结点  </span></span><br><span class="line">        <span class="keyword">if</span>(root==<span class="literal">NULL</span>)&#123;  </span><br><span class="line">            root=pnew;<span class="comment">//root指向根结点  </span></span><br><span class="line">            rear=front=listpnew;  </span><br><span class="line">            pcur=listpnew;<span class="comment">//pcur要指向要进入树的父亲元素(当前元素)  </span></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;  </span><br><span class="line">            rear-&gt;pnext=listpnew;<span class="comment">//入队列  </span></span><br><span class="line">            rear=listpnew;  </span><br><span class="line">            <span class="keyword">if</span>(pcur-&gt;p-&gt;lift==<span class="literal">NULL</span>)&#123;<span class="comment">//左为空，放入左  </span></span><br><span class="line">                pcur-&gt;p-&gt;lift=pnew;  </span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(pcur-&gt;p-&gt;right==<span class="literal">NULL</span>)&#123;<span class="comment">//右为空，放入右  </span></span><br><span class="line">                pcur-&gt;p-&gt;right=pnew;  </span><br><span class="line">                <span class="comment">//此时结点满了  </span></span><br><span class="line">                <span class="comment">//pcur往后移一位  </span></span><br><span class="line">                pcur=pcur-&gt;pnext;  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;=================\n&quot;</span>);  </span><br><span class="line">    PreOrder(root);  </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);  </span><br><span class="line">    InOrder(root);  </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);  </span><br><span class="line">    PreOrder(root);  </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="二叉树的层次遍历"><a href="#二叉树的层次遍历" class="headerlink" title="二叉树的层次遍历"></a>二叉树的层次遍历</h3><p>也称广度优先遍历<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[二叉树的广度优先遍历是一种按层次遍历二叉树的方法，它的顺序是从上到下，从左到右，依次访问每一层的节点][。广度优先遍历的原则就是对每一层的节点依次访问，一层访问结束后，进入下一层，直到最后一个节点，每个节点都只访问一次]</span><br><span class="line">[二叉树的广度优先遍历的实现需要借助队列（Queue）这种数据结构，它的特点是先进先出。首先将根节点入队，然后循环执行以下操作，直到队列为空：从队列中取出一个节点，访问它，然后将它的左右子节点（如果有的话）入队]。</span><br><span class="line"></span><br><span class="line">例如，对于下图的二叉树，广度优先遍历的结果是 &#123;1，2，3，4，5，6，7，8，9，10&#125;，遍历过程如下：</span><br><span class="line"></span><br><span class="line">1.  将根节点1入队，队列为【1】</span><br><span class="line">2.  取出节点1，访问它，将它的左右子节点2和3入队，队列为【2，3】</span><br><span class="line">3.  取出节点2，访问它，将它的左右子节点4和5入队，队列为【3，4，5】</span><br><span class="line">4.  取出节点3，访问它，将它的右子节点6入队，队列为【4，5，6】</span><br><span class="line">5.  取出节点4，访问它，将它的左右子节点8和9入队，队列为【5，6，8，9】</span><br><span class="line">6.  取出节点5，访问它，将它的右子节点10入队，队列为【6，8，9，10】</span><br><span class="line">7.  取出节点6，访问它，没有子节点，队列为【8，9，10】</span><br><span class="line">8.  取出节点8，访问它，没有子节点，队列为【9，10】</span><br><span class="line">9.  取出节点9，访问它，没有子节点，队列为【10】</span><br><span class="line">10.  取出节点10，访问它，没有子节点，队列为空，遍历结束</span><br></pre></td></tr></table></figure></p><p><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304042208835.png" alt="image.png"></p><p>代码采用3给文件</p><p>function.h代码如下<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  </span></span><br><span class="line"><span class="comment">// Created by 123 on 2023/3/11.  </span></span><br><span class="line"><span class="comment">//  </span></span><br><span class="line">  </span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> INC_1_TREE_FUNCTION_H  </span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> INC_1_TREE_FUNCTION_H  </span></span><br><span class="line">  </span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span>  </span></span><br><span class="line">  </span><br><span class="line"><span class="comment">//树相关结构  </span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">char</span> BiElemType;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">BiTNode</span>&#123;</span>  </span><br><span class="line">    BiElemType c;  </span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">BiTNode</span> *<span class="title">lift</span>;</span>  </span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">BiTNode</span> *<span class="title">right</span>;</span>  </span><br><span class="line">&#125;BiTNode,*BiTree;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//层次建树的辅助队列  </span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">tag</span>&#123;</span>  </span><br><span class="line">    BiTree p;<span class="comment">//p获取数的结点  </span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">tag</span> *<span class="title">pnext</span>;</span>  </span><br><span class="line">&#125;tag,*ptag;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//层次遍历的辅助队列相关结构  </span></span><br><span class="line"><span class="keyword">typedef</span> BiTree ElemType;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">LinkNode</span>&#123;</span>  </span><br><span class="line">    ElemType data;  </span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">LinkNode</span>* <span class="title">next</span>;</span>  </span><br><span class="line">&#125;LinkNode,*LinkList;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span>  </span><br><span class="line">    LinkList front,rear;<span class="comment">//链表头，链表尾  </span></span><br><span class="line">&#125;LinkQueue;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//初始化队列  </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">innit</span><span class="params">(LinkQueue &amp;Q)</span>;  </span><br><span class="line"><span class="comment">//入队  </span></span><br><span class="line"><span class="type">bool</span> <span class="title function_">EnQueue</span><span class="params">(LinkQueue &amp;Q,ElemType x)</span>;  </span><br><span class="line"><span class="comment">//出队  </span></span><br><span class="line"><span class="type">bool</span> <span class="title function_">OutQueue</span><span class="params">(LinkQueue &amp;Q,ElemType &amp;x)</span>;  </span><br><span class="line"><span class="comment">//判断是否为空  </span></span><br><span class="line"><span class="type">bool</span> <span class="title function_">IsEmpty</span><span class="params">(LinkQueue Q)</span>;  </span><br><span class="line">  </span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">//INC_1_TREE_FUNCTION_H</span></span></span><br></pre></td></tr></table></figure></p><p>Queue.cpp代码如下<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  </span></span><br><span class="line"><span class="comment">// Created by 123 on 2023/3/11.  </span></span><br><span class="line"><span class="comment">//  </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;function.h&quot;</span>  </span></span><br><span class="line"><span class="comment">//初始化链表的方法  </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">innit</span><span class="params">(LinkQueue &amp;Q)</span>&#123;  </span><br><span class="line">    Q.rear=Q.front=(LinkList) <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LinkNode));  </span><br><span class="line">    Q.rear-&gt;next=<span class="literal">NULL</span>;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//入队列函数,尾部插入法  </span></span><br><span class="line"><span class="type">bool</span> <span class="title function_">EnQueue</span><span class="params">(LinkQueue &amp;Q,ElemType x)</span>&#123;  </span><br><span class="line">    LinkList s;  </span><br><span class="line">    s=(LinkList) <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LinkNode));  </span><br><span class="line">    s-&gt;data=x;  </span><br><span class="line">    Q.rear-&gt;next=s;  </span><br><span class="line">    Q.rear=s;<span class="comment">//注意这一步容易漏掉  </span></span><br><span class="line">    s-&gt;next=<span class="literal">NULL</span>;  </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//出队列函数  </span></span><br><span class="line"><span class="type">bool</span> <span class="title function_">OutQueue</span><span class="params">(LinkQueue &amp;Q,ElemType &amp;x)</span>&#123;  </span><br><span class="line">    <span class="keyword">if</span>(Q.front-&gt;next==<span class="literal">NULL</span>)&#123;<span class="comment">//判断一个元素也没有  </span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">    LinkList s=Q.front-&gt;next;  </span><br><span class="line">    x=s-&gt;data;  </span><br><span class="line">    Q.front-&gt;next=s-&gt;next;  </span><br><span class="line">    <span class="keyword">if</span>(Q.rear==s)&#123;<span class="comment">//判断删除的是最后一个元素  </span></span><br><span class="line">        Q.rear=Q.front;<span class="comment">//队列为空  </span></span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="built_in">free</span>(s);  </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//判断是否为空  </span></span><br><span class="line"><span class="type">bool</span> <span class="title function_">IsEmpty</span><span class="params">(LinkQueue Q)</span>&#123;  </span><br><span class="line">    <span class="keyword">if</span>(Q.rear==Q.front)&#123;  </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>main.cpp代码如下<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;function.h&quot;</span>  </span></span><br><span class="line">  </span><br><span class="line"><span class="comment">//前序遍历，先序遍历，也叫深度优先遍历  </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">PreOrder</span><span class="params">(BiTree p)</span>&#123;  </span><br><span class="line">    <span class="keyword">if</span>(p!=<span class="literal">NULL</span>) &#123;  </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, p-&gt;c);  </span><br><span class="line">        PreOrder(p-&gt;lift);<span class="comment">//打印左子树  </span></span><br><span class="line">        PreOrder(p-&gt;right);<span class="comment">//打印又子树  </span></span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//中序遍历  </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">InOrder</span><span class="params">(BiTree p)</span>&#123;  </span><br><span class="line">    <span class="keyword">if</span>(p!=<span class="literal">NULL</span>) &#123;  </span><br><span class="line">        InOrder(p-&gt;lift);  </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, p-&gt;c);  </span><br><span class="line">        InOrder(p-&gt;right);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//后序遍历  </span></span><br><span class="line"><span class="type">void</span>  <span class="title function_">PostOrder</span><span class="params">(BiTree p)</span>&#123;  </span><br><span class="line">    <span class="keyword">if</span>(p!=<span class="literal">NULL</span>)&#123;  </span><br><span class="line">        PostOrder(p-&gt;lift);  </span><br><span class="line">        PostOrder(p-&gt;right);  </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,p-&gt;c);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//层次遍历（广度优先遍历）  </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">LevelOrder</span><span class="params">(BiTree T)</span>&#123;  </span><br><span class="line">    <span class="comment">//辅助队列  </span></span><br><span class="line">    LinkQueue Q;  </span><br><span class="line">    <span class="comment">//初始化队列  </span></span><br><span class="line">    innit(Q);  </span><br><span class="line">    BiTree p;<span class="comment">//获取出队元素  </span></span><br><span class="line">    <span class="comment">//树根入队  </span></span><br><span class="line">    EnQueue(Q,T);  </span><br><span class="line">    <span class="keyword">while</span>(!IsEmpty(Q))&#123;  </span><br><span class="line">        <span class="comment">//出队列的同时，判断出去的这个元素，左右子树是否存在，存在就入队  </span></span><br><span class="line">        <span class="comment">//循环这个过程，直到队列为空  </span></span><br><span class="line">        OutQueue(Q,p);<span class="comment">//出队函数，能获得出队元素，切将出队元素赋值给p  </span></span><br><span class="line">        <span class="built_in">putchar</span>(p-&gt;c);  </span><br><span class="line">        <span class="keyword">if</span>(p-&gt;lift!=<span class="literal">NULL</span>)&#123;<span class="comment">//入队左子树  </span></span><br><span class="line">            EnQueue(Q,p-&gt;lift);  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">if</span>(p-&gt;right!=<span class="literal">NULL</span>)&#123;<span class="comment">//入队右子树  </span></span><br><span class="line">            EnQueue(Q,p-&gt;right);  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;  </span><br><span class="line"></span><br><span class="line"><span class="comment">//首先层次建树</span></span><br><span class="line">    BiTree pnew;<span class="comment">//用来指向树的新节点  </span></span><br><span class="line">    BiTree root=<span class="literal">NULL</span>;<span class="comment">//用来指向树根  </span></span><br><span class="line">    <span class="comment">//注意，树根不像链表头结点  </span></span><br><span class="line">    <span class="comment">//链表头结点用来指向第一个结点，里面可以不放东西  </span></span><br><span class="line">    <span class="comment">//根就相当于第一个结点，必须有数据  </span></span><br><span class="line">  </span><br><span class="line">    <span class="type">char</span> c;  </span><br><span class="line">    <span class="comment">//队列头、队列尾、指向队列的新节点、指向当前队列结点  </span></span><br><span class="line">    ptag front=<span class="literal">NULL</span>,rear=<span class="literal">NULL</span>,listpnew=<span class="literal">NULL</span>,pcur;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">&quot;%c&quot;</span>,&amp;c))&#123;  </span><br><span class="line">        <span class="keyword">if</span>(c==<span class="string">&#x27;\n&#x27;</span>)&#123;  </span><br><span class="line">            <span class="keyword">break</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="comment">//calloc申请的空间大小是两个参数相乘，并且初始化空间，赋值为Null(左右指针赋值为Null)  </span></span><br><span class="line">        pnew=(BiTree) <span class="built_in">calloc</span>(<span class="number">1</span>,<span class="keyword">sizeof</span> (BiTNode));  </span><br><span class="line">        pnew-&gt;c=c;  </span><br><span class="line">        listpnew= (ptag)<span class="built_in">calloc</span>(<span class="number">1</span>,<span class="keyword">sizeof</span>(tag));  </span><br><span class="line">        listpnew-&gt;p=pnew;  </span><br><span class="line">        <span class="comment">//如果是树的第一个结点  </span></span><br><span class="line">        <span class="keyword">if</span>(root==<span class="literal">NULL</span>)&#123;  </span><br><span class="line">            root=pnew;<span class="comment">//root指向根结点  </span></span><br><span class="line">            rear=front=listpnew;  </span><br><span class="line">            pcur=listpnew;<span class="comment">//pcur要指向要进入树的父亲元素(当前元素)  </span></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;  </span><br><span class="line">            rear-&gt;pnext=listpnew;<span class="comment">//入队列  </span></span><br><span class="line">            rear=listpnew;  </span><br><span class="line">            <span class="keyword">if</span>(pcur-&gt;p-&gt;lift==<span class="literal">NULL</span>)&#123;<span class="comment">//左为空，放入左  </span></span><br><span class="line">                pcur-&gt;p-&gt;lift=pnew;  </span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(pcur-&gt;p-&gt;right==<span class="literal">NULL</span>)&#123;<span class="comment">//右为空，放入右  </span></span><br><span class="line">                pcur-&gt;p-&gt;right=pnew;  </span><br><span class="line">                <span class="comment">//此时结点满了  </span></span><br><span class="line">                <span class="comment">//pcur往后移一位  </span></span><br><span class="line">                pcur=pcur-&gt;pnext;  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;=================\n&quot;</span>);  </span><br><span class="line">    PreOrder(root);   <span class="comment">//前序遍历（深度优先遍历）</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>); </span><br><span class="line">    InOrder(root);    <span class="comment">//中序遍历</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);  </span><br><span class="line">    PreOrder(root);   <span class="comment">//后序遍历</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);  </span><br><span class="line">    LevelOrder(root);  <span class="comment">//广度优先遍历</span></span><br><span class="line">  </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="真题-求带权路径长度"><a href="#真题-求带权路径长度" class="headerlink" title="真题-求带权路径长度"></a>真题-求带权路径长度</h3><p><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304042210307.png" alt="image.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">由于与深度有关，可采用深度优先遍历方式(可以获取深度)，最后返回wpl</span><br></pre></td></tr></table></figure><p>function.h代码如下<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span>  </span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">typedef</span> <span class="type">char</span> ElenType;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//二叉树的链表结点  </span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">TNode</span>&#123;</span>  </span><br><span class="line">    ElenType c;<span class="comment">//数据域  </span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">TNode</span> *<span class="title">lift</span>,*<span class="title">right</span>;</span><span class="comment">//指针域:左指针、右指针  </span></span><br><span class="line">&#125;BiTNode,*BiTree;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//辅助队列的链表结点  </span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">tag</span>&#123;</span>  </span><br><span class="line">    BiTree p;<span class="comment">//p获取数的结点  </span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">tag</span> *<span class="title">pnext</span>;</span>  </span><br><span class="line">&#125;tag,*ptag;</span><br></pre></td></tr></table></figure><br>main.cpp代码如下<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;function.h&quot;</span>  </span></span><br><span class="line">  </span><br><span class="line"><span class="comment">//int wpl=0;  </span></span><br><span class="line"><span class="comment">//全局变量，和静态局部变量都是放在数据段  </span></span><br><span class="line"><span class="comment">//静态局部变量只能局部访问，全局变量全局访问  </span></span><br><span class="line">  </span><br><span class="line"><span class="comment">//前序遍历,参数增加一个深度deep  </span></span><br><span class="line"><span class="type">int</span> <span class="title function_">PreOrder</span><span class="params">(BiTree p,<span class="type">int</span> deep)</span>&#123;  </span><br><span class="line">    <span class="comment">//静态变量，只会初始化一次，递归的时候不会再次执行，直接访问  </span></span><br><span class="line">    <span class="comment">//只能局部访问，所以将其以返回值的形式返回  </span></span><br><span class="line">    <span class="type">static</span> <span class="type">int</span> wpl=<span class="number">0</span>;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">if</span>(p!=<span class="literal">NULL</span>) &#123;  </span><br><span class="line">        <span class="keyword">if</span>(p-&gt;lift==<span class="literal">NULL</span>&amp;&amp;p-&gt;right==<span class="literal">NULL</span>)&#123;  </span><br><span class="line">            wpl+=p-&gt;c*deep;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;ele%c---deep%d\n&quot;</span>, p-&gt;c,deep);  </span><br><span class="line">        PreOrder(p-&gt;lift,deep+<span class="number">1</span>);<span class="comment">//打印左子树  </span></span><br><span class="line">        PreOrder(p-&gt;right,deep+<span class="number">1</span>);<span class="comment">//打印又子树  </span></span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> wpl;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;  </span><br><span class="line">    BiTree pnew;<span class="comment">//用来指向树的新节点  </span></span><br><span class="line">    BiTree root=<span class="literal">NULL</span>;<span class="comment">//这里赋值NULL用于下面的判断  </span></span><br><span class="line">    <span class="comment">//注意，树根不像链表头结点  </span></span><br><span class="line">    <span class="comment">//链表头结点用来指向第一个结点，里面可以不放东西  </span></span><br><span class="line">    <span class="comment">//根就相当于第一个结点，必须有数据  </span></span><br><span class="line">  </span><br><span class="line">    <span class="type">char</span> c;  </span><br><span class="line">    <span class="comment">//队列头、队列尾、指向树的新节点、指向当前队列结点  </span></span><br><span class="line">    ptag front=<span class="literal">NULL</span>,rear=<span class="literal">NULL</span>,listpnew=<span class="literal">NULL</span>,pcur;  </span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">&quot;%c&quot;</span>,&amp;c))&#123;  </span><br><span class="line">        <span class="keyword">if</span>(c==<span class="string">&#x27;\n&#x27;</span>)&#123;  </span><br><span class="line">            <span class="keyword">break</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="comment">//calloc申请的空间大小是两个参数相乘，并且初始化空间，赋值为Null(左右指针赋值为Null)  </span></span><br><span class="line">        pnew=(BiTree) <span class="built_in">calloc</span>(<span class="number">1</span>,<span class="keyword">sizeof</span> (BiTNode));  </span><br><span class="line">        pnew-&gt;c=c;  </span><br><span class="line">        listpnew= (ptag)<span class="built_in">calloc</span>(<span class="number">1</span>,<span class="keyword">sizeof</span>(tag));  </span><br><span class="line">        listpnew-&gt;p=pnew;  </span><br><span class="line">        <span class="comment">//如果是树的第一个结点  </span></span><br><span class="line">        <span class="keyword">if</span>(root==<span class="literal">NULL</span>)&#123;  </span><br><span class="line">            root=pnew;<span class="comment">//root指向根结点  </span></span><br><span class="line">            rear=front=listpnew;  </span><br><span class="line">            pcur=listpnew;<span class="comment">//pcur要指向要进入树的父亲元素(当前元素)  </span></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;  </span><br><span class="line">            rear-&gt;pnext=listpnew;<span class="comment">//入队列  </span></span><br><span class="line">            rear=listpnew;  </span><br><span class="line">            <span class="keyword">if</span>(pcur-&gt;p-&gt;lift==<span class="literal">NULL</span>)&#123;<span class="comment">//左为空，放入左  </span></span><br><span class="line">                pcur-&gt;p-&gt;lift=pnew;  </span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(pcur-&gt;p-&gt;right==<span class="literal">NULL</span>)&#123;<span class="comment">//右为空，放入右  </span></span><br><span class="line">                pcur-&gt;p-&gt;right=pnew;  </span><br><span class="line">                <span class="comment">//此时结点满了  </span></span><br><span class="line">                <span class="comment">//pcur往后移一位  </span></span><br><span class="line">                pcur=pcur-&gt;pnext;  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;=================\n&quot;</span>);  </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;wpl=%d&quot;</span>,PreOrder(root,<span class="number">0</span>));  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="OJ测试-2"><a href="#OJ测试-2" class="headerlink" title="OJ测试"></a>OJ测试</h3><p><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304042211919.png" alt="image.png"></p><p>代码实现<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span>  </span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">typedef</span> <span class="type">char</span> ElemType;  </span><br><span class="line"><span class="comment">//二叉树结构体  </span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">TNode</span>&#123;</span>  </span><br><span class="line">    ElemType data;  </span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">TNode</span> *<span class="title">lift</span>;</span>  </span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">TNode</span> *<span class="title">right</span>;</span>  </span><br><span class="line">&#125;TNode,*BiTree;  </span><br><span class="line"><span class="comment">//辅助队列结构体  </span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">QNode</span>&#123;</span>  </span><br><span class="line">    BiTree p;  </span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">QNode</span> *<span class="title">next</span>;</span>  </span><br><span class="line">&#125;QNode,*Queue;  </span><br><span class="line">  </span><br><span class="line"><span class="type">void</span> <span class="title function_">PreOreder</span><span class="params">(BiTree T)</span>&#123;  </span><br><span class="line">    <span class="keyword">if</span>(T!=<span class="literal">NULL</span>)&#123;  </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,T-&gt;data);  </span><br><span class="line">        PreOreder(T-&gt;lift);  </span><br><span class="line">        PreOreder(T-&gt;right);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;  </span><br><span class="line">  </span><br><span class="line">    ElemType c;  </span><br><span class="line">    BiTree root=<span class="literal">NULL</span>;  </span><br><span class="line">    BiTree pnew;  </span><br><span class="line">  </span><br><span class="line">    Queue front=<span class="literal">NULL</span>,rear=<span class="literal">NULL</span>,listpnew=<span class="literal">NULL</span>,pcur=<span class="literal">NULL</span>;  </span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">&quot;%c&quot;</span>,&amp;c))&#123;  </span><br><span class="line">        <span class="keyword">if</span>(c==<span class="string">&#x27;\n&#x27;</span>)&#123;  </span><br><span class="line">            <span class="keyword">break</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">        pnew=(BiTree) <span class="built_in">calloc</span>(<span class="number">1</span>,<span class="keyword">sizeof</span> (TNode));  </span><br><span class="line">        pnew-&gt;data=c;  </span><br><span class="line">        listpnew=(Queue) <span class="built_in">calloc</span>(<span class="number">1</span>, <span class="keyword">sizeof</span>(QNode));  </span><br><span class="line">        listpnew-&gt;p=pnew;  </span><br><span class="line">        <span class="keyword">if</span>(root==<span class="literal">NULL</span>)&#123;  </span><br><span class="line">            root=pnew;  </span><br><span class="line">            front=rear=pcur=listpnew;  </span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;  </span><br><span class="line">            rear-&gt;next=listpnew;  </span><br><span class="line">            rear=listpnew;  </span><br><span class="line">            <span class="keyword">if</span>(pcur-&gt;p-&gt;lift==<span class="literal">NULL</span>)&#123;  </span><br><span class="line">                pcur-&gt;p-&gt;lift=pnew;  </span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(pcur-&gt;p-&gt;right==<span class="literal">NULL</span>)&#123;  </span><br><span class="line">                pcur-&gt;p-&gt;right=pnew;  </span><br><span class="line">                pcur=pcur-&gt;next;  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">    &#125;  </span><br><span class="line">    PreOreder(root);  </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="查找算法"><a href="#查找算法" class="headerlink" title="查找算法"></a>查找算法</h2><h3 id="顺序表查找原理及实战"><a href="#顺序表查找原理及实战" class="headerlink" title="顺序表查找原理及实战"></a>顺序表查找原理及实战</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;time.h&gt;</span>  </span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> ELemType;  </span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span>  </span><br><span class="line">    ELemType* elem;<span class="comment">//整数型指针，申请的对空间起始地址存入elem  </span></span><br><span class="line">    <span class="type">int</span> TableLen;<span class="comment">//存储动态数组里边元素的个数  </span></span><br><span class="line">&#125;SSTable;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//初始化顺序表  </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">st_init</span><span class="params">(SSTable &amp;ST,<span class="type">int</span> len)</span>&#123;  </span><br><span class="line">    <span class="comment">//多申请一个位置，是为了存哨兵的，不用哨兵也可以的  </span></span><br><span class="line">    ST.TableLen=len+<span class="number">1</span>;  </span><br><span class="line">    ST.elem= (ELemType*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span> (ELemType)*ST.TableLen);  </span><br><span class="line">    <span class="type">int</span> i;  </span><br><span class="line">    srand(time(<span class="literal">NULL</span>));<span class="comment">//随机数生成  </span></span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;ST.TableLen;i++)&#123;<span class="comment">//因为第0个放的位置是哨兵，所以从1开始随机  </span></span><br><span class="line">        ST.elem[i]=rand() % <span class="number">100</span>;<span class="comment">//生成1-99之间的随机数  </span></span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="type">void</span> <span class="title function_">st_print</span><span class="params">(SSTable ST)</span>&#123;  </span><br><span class="line">    <span class="type">int</span> i;  </span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;ST.TableLen;i++)&#123;  </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%3d&quot;</span>,ST.elem[i]);  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="type">int</span> <span class="title function_">Search_Seq</span><span class="params">(SSTable ST,ELemType e)</span>&#123;  </span><br><span class="line">    <span class="type">int</span> i;  </span><br><span class="line">    <span class="keyword">for</span>(i=ST.TableLen<span class="number">-1</span>;ST.elem[i]!=e;--i)&#123;  </span><br><span class="line">  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> i;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;  </span><br><span class="line">    SSTable ST;  </span><br><span class="line">    st_init(ST,<span class="number">9</span>);  </span><br><span class="line">    st_print(ST);  </span><br><span class="line">    ELemType key;  </span><br><span class="line">    <span class="type">int</span> pos;  </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;please input search by\n&quot;</span>);  </span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;key);  </span><br><span class="line">    pos=Search_Seq(ST,key);  </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;the postion is %d&quot;</span>,pos);  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二分查找原理及实战"><a href="#二分查找原理及实战" class="headerlink" title="二分查找原理及实战"></a>二分查找原理及实战</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;time.h&gt;</span>  </span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> ELemType;  </span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span>  </span><br><span class="line">    ELemType* elem;  </span><br><span class="line">    <span class="type">int</span> Tablelen;  </span><br><span class="line">&#125;SSTable;  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//初始化的方法  </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">st_init</span><span class="params">(SSTable &amp;ST,<span class="type">int</span> len)</span>&#123;  </span><br><span class="line">    ST.Tablelen=len;  </span><br><span class="line">    ST.elem=(ELemType*) <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(ELemType)*ST.Tablelen);  </span><br><span class="line">    <span class="type">int</span> i;  </span><br><span class="line">    srand(time(<span class="literal">NULL</span>));  </span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;ST.Tablelen;i++)&#123;  </span><br><span class="line">        ST.elem[i]=rand() % <span class="number">100</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//打印的方法  </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">st_print</span><span class="params">(SSTable ST)</span>&#123;  </span><br><span class="line">    <span class="type">int</span> i;  </span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;ST.Tablelen;i++)&#123;  </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%3d&quot;</span>,ST.elem[i]);  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//二分查找方法  </span></span><br><span class="line"><span class="type">int</span> <span class="title function_">binary_search</span><span class="params">(SSTable ST,<span class="type">int</span> key)</span>&#123;  </span><br><span class="line">    <span class="type">int</span> begin=<span class="number">0</span>;  </span><br><span class="line">    <span class="type">int</span> mid;  </span><br><span class="line">    <span class="type">int</span> end=ST.Tablelen<span class="number">-1</span>;  </span><br><span class="line">    <span class="keyword">while</span>(begin&lt;=end)&#123;  </span><br><span class="line">        mid=(begin+end)/<span class="number">2</span>;  </span><br><span class="line">        <span class="comment">//注意：是else if 不能写成if，并且三个判断只能执行一个  </span></span><br><span class="line">        <span class="keyword">if</span>(key&lt;ST.elem[mid])&#123;  </span><br><span class="line">            end=mid<span class="number">-1</span>;  </span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(key&gt;ST.elem[mid])&#123;  </span><br><span class="line">            begin=mid+<span class="number">1</span>;  </span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;  </span><br><span class="line">            <span class="keyword">return</span> mid;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//函数名中存储的是函数入口地址，也是一个指针，是函数指针类型  </span></span><br><span class="line"><span class="comment">//qsort规定如果left指针指向的值，大于right指针指向的值,返回正值  </span></span><br><span class="line"><span class="type">int</span> <span class="title function_">compare</span><span class="params">(<span class="type">const</span> <span class="type">void</span> *left,<span class="type">const</span> <span class="type">void</span> *right)</span>&#123;<span class="comment">//固定形式，照着写就行  </span></span><br><span class="line">    <span class="comment">//要先强转成int类型指针然后取值 比较  </span></span><br><span class="line">    <span class="keyword">return</span> *(<span class="type">int</span>*)left-*(<span class="type">int</span>*)right;<span class="comment">//从小到大排序  </span></span><br><span class="line">    <span class="comment">//return *(int*)right-*(int*)left;//从小到大排序  </span></span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;  </span><br><span class="line">    SSTable ST;  </span><br><span class="line">    <span class="type">int</span> key;  </span><br><span class="line">    st_init(ST,<span class="number">10</span>);<span class="comment">//初始化  </span></span><br><span class="line">    st_print(ST);<span class="comment">//打印  </span></span><br><span class="line">    qsort(ST.elem,ST.Tablelen,<span class="keyword">sizeof</span> (ELemType),compare);<span class="comment">//升序排序  </span></span><br><span class="line">    st_print(ST);<span class="comment">//打印  </span></span><br><span class="line">    <span class="type">int</span> pos;  </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;please input the number that you want to search\n&quot;</span>);  </span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;key);  </span><br><span class="line">    pos=binary_search(ST,key);  </span><br><span class="line">    <span class="keyword">if</span>(pos==<span class="number">-1</span>)&#123;  </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;false,the number is not exit&quot;</span>);  </span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;  </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;the pos is %3d&quot;</span>,pos);  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二叉排序树原理及建树"><a href="#二叉排序树原理及建树" class="headerlink" title="二叉排序树原理及建树"></a>二叉排序树原理及建树</h3><p><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304041946000.png" alt="image.png"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span>  </span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> ElemType;  </span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">BSNode</span>&#123;</span>  </span><br><span class="line">    ElemType key;  </span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">BSNode</span> *<span class="title">lift</span>;</span>  </span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">BSNode</span> *<span class="title">right</span>;</span>  </span><br><span class="line">&#125;BSNode,*BiTree;  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//二叉树元素插入  </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">BST_insert</span><span class="params">(BiTree &amp;T,ElemType k)</span>&#123;  </span><br><span class="line">    <span class="keyword">if</span>(T==<span class="literal">NULL</span>)&#123;  </span><br><span class="line">        T= (BiTree)<span class="built_in">calloc</span>(<span class="number">1</span>,<span class="keyword">sizeof</span> (BSNode));  </span><br><span class="line">        T-&gt;key=k;  </span><br><span class="line">    &#125;  </span><br><span class="line">    BiTree p=T;<span class="comment">//p是用来遍历的  </span></span><br><span class="line">    BiTree parent;  </span><br><span class="line">    <span class="keyword">while</span>(p)&#123;  </span><br><span class="line">        parent=p;<span class="comment">//指向p的父节点，以便追加加点  </span></span><br><span class="line">        <span class="keyword">if</span>(k==p-&gt;key)&#123;  </span><br><span class="line">            <span class="keyword">return</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(k&lt;p-&gt;key)&#123;  </span><br><span class="line">            p=p-&gt;lift;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">else</span>&#123;  </span><br><span class="line">            p=p-&gt;right;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="comment">//开始申请新节点的空间  </span></span><br><span class="line">    BiTree pnew;  </span><br><span class="line">    pnew=(BiTree) <span class="built_in">calloc</span>(<span class="number">1</span>,<span class="keyword">sizeof</span> (BSNode));  </span><br><span class="line">    pnew-&gt;key=k;  </span><br><span class="line">    <span class="comment">//判断是加在parent结点的左子节点还是右子节点  </span></span><br><span class="line">    <span class="keyword">if</span>(k&lt;parent-&gt;key)&#123;  </span><br><span class="line">        parent-&gt;lift=pnew;  </span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;  </span><br><span class="line">        parent-&gt;right=pnew;  </span><br><span class="line">    &#125;<span class="comment">//不用判断等于的情况，因为上面遍历树的时候当结点值相等时，该方法就结束了  </span></span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//创建二叉树  </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">creat_bstree</span><span class="params">(BiTree &amp;T,ElemType str[],<span class="type">int</span> n)</span>&#123;  </span><br><span class="line">    T=<span class="literal">NULL</span>;  </span><br><span class="line">    <span class="type">int</span> i;  </span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)&#123;  </span><br><span class="line">        BST_insert(T,str[i]);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//中序遍历  </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">InOrder</span><span class="params">(BiTree T)</span>&#123;  </span><br><span class="line">    <span class="keyword">if</span>(T!=<span class="literal">NULL</span>) &#123;  </span><br><span class="line">        InOrder(T-&gt;lift);  </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%3d&quot;</span>, T-&gt;key);  </span><br><span class="line">        InOrder(T-&gt;right);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;  </span><br><span class="line">    BiTree T;  </span><br><span class="line">    ElemType str[<span class="number">9</span>]=&#123;<span class="number">12</span>,<span class="number">34</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">9</span>,<span class="number">0</span>,<span class="number">12</span>&#125;;  </span><br><span class="line">    creat_bstree(T,str,<span class="number">9</span>);  </span><br><span class="line">    InOrder(T);  </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二叉查找树的删除实战"><a href="#二叉查找树的删除实战" class="headerlink" title="二叉查找树的删除实战"></a>二叉查找树的删除实战</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span>  <span class="comment">//</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span>  </span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> ElemType;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">BSNode</span>&#123;</span>  </span><br><span class="line">    ElemType key;  </span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">BSNode</span> *<span class="title">left</span>,*<span class="title">righr</span>;</span>  </span><br><span class="line">&#125;BSNode,*BiTree;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//插入元素的方法  </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">BST_insert</span><span class="params">(BiTree &amp;T,ElemType k)</span>&#123;  </span><br><span class="line">    <span class="keyword">if</span>(T==<span class="literal">NULL</span>)&#123;  </span><br><span class="line">        T=(BiTree) <span class="built_in">calloc</span>(<span class="number">1</span>,<span class="keyword">sizeof</span> (BSNode));  </span><br><span class="line">        T-&gt;key=k;  </span><br><span class="line">    &#125;  </span><br><span class="line">    BiTree p=T;  </span><br><span class="line">    BiTree parent;  </span><br><span class="line">    <span class="keyword">while</span>(p)&#123;  </span><br><span class="line">        parent=p;  </span><br><span class="line">        <span class="keyword">if</span>(k==p-&gt;key)&#123;  </span><br><span class="line">            <span class="keyword">return</span>;  </span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(k&lt;p-&gt;key)&#123;  </span><br><span class="line">            p=p-&gt;left;  </span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;  </span><br><span class="line">            p=p-&gt;righr;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="comment">//申请要加入元素的新节点空间  </span></span><br><span class="line">    BiTree pnew;  </span><br><span class="line">    pnew=(BiTree) <span class="built_in">calloc</span>(<span class="number">1</span>,<span class="keyword">sizeof</span> (BSNode));  </span><br><span class="line">    pnew-&gt;key=k;  </span><br><span class="line">    <span class="keyword">if</span>(k&lt;parent-&gt;key)&#123;  </span><br><span class="line">        parent-&gt;left=pnew;  </span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;  </span><br><span class="line">        parent-&gt;righr=pnew;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//创建二叉查找树的方法  </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">creat_BSTree</span><span class="params">(BiTree &amp;T,ElemType str[],<span class="type">int</span> n)</span>&#123;  </span><br><span class="line">    T=<span class="literal">NULL</span>;  </span><br><span class="line">    <span class="type">int</span> i;  </span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)&#123;  </span><br><span class="line">        BST_insert(T,str[i]);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//中序遍历打印二叉树  </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">InOrder</span><span class="params">(BiTree T)</span>&#123;  </span><br><span class="line">    <span class="keyword">if</span>(T!=<span class="literal">NULL</span>)&#123;  </span><br><span class="line">        InOrder(T-&gt;left);  </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%3d&quot;</span>,T-&gt;key);  </span><br><span class="line">        InOrder(T-&gt;righr);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//二叉树的查找方法  </span></span><br><span class="line">BiTree <span class="title function_">BS_Search</span><span class="params">(BiTree T,ElemType key)</span>&#123;  </span><br><span class="line">    <span class="keyword">while</span>(T!=<span class="literal">NULL</span>&amp;&amp;key!=T-&gt;key)&#123;  </span><br><span class="line">        <span class="keyword">if</span>(key&lt;T-&gt;key)&#123;  </span><br><span class="line">            T=T-&gt;left;  </span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;  </span><br><span class="line">            T=T-&gt;righr;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> T;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//删除二叉排序树元素的方法  </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">delete_BSNode</span><span class="params">(BiTree &amp;root,ElemType x)</span>&#123;  </span><br><span class="line">    <span class="keyword">if</span>(root==<span class="literal">NULL</span>)&#123;  </span><br><span class="line">        <span class="keyword">return</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">if</span>(x&lt;root-&gt;key)&#123;  </span><br><span class="line">        delete_BSNode(root-&gt;left,x);  </span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(x&gt;root-&gt;key)&#123;  </span><br><span class="line">        delete_BSNode(root-&gt;righr,x);  </span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;<span class="comment">//查找到了要删的结点  </span></span><br><span class="line">        <span class="comment">//如果左子树为空，右结点顶上去  </span></span><br><span class="line">        <span class="keyword">if</span>(root-&gt;left==<span class="literal">NULL</span>)&#123;  </span><br><span class="line">            BiTree tempNode=root;  </span><br><span class="line">            root=root-&gt;righr;  </span><br><span class="line">            <span class="built_in">free</span>(tempNode);  </span><br><span class="line">            <span class="comment">//如果右子树为空，左节点顶上去  </span></span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(root-&gt;righr==<span class="literal">NULL</span>)&#123;  </span><br><span class="line">            BiTree tempNode=root;  </span><br><span class="line">            root=root-&gt;left;  </span><br><span class="line">            <span class="built_in">free</span>(tempNode);  </span><br><span class="line">            <span class="comment">//如果左右子树都不为空  </span></span><br><span class="line">            <span class="comment">//1-左子树最大顶上去；2-右子树最下顶上去  </span></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;  </span><br><span class="line">            BiTree p=root-&gt;left;<span class="comment">//遍历左子树，寻找左子树最大  </span></span><br><span class="line">            <span class="keyword">while</span>(p-&gt;righr!=<span class="literal">NULL</span>)&#123;  </span><br><span class="line">                p=p-&gt;righr;  </span><br><span class="line">            &#125;  </span><br><span class="line">            root-&gt;key=p-&gt;key;<span class="comment">//将p的值赋给root  </span></span><br><span class="line">            <span class="comment">//然后删除p  </span></span><br><span class="line">            delete_BSNode(root-&gt;left,p-&gt;key);  </span><br><span class="line">                <span class="comment">//这里得从左子树找，因为root的key也是和p一样  </span></span><br><span class="line">                <span class="comment">//这样可以略过根结点  </span></span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;  </span><br><span class="line">  </span><br><span class="line">    BiTree T;  </span><br><span class="line">    ElemType str[<span class="number">8</span>]=&#123;<span class="number">13</span>,<span class="number">4</span>,<span class="number">56</span>,<span class="number">7</span>,<span class="number">23</span>,<span class="number">7</span>,<span class="number">95</span>,<span class="number">48</span>&#125;;  </span><br><span class="line">    ElemType key;  </span><br><span class="line">  </span><br><span class="line">    creat_BSTree(T,str,<span class="number">8</span>);  </span><br><span class="line">    InOrder(T);  </span><br><span class="line">    ElemType x;  </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\ndelet 23\n&quot;</span>);  </span><br><span class="line">  </span><br><span class="line">    delete_BSNode(T,<span class="number">23</span>);  </span><br><span class="line">    InOrder(T);  </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="OJ测试-3"><a href="#OJ测试-3" class="headerlink" title="OJ测试"></a>OJ测试</h3><p><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304041948855.png" alt="image.png"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span>  </span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> ElemType;  </span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">BSNode</span>&#123;</span>  </span><br><span class="line">    ElemType key;  </span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">BSNode</span> *<span class="title">lift</span>,*<span class="title">right</span>;</span>  </span><br><span class="line">&#125;BSNode,*Bitree;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//插入元素的方法  </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">BST_insert</span><span class="params">(Bitree &amp;T,ElemType k)</span>&#123;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">if</span>(T==<span class="literal">NULL</span>)&#123;  </span><br><span class="line">        T=(Bitree) <span class="built_in">calloc</span>(<span class="number">1</span>,<span class="keyword">sizeof</span> (BSNode));  </span><br><span class="line">        T-&gt;key=k;  </span><br><span class="line">    &#125;  </span><br><span class="line">    Bitree p;<span class="comment">//p用来遍历树  </span></span><br><span class="line">    p=T;  </span><br><span class="line">    Bitree parent;  </span><br><span class="line">    <span class="keyword">while</span>(p)&#123;  </span><br><span class="line">        parent=p;<span class="comment">//用来指向p的父节点  </span></span><br><span class="line">        <span class="keyword">if</span>(k==p-&gt;key)&#123;  </span><br><span class="line">            <span class="keyword">return</span>;  </span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(k&lt;p-&gt;key)&#123;  </span><br><span class="line">            p=p-&gt;lift;  </span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;  </span><br><span class="line">            p=p-&gt;right;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    Bitree pnew;  </span><br><span class="line">    pnew=(Bitree) <span class="built_in">calloc</span>(<span class="number">1</span>,<span class="keyword">sizeof</span>(BSNode));  </span><br><span class="line">    pnew-&gt;key=k;  </span><br><span class="line">    <span class="keyword">if</span>(k&lt;parent-&gt;key)&#123;  </span><br><span class="line">        parent-&gt;lift=pnew;  </span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;  </span><br><span class="line">        parent-&gt;right=pnew;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="comment">//创建二叉排序树的方法  </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">creat_bstree</span><span class="params">(Bitree &amp;T,ElemType *str,<span class="type">int</span> n)</span>&#123;  </span><br><span class="line">   T=<span class="literal">NULL</span>;  </span><br><span class="line">   <span class="type">int</span> i;  </span><br><span class="line">   <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)&#123;  </span><br><span class="line">       BST_insert(T,str[i]);  </span><br><span class="line">   &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//中序遍历二叉树  </span></span><br><span class="line">ElemType* <span class="title function_">InOrder</span><span class="params">(Bitree T)</span>&#123;<span class="comment">//无法直接返回数组形式，但是可以返回一个数组形式的指针  </span></span><br><span class="line">    <span class="type">static</span> ElemType str2[<span class="number">10</span>];  </span><br><span class="line">    <span class="type">static</span> <span class="type">int</span> i=<span class="number">0</span>;  </span><br><span class="line">    <span class="keyword">if</span>(T!=<span class="literal">NULL</span>) &#123;  </span><br><span class="line">        InOrder(T-&gt;lift);  </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%3d&quot;</span>, T-&gt;key);  </span><br><span class="line">        str2[i]=T-&gt;key;  </span><br><span class="line">        i++;  </span><br><span class="line">        InOrder(T-&gt;right);  </span><br><span class="line">    &#125;  </span><br><span class="line"><span class="keyword">return</span> str2;<span class="comment">//返回一个指针  </span></span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//二分查找的方法 ，返回元素下标 </span></span><br><span class="line"><span class="type">int</span> <span class="title function_">binary_search</span><span class="params">(ElemType str[],<span class="type">int</span> x)</span>&#123;  </span><br><span class="line">    <span class="type">int</span> begin=<span class="number">0</span>,mid,end=<span class="number">10</span>;  </span><br><span class="line">    <span class="keyword">while</span>(begin&lt;=end)&#123;  </span><br><span class="line">        mid=(begin+end)/<span class="number">2</span>;  </span><br><span class="line">        <span class="keyword">if</span>(x==str[mid])&#123;  </span><br><span class="line">            <span class="keyword">return</span> mid;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(x&gt;str[mid])&#123;  </span><br><span class="line">            begin=mid;  </span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;  </span><br><span class="line">            end=mid;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;  </span><br><span class="line">  </span><br><span class="line">    Bitree root;<span class="comment">//定义一个舒更  </span></span><br><span class="line">    ElemType str[<span class="number">10</span>];  </span><br><span class="line">    <span class="type">int</span> k;<span class="comment">//存放输入的数据  </span></span><br><span class="line">    <span class="type">int</span> i;  </span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;  </span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;k);  </span><br><span class="line">        str[i]=k;  </span><br><span class="line">    &#125;  </span><br><span class="line">    creat_bstree(root,str,<span class="number">10</span>);<span class="comment">//  </span></span><br><span class="line">    ElemType *pInt = InOrder(root);<span class="comment">//打印，并接收返回的排序后的数组指针  </span></span><br><span class="line">  </span><br><span class="line">    <span class="type">int</span> pos;  </span><br><span class="line">    pos=binary_search(pInt,<span class="number">6</span>);  </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n%d&quot;</span>,pos);  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果<br><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304041948552.png" alt="image.png"></p><h2 id="排序算法"><a href="#排序算法" class="headerlink" title="排序算法"></a>排序算法</h2><h3 id="排序算法分类"><a href="#排序算法分类" class="headerlink" title="排序算法分类"></a>排序算法分类</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">排序算法分为 交换类排序、插入类排序、选择类排序、归并类排序</span><br><span class="line"></span><br><span class="line">交换类排序</span><br><span class="line"></span><br><span class="line">冒泡排序</span><br><span class="line">初冒泡排序,一般靠选择题，考大题几率小</span><br><span class="line">快速排序</span><br><span class="line">更重要，考大题</span><br><span class="line"></span><br><span class="line">插入类排序</span><br><span class="line"></span><br><span class="line">直接插入</span><br><span class="line"></span><br><span class="line">折半插入</span><br><span class="line"></span><br><span class="line">希尔排序，以上三种插入算法，一般考选择题，考大题概率低</span><br><span class="line">选择排序</span><br><span class="line"></span><br><span class="line">简单选择排序</span><br><span class="line"></span><br><span class="line">堆排序(重要)</span><br><span class="line">很有可能考大题</span><br></pre></td></tr></table></figure><h3 id="冒泡排序原理及实战"><a href="#冒泡排序原理及实战" class="headerlink" title="冒泡排序原理及实战"></a>冒泡排序原理及实战</h3><p><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304041927093.png" alt="image.png"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;time.h&gt;</span>  </span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> ElemType;  </span><br><span class="line"><span class="comment">//定义顺序表结构体  </span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span>  </span><br><span class="line">    ElemType *str;  </span><br><span class="line">    <span class="type">int</span> len;  </span><br><span class="line">&#125;SSTable;  </span><br><span class="line"><span class="comment">//顺序表初始化，添加随机数  </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">init_table</span><span class="params">(SSTable &amp;SST,<span class="type">int</span> len)</span>&#123;  </span><br><span class="line">    srand(time(<span class="literal">NULL</span>));  </span><br><span class="line">    SST.len=len;  </span><br><span class="line">    SST.str=(ElemType*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span> (ElemType)*SST.len);  </span><br><span class="line">    <span class="type">int</span> i;  </span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;SST.len;i++)&#123;  </span><br><span class="line">        SST.str[i]=rand()%<span class="number">100</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="comment">//打印顺序表  </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">print_table</span><span class="params">(SSTable SST)</span>&#123;  </span><br><span class="line">    <span class="type">int</span> i;  </span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;SST.len;i++)&#123;  </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%3d&quot;</span>,SST.str[i]);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="comment">//交换两个元素的方法  </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">swap</span><span class="params">(ElemType &amp;a,ElemType &amp;b)</span>&#123;  </span><br><span class="line">    ElemType temp;  </span><br><span class="line">    temp=a;  </span><br><span class="line">    a=b;  </span><br><span class="line">    b=temp;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="comment">//冒泡排序算法  </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">bubble_sort</span><span class="params">(ElemType arr[],<span class="type">int</span> n)</span>&#123;  </span><br><span class="line">    <span class="type">int</span> i,j;  </span><br><span class="line">    <span class="type">bool</span> flag;  <span class="comment">//用来标记是否发生了交换</span></span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n<span class="number">-1</span>;i++)&#123;<span class="comment">//外层循环需要比较n-1次  </span></span><br><span class="line">        flag=<span class="literal">false</span>;  </span><br><span class="line">        <span class="keyword">for</span>(j=n<span class="number">-1</span>;j&gt;i;j--)&#123;<span class="comment">//内层循环  </span></span><br><span class="line">            <span class="keyword">if</span>(arr[j]&lt;arr[j<span class="number">-1</span>])&#123;  </span><br><span class="line">                swap(arr[j],arr[j<span class="number">-1</span>]);  </span><br><span class="line">                flag=<span class="literal">true</span>;<span class="comment">//有交换就返回true  </span></span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">if</span>(flag==<span class="literal">false</span>)&#123;<span class="comment">//如果这一趟没有比较，直接结束无须比较  </span></span><br><span class="line">            <span class="keyword">return</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;  </span><br><span class="line">    SSTable T;  </span><br><span class="line">    <span class="type">int</span> len=<span class="number">9</span>;  </span><br><span class="line">    init_table(T,len);  </span><br><span class="line">    print_table(T);  </span><br><span class="line">  </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);  </span><br><span class="line">    bubble_sort(T.str,T.len);  </span><br><span class="line">    print_table(T);  </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304041926485.png" alt="image.png"></p><h3 id="快速排序原理及实战"><a href="#快速排序原理及实战" class="headerlink" title="快速排序原理及实战"></a>快速排序原理及实战</h3><p><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304041930109.png" alt="Snipaste_2023-03-18_15-37-22.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">一个顺序表</span><br><span class="line">以第一个数为基准</span><br><span class="line">定义两个指针i j</span><br><span class="line">i从左往右找比3大的数，i停止</span><br><span class="line">j从右往左找比3小的数，j停止</span><br><span class="line">然后i j 对应的数完成一次交换，i j 继续前进</span><br><span class="line">循环..直到ij相遇</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>代码实战<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;time.h&gt;</span>  </span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> ElemType;  </span><br><span class="line"><span class="comment">//定义顺序表结构体  </span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span>  </span><br><span class="line">    ElemType *str;  </span><br><span class="line">    <span class="type">int</span> len;  </span><br><span class="line">&#125;SSTable;  </span><br><span class="line"><span class="comment">//顺序表添加随机数  </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">init_table</span><span class="params">(SSTable &amp;SST,<span class="type">int</span> len)</span>&#123;  </span><br><span class="line">    srand(time(<span class="literal">NULL</span>));  </span><br><span class="line">    SST.len=len;  </span><br><span class="line">    SST.str=(ElemType*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span> (ElemType)*SST.len);  </span><br><span class="line">    <span class="type">int</span> i;  </span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;SST.len;i++)&#123;  </span><br><span class="line">        SST.str[i]=rand()%<span class="number">100</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="comment">//打印顺序表  </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">print_table</span><span class="params">(SSTable SST)</span>&#123;  </span><br><span class="line">    <span class="type">int</span> i;  </span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;SST.len;i++)&#123;  </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%3d&quot;</span>,SST.str[i]);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//分割方法  </span></span><br><span class="line"><span class="type">int</span> <span class="title function_">partition</span><span class="params">(ElemType *str,<span class="type">int</span> low,<span class="type">int</span> high)</span>&#123;  </span><br><span class="line">    <span class="type">int</span> temp;<span class="comment">//用于存放分割界限数(选取数组第一个数）  </span></span><br><span class="line">    temp=str[low];<span class="comment">//相当于将low位置外一个坑，先让high往前放入元素  </span></span><br><span class="line">    <span class="keyword">while</span>(low&lt;high)&#123;  </span><br><span class="line">        <span class="comment">//右指针用来找比分割数小的数  </span></span><br><span class="line">        <span class="comment">//停了说明找到了  </span></span><br><span class="line">        <span class="keyword">while</span>(low&lt;high&amp;&amp;str[high]&gt;=temp)&#123;  </span><br><span class="line">            high--;<span class="comment">//移动  </span></span><br><span class="line">        &#125;  </span><br><span class="line">        str[low]=str[high];<span class="comment">//将找到的值给str[low],因为这时的str[low]赋给了temp  </span></span><br><span class="line">        <span class="comment">//左指针，用来找比分割数大的数  </span></span><br><span class="line">        <span class="keyword">while</span>(low&lt;high&amp;&amp;str[low]&lt;=temp)&#123;  </span><br><span class="line">            low++;  </span><br><span class="line">        &#125;  </span><br><span class="line">        str[high]=str[low];  </span><br><span class="line">    &#125;  </span><br><span class="line">    str[low]=temp;<span class="comment">//结束时，low位置是空的  </span></span><br><span class="line">    <span class="keyword">return</span> low;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//快速排序方法  </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">quick_sort</span><span class="params">(ElemType *str,<span class="type">int</span> low,<span class="type">int</span> high)</span>&#123;  </span><br><span class="line">    <span class="keyword">if</span>(low&lt;high) &#123;<span class="comment">//low high用来限定分割的范围  </span></span><br><span class="line">        <span class="type">int</span> postion = partition(str, low, high);<span class="comment">//partition方法是核心方法，是每一次分割的方法  </span></span><br><span class="line">        quick_sort(str, low, postion - <span class="number">1</span>);<span class="comment">//递归左边的数组  </span></span><br><span class="line">        quick_sort(str, postion + <span class="number">1</span>, high);<span class="comment">//递归数组右边  </span></span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;  </span><br><span class="line">    SSTable T;  </span><br><span class="line">    <span class="type">int</span> len=<span class="number">9</span>;  </span><br><span class="line">    init_table(T,len);  </span><br><span class="line">    print_table(T);  </span><br><span class="line">  </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);  </span><br><span class="line">    quick_sort(T.str,<span class="number">0</span>,T.len<span class="number">-1</span>);  </span><br><span class="line">    print_table(T);  </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304041930643.png" alt="image.png"></p><h3 id="OJ测试-4"><a href="#OJ测试-4" class="headerlink" title="OJ测试"></a>OJ测试</h3><p><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304041934190.png" alt="image.png"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;time.h&gt;</span>  </span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> ElemType;  </span><br><span class="line"><span class="comment">//定义顺序表结构体  </span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span>  </span><br><span class="line">    ElemType *str;  </span><br><span class="line">    <span class="type">int</span> len;  </span><br><span class="line">&#125;SSTable;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//初始化顺序表，手动输入十个数  </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">init_table</span><span class="params">(SSTable &amp;T)</span>&#123;  </span><br><span class="line">    <span class="type">int</span> i;  </span><br><span class="line">    <span class="type">int</span> x;  </span><br><span class="line">    T.str=(ElemType*) <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(ElemType)*T.len);  </span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;T.len;i++)&#123;  </span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x);  </span><br><span class="line">        T.str[i]=x;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//打印顺序表  </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">print_table</span><span class="params">(SSTable SST)</span>&#123;  </span><br><span class="line">    <span class="type">int</span> i;  </span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;SST.len;i++)&#123;  </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%3d&quot;</span>,SST.str[i]);  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="comment">//================================================================================  </span></span><br><span class="line"><span class="comment">//交换的方法  </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span> &amp;a,<span class="type">int</span> &amp;b)</span>&#123;  </span><br><span class="line">    <span class="type">int</span> temp;  </span><br><span class="line">    temp=a;  </span><br><span class="line">    a=b;  </span><br><span class="line">    b=temp;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//冒泡排序算法  </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">bubble_sort</span><span class="params">(SSTable &amp;T)</span>&#123;  </span><br><span class="line">    <span class="type">int</span> i,j;  </span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;T.len<span class="number">-1</span>;i++)&#123;  </span><br><span class="line">        <span class="keyword">for</span>(j=T.len<span class="number">-1</span>;j&gt;i;j--)&#123;  </span><br><span class="line">            <span class="keyword">if</span>(T.str[j]&gt;T.str[j<span class="number">-1</span>])&#123;  </span><br><span class="line">                swap(T.str[j],T.str[j<span class="number">-1</span>]);  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="comment">//==============================================================================</span></span><br><span class="line"><span class="comment">//分割方法  </span></span><br><span class="line"><span class="type">int</span> <span class="title function_">split</span><span class="params">(SSTable &amp;T,<span class="type">int</span> low,<span class="type">int</span> high)</span>&#123;  </span><br><span class="line">    <span class="type">int</span> temp;  </span><br><span class="line">    temp=T.str[low];  </span><br><span class="line">    <span class="keyword">while</span>(low&lt;high)&#123;  </span><br><span class="line">        <span class="keyword">while</span>(low&lt;high&amp;&amp;T.str[high]&gt;=temp)&#123;  </span><br><span class="line">            high--;  </span><br><span class="line">        &#125;  </span><br><span class="line">        T.str[low]=T.str[high];  </span><br><span class="line">        <span class="keyword">while</span>(low&lt;high&amp;&amp;T.str[low]&lt;=temp)&#123;  </span><br><span class="line">            low++;  </span><br><span class="line">        &#125;  </span><br><span class="line">        T.str[high]=T.str[low];  </span><br><span class="line">    &#125;  </span><br><span class="line">    T.str[low]=temp;  </span><br><span class="line">    <span class="keyword">return</span> low;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//快速排序法  </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">quick_sort</span><span class="params">(SSTable &amp;T,<span class="type">int</span> low,<span class="type">int</span> high)</span>&#123;  </span><br><span class="line">    <span class="keyword">if</span>(low&lt;high)&#123;  </span><br><span class="line">       <span class="type">int</span> pos;  </span><br><span class="line">       pos= split(T,low,high);  </span><br><span class="line">        quick_sort(T,low,pos<span class="number">-1</span>);  </span><br><span class="line">        quick_sort(T,pos+<span class="number">1</span>,high);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//================================================================================ </span></span><br><span class="line"><span class="comment">//插入排序方法  </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">insert_sort</span><span class="params">(SSTable &amp;T)</span>&#123;  </span><br><span class="line">    <span class="type">int</span> i,j,temp;  </span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;T.len;i++)&#123;  </span><br><span class="line">        temp=T.str[i];  </span><br><span class="line">        <span class="keyword">for</span>(j=i<span class="number">-1</span>;j&gt;=<span class="number">0</span>&amp;&amp;T.str[j]&gt;temp;j--)&#123;  </span><br><span class="line">            T.str[j+<span class="number">1</span>]=T.str[j];  </span><br><span class="line">        &#125;  </span><br><span class="line">        T.str[j+<span class="number">1</span>]=temp;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;  </span><br><span class="line">    SSTable SST;  </span><br><span class="line">    SST.len=<span class="number">10</span>;  </span><br><span class="line">    init_table(SST);  </span><br><span class="line">    print_table(SST);  </span><br><span class="line">  </span><br><span class="line"><span class="comment">/*  </span></span><br><span class="line"><span class="comment"> * //冒泡排序  </span></span><br><span class="line"><span class="comment">    bubble_sort(SST);    print_table(SST);*/</span>  </span><br><span class="line">  </span><br><span class="line"><span class="comment">/*  </span></span><br><span class="line"><span class="comment">    //快速排序  </span></span><br><span class="line"><span class="comment">    quick_sort(SST,0,9);    print_table(SST);*/</span>  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">//插入排序  </span></span><br><span class="line">    insert_sort(SST);  </span><br><span class="line">    print_table(SST);  </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="选择排序原理及实战"><a href="#选择排序原理及实战" class="headerlink" title="选择排序原理及实战"></a>选择排序原理及实战</h3><p><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304041935436.png" alt="image.png"></p><p><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304041935724.png" alt="image.png"></p><p>代码<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;time.h&gt;</span>  </span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> ElemType;  </span><br><span class="line"><span class="comment">//定义顺序表结构体  </span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span>  </span><br><span class="line">    ElemType *str;  </span><br><span class="line">    <span class="type">int</span> len;  </span><br><span class="line">&#125;SSTable;  </span><br><span class="line"><span class="comment">//顺序表初始化，添加随机数  </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">init_table</span><span class="params">(SSTable &amp;SST,<span class="type">int</span> len)</span>&#123;  </span><br><span class="line">    srand(time(<span class="literal">NULL</span>));  </span><br><span class="line">    SST.len=len;  </span><br><span class="line">    SST.str=(ElemType*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span> (ElemType)*SST.len);  </span><br><span class="line">    <span class="type">int</span> i;  </span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;SST.len;i++)&#123;  </span><br><span class="line">        SST.str[i]=rand()%<span class="number">100</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="comment">//打印顺序表  </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">print_table</span><span class="params">(SSTable SST)</span>&#123;  </span><br><span class="line">    <span class="type">int</span> i;  </span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;SST.len;i++)&#123;  </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%3d&quot;</span>,SST.str[i]);  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="comment">//交换两个元素的方法  </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">swap</span><span class="params">(ElemType &amp;a,ElemType &amp;b)</span>&#123;  </span><br><span class="line">    ElemType temp;  </span><br><span class="line">    temp=a;  </span><br><span class="line">    a=b;  </span><br><span class="line">    b=temp;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//选择排序方法  </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">select_sort</span><span class="params">(ElemType *A,<span class="type">int</span> n)</span>&#123;  </span><br><span class="line">    <span class="type">int</span> min,i,j;  </span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n<span class="number">-1</span>;i++)&#123;<span class="comment">//外循环,i只需要进行n-1轮就可以了  </span></span><br><span class="line">        min=i;  </span><br><span class="line">        <span class="keyword">for</span>(j=min+<span class="number">1</span>;j&lt;n;j++)&#123;<span class="comment">//内循环，j从左到右遍历最小  </span></span><br><span class="line">            <span class="keyword">if</span>(A[j]&lt;A[min])&#123;<span class="comment">//找到更小的  </span></span><br><span class="line">                min=j;<span class="comment">//交换下标数，意味着j下标表示的数更小，j赋值给min  </span></span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">        swap(A[i],A[min]);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;  </span><br><span class="line">    SSTable T;<span class="comment">//定义顺序表  </span></span><br><span class="line">    init_table(T,<span class="number">10</span>);<span class="comment">//初始化  </span></span><br><span class="line">    print_table(T);<span class="comment">//打印  </span></span><br><span class="line">  </span><br><span class="line">    select_sort(T.str,<span class="number">10</span>);<span class="comment">//选择排序  </span></span><br><span class="line">    print_table(T);<span class="comment">//再次打印，看排序效果  </span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304041936675.png" alt="image.png"></p><h3 id="堆排序原理及实战"><a href="#堆排序原理及实战" class="headerlink" title="堆排序原理及实战"></a>堆排序原理及实战</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">实际上就是一个数组，并不是真正意义的树</span><br><span class="line">就是把数组，想象成一个树</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">若父结点的值恒大于等于子结点的值，则该堆称为最大堆（max heap）。堆中最顶端的那个结点称为根结点（root node），根结点本身没有父结点（parent node）。平时在工作中，我们将最小堆称为小根堆或小顶堆，把最大堆称为大根堆或大顶堆</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304041937290.png" alt="image.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">堆排序步骤：</span><br><span class="line">堆排序的步骤是首先把堆调整为大根堆，然后我们交换根部元素也就是A[0]，和最后一个元素，这</span><br><span class="line">样最大的元素就放到了数组最后，接着我们将剩余 9 个元素继续调整为大根堆，然后交换 A[0]和</span><br><span class="line">9 个元素的最后一个，循环往复，直到有序</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304041938126.png" alt="image.png"></p><p><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304041938535.png" alt="image.png"></p><p><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304041938986.png" alt="image.png"></p><p>代码实现<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;time.h&gt;</span>  </span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> ElemType;  </span><br><span class="line"><span class="comment">//定义顺序表结构体  </span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span>  </span><br><span class="line">    ElemType *str;  </span><br><span class="line">    <span class="type">int</span> len;  </span><br><span class="line">&#125;SSTable;  </span><br><span class="line"><span class="comment">//顺序表初始化，添加随机数  </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">init_table</span><span class="params">(SSTable &amp;SST,<span class="type">int</span> len)</span>&#123;  </span><br><span class="line">    srand(time(<span class="literal">NULL</span>));  </span><br><span class="line">    SST.len=len;  </span><br><span class="line">    SST.str=(ElemType*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span> (ElemType)*SST.len);  </span><br><span class="line">    <span class="type">int</span> i;  </span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;SST.len;i++)&#123;  </span><br><span class="line">        SST.str[i]=rand()%<span class="number">100</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="comment">//打印顺序表  </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">print_table</span><span class="params">(SSTable SST)</span>&#123;  </span><br><span class="line">    <span class="type">int</span> i;  </span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;SST.len;i++)&#123;  </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%3d&quot;</span>,SST.str[i]);  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="comment">//交换两个元素的方法  </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">swap</span><span class="params">(ElemType &amp;a,ElemType &amp;b)</span>&#123;  </span><br><span class="line">    ElemType temp;  </span><br><span class="line">    temp=a;  </span><br><span class="line">    a=b;  </span><br><span class="line">    b=temp;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//调整单个子树为大根堆的方法  </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">adjust_down1</span><span class="params">(ElemType A[],<span class="type">int</span> k,<span class="type">int</span> len)</span>&#123;<span class="comment">//k表示父节点位置，开始调整的位置  </span></span><br><span class="line">    <span class="type">int</span> dad=k;<span class="comment">//父节点的下标  </span></span><br><span class="line">    <span class="type">int</span> son=<span class="number">2</span>*dad+<span class="number">1</span>;<span class="comment">//子节点的下标  </span></span><br><span class="line">    <span class="keyword">while</span>(son&lt;len)&#123;  </span><br><span class="line">        <span class="keyword">if</span>(son+<span class="number">1</span>&lt;len&amp;&amp;A[son]&lt;A[son+<span class="number">1</span>])&#123;<span class="comment">//左节点应该比右结点小,son+1且不能越界  </span></span><br><span class="line">            son++;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">if</span>(A[dad]&lt;A[son])&#123;  </span><br><span class="line">            swap(A[son],A[dad]);  </span><br><span class="line">            dad=son;  </span><br><span class="line">            son=<span class="number">2</span>*dad+<span class="number">1</span>;  </span><br><span class="line">        &#125; <span class="keyword">else</span>&#123;  </span><br><span class="line">            <span class="keyword">break</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//堆排序的方法  </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">heap_sort</span><span class="params">(ElemType *A,<span class="type">int</span> len)</span>&#123;  </span><br><span class="line">    <span class="type">int</span> i;  </span><br><span class="line">    <span class="keyword">for</span>(i=len/<span class="number">2</span><span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)&#123;<span class="comment">//从最末尾的子树开始一个一个向前调整为大根堆  </span></span><br><span class="line">        adjust_down1(A,i,len);  </span><br><span class="line">    &#125;  </span><br><span class="line">    swap(A[<span class="number">0</span>],A[len<span class="number">-1</span>]);<span class="comment">//交换根结点和尾结点  </span></span><br><span class="line">    <span class="keyword">for</span>(i=len<span class="number">-1</span>;i&gt;<span class="number">1</span>;i--)&#123;<span class="comment">//剩余的数组进入循环  </span></span><br><span class="line">        adjust_down1(A,<span class="number">0</span>,i);<span class="comment">//从根结点开始重新调整为大堆根,此时数组长度变化-1  </span></span><br><span class="line">        swap(A[<span class="number">0</span>],A[i<span class="number">-1</span>]);<span class="comment">//交换根结点  </span></span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;  </span><br><span class="line">    SSTable T;  </span><br><span class="line">    init_table(T,<span class="number">10</span>);  </span><br><span class="line">    print_table(T);  </span><br><span class="line">  </span><br><span class="line">    heap_sort(T.str,<span class="number">10</span>);  </span><br><span class="line">    print_table(T);  </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304041939457.png" alt="image.png"></p><h3 id="归并排序原理及实战"><a href="#归并排序原理及实战" class="headerlink" title="归并排序原理及实战"></a>归并排序原理及实战</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">归并排序是我们不断进行二分，最终各自剩余 1 个元素，自然有序，然后先将每两个元</span><br><span class="line">素进行合并，变为有序，然后再将两个小组合并，变为有序，循环往复，直到整个数组有序</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304041939460.png" alt="image.png"></p><p><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304041940642.png" alt="image.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">递归到最底部后，开始层层merge，low,high,mid任然对应分组时的位置</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304041940894.png" alt="image.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">merge的时候，需要三个指针,i指向A的有序的前半段，j指向A有序的后半段，k指向放入的数组的当前位置</span><br><span class="line"></span><br><span class="line">1、将A[] 元素全部复制放到B[] ，i ,j分别对应low\mid+1起始位置，k=i.</span><br><span class="line"></span><br><span class="line">2、i j 先比较，小的放入A[k],i++,j不动，k++</span><br><span class="line"></span><br><span class="line">3、直到有剩余，i到头了，j还没到头;或者j到头了，i还没到头。while循环将剩余的全部放入,k随着++</span><br></pre></td></tr></table></figure><p>代码如下<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;time.h&gt;</span>  </span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> ElemType;  </span><br><span class="line"><span class="comment">//定义顺序表结构体  </span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span>  </span><br><span class="line">    ElemType *str;  </span><br><span class="line">    <span class="type">int</span> len;  </span><br><span class="line">&#125;SSTable;  </span><br><span class="line"><span class="comment">//顺序表初始化，添加随机数  </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">init_table</span><span class="params">(SSTable &amp;SST,<span class="type">int</span> len)</span>&#123;  </span><br><span class="line">    srand(time(<span class="literal">NULL</span>));  </span><br><span class="line">    SST.len=len;  </span><br><span class="line">    SST.str=(ElemType*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span> (ElemType)*SST.len);  </span><br><span class="line">    <span class="type">int</span> i;  </span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;SST.len;i++)&#123;  </span><br><span class="line">        SST.str[i]=rand()%<span class="number">100</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="comment">//打印顺序表  </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">print_table</span><span class="params">(SSTable SST)</span>&#123;  </span><br><span class="line">    <span class="type">int</span> i;  </span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;SST.len;i++)&#123;  </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%3d&quot;</span>,SST.str[i]);  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="comment">//交换两个元素的方法  </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">swap</span><span class="params">(ElemType &amp;a,ElemType &amp;b)</span>&#123;  </span><br><span class="line">    ElemType temp;  </span><br><span class="line">    temp=a;  </span><br><span class="line">    a=b;  </span><br><span class="line">    b=temp;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//合并方法  </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">merge</span><span class="params">(ElemType A[],<span class="type">int</span> low,<span class="type">int</span> mid,<span class="type">int</span> high)</span>&#123;  </span><br><span class="line">    <span class="comment">//用额外的空间存放，避免原数组交换次数过多  </span></span><br><span class="line">    <span class="comment">//static修饰防止递归时，重复加载  </span></span><br><span class="line">    <span class="comment">//因为申请了额外的空间，所以空间复杂度是O(n),n是元素个数  </span></span><br><span class="line">    <span class="type">static</span> ElemType B[<span class="number">10</span>];  </span><br><span class="line">    <span class="type">int</span> i,j,k;  </span><br><span class="line">    <span class="keyword">for</span>(k=low;k&lt;=high;k++)&#123;<span class="comment">//复制元素到B中  </span></span><br><span class="line">        B[k]=A[k];  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">for</span>(i=low,j=mid+<span class="number">1</span>,k=i;i&lt;=mid&amp;&amp;j&lt;=high;k++) &#123;<span class="comment">//合并两个有序数组  </span></span><br><span class="line">        <span class="keyword">if</span> (B[i] &lt;= B[j]) &#123;  </span><br><span class="line">            A[k] = B[i];  </span><br><span class="line">            i++;  </span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">            A[k] = B[j];  </span><br><span class="line">            j++;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">while</span> (i &lt;= mid) &#123;<span class="comment">//如果左半边数组有剩余接着放入  </span></span><br><span class="line">        A[k] = B[i];  </span><br><span class="line">        k++;  </span><br><span class="line">        i++;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">while</span> (j &lt;= high) &#123;<span class="comment">//如果右半边数组有剩余接着放入  </span></span><br><span class="line">        A[k] = B[j];  </span><br><span class="line">        k++;  </span><br><span class="line">        j++;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//归并排序方法  </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">merge_sort</span><span class="params">(ElemType A[],<span class="type">int</span> low,<span class="type">int</span> high)</span>&#123;  </span><br><span class="line">    <span class="keyword">if</span>(low&lt;high) &#123;  </span><br><span class="line">        <span class="type">int</span> mid = (low + high) / <span class="number">2</span>;  </span><br><span class="line">        merge_sort(A, low, mid);  </span><br><span class="line">        merge_sort(A, mid+<span class="number">1</span>,high);  </span><br><span class="line">        merge(A,low,mid,high);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;  </span><br><span class="line">    SSTable T;  </span><br><span class="line">    init_table(T,<span class="number">10</span>);  </span><br><span class="line">    print_table(T);  </span><br><span class="line">  </span><br><span class="line">    merge_sort(T.str,<span class="number">0</span>,<span class="number">9</span>);  </span><br><span class="line">    print_table(T);  </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">MergeSort 函数的递归 次数是 log 2 n， Merge 函数的循环了 n 次， 因此时间复杂度是 O(nlog 2 n)。</span><br><span class="line">归并排序最好、最坏、平均时间复杂度都是 O(nlog 2 n)。</span><br><span class="line">归并排序的空间复杂度是 O(n)，因为使用了数组 B，它的大小与 A 一样，占用 n 个元素的</span><br><span class="line">空间。</span><br></pre></td></tr></table></figure><h3 id="所有算法空间时间复杂度"><a href="#所有算法空间时间复杂度" class="headerlink" title="所有算法空间时间复杂度"></a>所有算法空间时间复杂度</h3><p><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304041941683.png" alt="image.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;单链表的新建查找&quot;&gt;&lt;a href=&quot;#单链表的新建查找&quot; class=&quot;headerlink&quot; title=&quot;单链表的新建查找&quot;&gt;&lt;/a&gt;单链表的新建查找&lt;/h2&gt;&lt;h3 id=&quot;链表的实现&quot;&gt;&lt;a href=&quot;#链表的实现&quot; class=&quot;headerlink</summary>
      
    
    
    
    
    <category term="C语言" scheme="https://fqzs.netlify.app/tags/C%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>obisidain图床</title>
    <link href="https://fqzs.netlify.app/undefined/7b58c309.html"/>
    <id>https://fqzs.netlify.app/undefined/7b58c309.html</id>
    <published>2023-04-01T23:19:00.000Z</published>
    <updated>2023-04-13T14:59:09.858Z</updated>
    
    <content type="html"><![CDATA[<h1 id="github图床"><a href="#github图床" class="headerlink" title="github图床"></a>github图床</h1><h2 id="安装Picgo"><a href="#安装Picgo" class="headerlink" title="安装Picgo"></a>安装Picgo</h2><p>GitHub搜索picgo</p><h2 id="申请一个token"><a href="#申请一个token" class="headerlink" title="申请一个token"></a>申请一个token</h2><p>注意必须勾选仓库权限</p><h2 id="配置仓库信息"><a href="#配置仓库信息" class="headerlink" title="配置仓库信息"></a>配置仓库信息</h2><p><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304020033355.png" alt="image.png"></p><h2 id="下载obsidian中的picgo插件"><a href="#下载obsidian中的picgo插件" class="headerlink" title="下载obsidian中的picgo插件"></a>下载obsidian中的picgo插件</h2><h2 id="设置几个插件选项"><a href="#设置几个插件选项" class="headerlink" title="设置几个插件选项"></a>设置几个插件选项</h2><p><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304020035364.png" alt="image.png"></p><h1 id="七牛云图床"><a href="#七牛云图床" class="headerlink" title="七牛云图床"></a>七牛云图床</h1><p>前置准备与上面一致，注册好七牛云后存储仓库每月10G免费上传空间，但是访问的域名是测试域名有效期30天，因此需要一个备案好的域名。</p><h2 id="设置picgo七牛云设置"><a href="#设置picgo七牛云设置" class="headerlink" title="设置picgo七牛云设置"></a>设置picgo七牛云设置</h2><p><img src="http://rsjnvx1rp.hn-bkt.clouddn.com/202304041830394.png" alt="image.png"></p><h2 id="关于测试域名过期问题"><a href="#关于测试域名过期问题" class="headerlink" title="关于测试域名过期问题"></a>关于测试域名过期问题</h2><p>由于测试域名有效期只有30天，但是又不想花钱搞个域名，可以通过，连续创建新的存储空间，一直白嫖30天测试域名，再通过qshell工具将原空间的数据，拷贝到新的空间里</p><h3 id="qshell工具的使用"><a href="#qshell工具的使用" class="headerlink" title="qshell工具的使用"></a>qshell工具的使用</h3><p><a href="https://developer.qiniu.com/kodo/1302/qshell">官网下载</a></p><h4 id="闪退问题"><a href="#闪退问题" class="headerlink" title="闪退问题"></a>闪退问题</h4><p>下载好之后，对于windows系统来说，不要双击方式运行qshell.exe,通过进入文件夹，运行cmd命令，输入qshell.exe执行</p><h4 id="操作方法"><a href="#操作方法" class="headerlink" title="操作方法"></a>操作方法</h4><p>1.窗口中输入 ```</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">qshell listbucket 要复制的空间名 -o test.txt</span><br></pre></td></tr></table></figure><p>扒取要复制的空间的所有文件信息,前面两个是命令,不解释 后面一个是要复制的空间吗,-o之后是你要指定一个文件名</p><p>2.执行之后会生成test.txt文件<br><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304041926710.png" alt="image.png"></p><p>生成的文件是这样的,这不是我们要的,ctrl+A复制全部,用Excel表格打开<br><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304041926672.png" alt="image.png"></p><p>只留下前面的名字,复制回原来的test.txt里,<br><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304041925712.png" alt="image.png"></p><p>只要这些,之后<br>命令行执行<br>qshell batchcopy —force —overwrite —success-list success.txt —failure-list failure.txt 源空间名 目标空间名 -i test.txt<br>解释:qshell batchcopy 执行的是复制操作,也可以改成qshell batchmove ,<br>–force,不加这个的话会给你手机发个验证码验证,会很久,还是加上,-<br>-overwrite 同名文件覆盖<br>–success-list success.txt —failure-list failure.txt:设置复制成功或者失败的文件放置位置,就是哪些文件成功了哪些失败了,都会列到你指定的文件<br>源空间名 目标空间名 :就是空间名称,源空间就是你要复制的那个,目标空间名就是要粘贴到的那个.<br>-i test.txt:上一条命令生成的文件</p><p>这样就复制过去了,底下的图是另一个账号授权的源空间<br><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304041925648.png" alt="image.png"></p><p>这里是我复制的空间<br><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304041925121.png" alt="image.png"></p><h4 id="图片换新链接"><a href="#图片换新链接" class="headerlink" title="图片换新链接"></a>图片换新链接</h4><p>由于换了一个新的测试域名，访问地址变化，但是知道保证复制之后的文件名称不变，只需要改变图url的域名位置，通过正则表达式批量修改，可以解决链接问题</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;github图床&quot;&gt;&lt;a href=&quot;#github图床&quot; class=&quot;headerlink&quot; title=&quot;github图床&quot;&gt;&lt;/a&gt;github图床&lt;/h1&gt;&lt;h2 id=&quot;安装Picgo&quot;&gt;&lt;a href=&quot;#安装Picgo&quot; class=&quot;header</summary>
      
    
    
    
    
    <category term="obisidian" scheme="https://fqzs.netlify.app/tags/obisidian/"/>
    
  </entry>
  
  <entry>
    <title>技术随想</title>
    <link href="https://fqzs.netlify.app/undefined/dfb8a81f.html"/>
    <id>https://fqzs.netlify.app/undefined/dfb8a81f.html</id>
    <published>2023-03-31T15:58:00.000Z</published>
    <updated>2023-04-13T14:59:09.858Z</updated>
    
    <content type="html"><![CDATA[<h1 id="搭建个人博客"><a href="#搭建个人博客" class="headerlink" title="搭建个人博客"></a>搭建个人博客</h1><h2 id="Github-Pages-和-Hexo-搭建自己的独立博客"><a href="#Github-Pages-和-Hexo-搭建自己的独立博客" class="headerlink" title="Github Pages 和 Hexo 搭建自己的独立博客"></a><a href="https://anzhiy.cn/posts/ddae.html#Hexo-%E5%AE%89%E8%A3%85">Github Pages 和 Hexo 搭建自己的独立博客</a></h2><h2 id="配置文章页post-front-matter"><a href="#配置文章页post-front-matter" class="headerlink" title="配置文章页post-front-matter"></a>配置文章页post-front-matter</h2><h2 id="添加徽标"><a href="#添加徽标" class="headerlink" title="添加徽标"></a>添加徽标</h2><h2 id="一图流实现"><a href="#一图流实现" class="headerlink" title="一图流实现"></a><a href="https://zfe.space/post/65396.html">一图流实现</a></h2><h2 id="打字机效果"><a href="#打字机效果" class="headerlink" title="打字机效果"></a><a href="https://zhuanlan.zhihu.com/p/492207978">打字机效果</a></h2><h2 id="Hexo-Butterfly-一些常见问题"><a href="#Hexo-Butterfly-一些常见问题" class="headerlink" title="Hexo + Butterfly 一些常见问题"></a><a href="https://tzy1997.com/articles/hexo1612/#%E9%A6%96%E9%A1%B5%E6%89%93%E5%AD%97%E6%9C%BA%E6%95%88%E6%9E%9C">Hexo + Butterfly 一些常见问题</a></h2><h2 id="Algolia搜索系统"><a href="#Algolia搜索系统" class="headerlink" title="Algolia搜索系统"></a><a href="https://www.fomal.cc/posts/d1927166.html">Algolia搜索系统</a></h2><h2 id="页面布局优化"><a href="#页面布局优化" class="headerlink" title="页面布局优化"></a><a href="">页面布局优化</a></h2><h2 id="右边按钮阅读进度"><a href="#右边按钮阅读进度" class="headerlink" title="右边按钮阅读进度"></a><a href="https://www.fomal.cc/posts/2d7ac914.html">右边按钮阅读进度</a></h2><h2 id="文章三栏"><a href="#文章三栏" class="headerlink" title="文章三栏"></a><a href="https://www.fomal.cc/posts/d739261b.html">文章三栏</a></h2><h2 id="为文章封面图片"><a href="#为文章封面图片" class="headerlink" title="为文章封面图片"></a>为文章封面图片</h2><p>要为每一篇文章的栏目配置图片，需要在文章的top_imge和cover标签传一个图片的url链接，注意不是图片链接<br>url链接通过上传至图床获取<br>文章的 markdown 文档上，在 添加 ，并填上要显示的图片地址。Front-mattercover<br>如果不配置 ，可以设置显示默认的 cover。cover<br>如果不想在首页显示 cover， 可以设置为 。false</p><h2 id="自定义字体"><a href="#自定义字体" class="headerlink" title="自定义字体"></a><a href="https://tzy1997.com/articles/hexo1605/">自定义字体</a></h2><h2 id="修改头像及网站图标"><a href="#修改头像及网站图标" class="headerlink" title="修改头像及网站图标"></a>修改头像及网站图标</h2><p>改网站图标：修改主题文件找到favicon,修改本地的图片<br>改头像：修改主题配置文件找到avater，修改图片url</p><h2 id="双栏修改"><a href="#双栏修改" class="headerlink" title="双栏修改"></a><a href="https://zfe.space/post/hexo-butterfly-article-double-row.html">双栏修改</a></h2><h2 id="加载动画"><a href="#加载动画" class="headerlink" title="加载动画"></a><a href="https://anzhiy.cn/posts/52d8.html">加载动画</a></h2><p>遇到问题：按照流程，发现存在半屏加载页面不消失的情况，于是换用4.4版本的步骤，解决了上述问题。所以butterfly版本只最为参考，实际还是按照实际情况判断选择哪种方式</p><h2 id="利用clion修改本地文件存在的问题"><a href="#利用clion修改本地文件存在的问题" class="headerlink" title="利用clion修改本地文件存在的问题"></a>利用clion修改本地文件存在的问题</h2><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>用clion修改本地博客配置文件，无法检测到stly,pug,文件的改动，导致推送时漏掉上述类型配置文件</p><h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3><p>放弃用clion修改配置文件，换用其他编辑器；或者，直接在文件夹执行git操作</p><h2 id="Hexo-github-netlify快速搭建"><a href="#Hexo-github-netlify快速搭建" class="headerlink" title="Hexo+github+netlify快速搭建"></a><a href="https://blog.csdn.net/qq_34769162/article/details/107687755?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522168070747016800180693297%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&amp;request_id=168070747016800180693297&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-1-107687755-null-null.142^v81^insert_down38,201^v4^add_ask,239^v2^insert_chatgpt&amp;utm_term=github%20netlify%20%E5%8D%9A%E5%AE%A2&amp;spm=1018.2226.3001.4187">Hexo+github+netlify快速搭建</a></h2><h2 id="github-action自动部署"><a href="#github-action自动部署" class="headerlink" title="github action自动部署"></a><a href="https://anzhiy.cn/posts/asdx.html">github action自动部署</a></h2><h2 id="博客迁移到新电脑"><a href="#博客迁移到新电脑" class="headerlink" title="博客迁移到新电脑"></a><a href="https://www.fomal.cc/posts/d1927166.html">博客迁移到新电脑</a></h2><h2 id="hexo中插入pdf"><a href="#hexo中插入pdf" class="headerlink" title="hexo中插入pdf"></a><a href="https://zhuanlan.zhihu.com/p/550626417">hexo中插入pdf</a></h2><p>1-下载插件<br><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save hexo-pdf</span><br></pre></td></tr></table></figure></p><p>2-建立存放pdf文件夹</p><pre><code>在source文件夹下创建一个叫pdf的文件夹，把xxx.pdf文件放在这里</code></pre><p>3-引用<br>    在_post文件夹中的xxx.md直接使用<br><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% pdf /pdf/xxx.pdf %&#125;</span><br></pre></td></tr></table></figure></p><h1 id="服务器部署"><a href="#服务器部署" class="headerlink" title="服务器部署"></a>服务器部署</h1><h2 id="服务器的使用"><a href="#服务器的使用" class="headerlink" title="服务器的使用"></a><a href="https://blog.csdn.net/weixin_57024510/article/details/126292491?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522168070719016800182115444%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=168070719016800182115444&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-126292491-null-null.142^v81^insert_down38,201^v4^add_ask,239^v2^insert_chatgpt&amp;utm_term=%E9%98%BF%E9%87%8C%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%80%8E%E4%B9%88%E4%BD%BF%E7%94%A8&amp;spm=1018.2226.3001.4187">服务器的使用</a></h2><h3 id="甲骨文云服务器"><a href="#甲骨文云服务器" class="headerlink" title="甲骨文云服务器"></a><a href="https://www.youtube.com/watch?v=X9sexl1wXyE">甲骨文云服务器</a></h3>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;搭建个人博客&quot;&gt;&lt;a href=&quot;#搭建个人博客&quot; class=&quot;headerlink&quot; title=&quot;搭建个人博客&quot;&gt;&lt;/a&gt;搭建个人博客&lt;/h1&gt;&lt;h2 id=&quot;Github-Pages-和-Hexo-搭建自己的独立博客&quot;&gt;&lt;a href=&quot;#Github-P</summary>
      
    
    
    
    
    <category term="butterfly" scheme="https://fqzs.netlify.app/tags/butterfly/"/>
    
  </entry>
  
</feed>
