<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>风起之时K_Blog</title>
  
  <subtitle>天气晴朗~阳光正好</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2023-03-26T04:04:53.128Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>风起之时</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="http://example.com/undefined/0.html"/>
    <id>http://example.com/undefined/0.html</id>
    <published>2023-03-30T07:17:43.476Z</published>
    <updated>2023-03-26T04:04:53.128Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-导数的定义"><a href="#1-导数的定义" class="headerlink" title="1.导数的定义"></a>1.导数的定义</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1-导数的定义&quot;&gt;&lt;a href=&quot;#1-导数的定义&quot; class=&quot;headerlink&quot; title=&quot;1.导数的定义&quot;&gt;&lt;/a&gt;1.导数的定义&lt;/h2&gt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://example.com/undefined/0.html"/>
    <id>http://example.com/undefined/0.html</id>
    <published>2023-03-30T07:17:43.461Z</published>
    <updated>2023-03-26T03:37:20.158Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-无穷小的比较"><a href="#1-无穷小的比较" class="headerlink" title="1.无穷小的比较"></a>1.无穷小的比较</h2><p>高阶无穷小<br><img src="C:\Users\123\Desktop\记录本\图片\Snipaste_2023-03-25_15-34-42.png"></p><p>等价无穷小<br><img src="C:\Users\123\Desktop\记录本\图片\Snipaste_2023-03-25_15-41-56.png"><br><img src="C:\Users\123\Desktop\记录本\图片\Snipaste_2023-03-25_15-58-11.png"></p><h2 id="2-泰勒公式"><a href="#2-泰勒公式" class="headerlink" title="2.泰勒公式"></a>2.泰勒公式</h2><p>麦克劳林公式<br><img src="C:\Users\123\Desktop\记录本\图片\Snipaste_2023-03-25_16-27-59.png"></p><p>常见的9个泰勒公式<br><img src="C:\Users\123\Desktop\记录本\图片\Snipaste_2023-03-25_16-37-47.png"></p><h2 id="3-极限的运算法则"><a href="#3-极限的运算法则" class="headerlink" title="3.极限的运算法则"></a>3.极限的运算法则</h2><p><img src="C:\Users\123\Desktop\记录本\图片\Snipaste_2023-03-25_16-47-28.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[反三角函数的值域是指反三角函数的输出范围。例如，反正弦函数的值域是 [-π/2，π/2]，反余弦函数的值域是 [0，π]，而反正切函数的值域是 (-π/2，π/2)]</span><br></pre></td></tr></table></figure><p><img src="C:\Users\123\Desktop\记录本\图片\Snipaste_2023-03-25_17-02-29.png"><br><img src="C:\Users\123\Desktop\记录本\图片\Snipaste_2023-03-25_17-12-29.png"></p><p><img src="C:\Users\123\Desktop\记录本\图片\Snipaste_2023-03-25_17-24-56.png"><br><img src="C:\Users\123\Desktop\记录本\图片\Snipaste_2023-03-25_17-44-21.png"><br><img src="C:\Users\123\Desktop\记录本\图片\Snipaste_2023-03-25_17-51-31.png"></p><h2 id="4-函数求极限的通法"><a href="#4-函数求极限的通法" class="headerlink" title="4.函数求极限的通法"></a>4.函数求极限的通法</h2><p><img src="C:\Users\123\Desktop\记录本\图片\Snipaste_2023-03-25_18-56-59.png"><br><img src="C:\Users\123\Desktop\记录本\图片\Snipaste_2023-03-25_19-00-33.png"><br><img src="C:\Users\123\Desktop\记录本\图片\Snipaste_2023-03-25_19-05-45.png"><br><img src="C:\Users\123\Desktop\记录本\图片\Snipaste_2023-03-25_19-06-40.png"></p><h3 id="2-典型例题讲解"><a href="#2-典型例题讲解" class="headerlink" title="2.典型例题讲解"></a>2.典型例题讲解</h3><p><a href="D:\408\01武忠祥\01抢跑阶段\01三大核心计算\00函数求极限\210517_161930-01-2函数求极限笔记.pdf">pdf</a><br><img src="C:\Users\123\Desktop\记录本\图片\Snipaste_2023-03-25_19-14-48.png"><br><img src="C:\Users\123\Desktop\记录本\图片\Snipaste_2023-03-25_19-23-01.png"><br><img src="C:\Users\123\Desktop\记录本\图片\Snipaste_2023-03-25_22-23-06.png"></p><p><img src="C:\Users\123\Desktop\记录本\图片\Snipaste_2023-03-25_22-39-19.png"><br><img src="C:\Users\123\Desktop\记录本\图片\Snipaste_2023-03-25_22-57-29.png"></p><p><img src="C:\Users\123\Desktop\记录本\图片\Snipaste_2023-03-25_23-10-45.png"></p><p><img src="C:\Users\123\Desktop\记录本\图片\Snipaste_2023-03-25_23-18-34.png"><br><img src="C:\Users\123\Desktop\记录本\图片\Snipaste_2023-03-25_23-26-29.png"></p><h3 id="课后练习"><a href="#课后练习" class="headerlink" title="课后练习"></a>课后练习</h3><p><a href="D:\408\01武忠祥\01抢跑阶段\01三大核心计算\00函数求极限\习题.pdf">课后习题</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1-无穷小的比较&quot;&gt;&lt;a href=&quot;#1-无穷小的比较&quot; class=&quot;headerlink&quot; title=&quot;1.无穷小的比较&quot;&gt;&lt;/a&gt;1.无穷小的比较&lt;/h2&gt;&lt;p&gt;高阶无穷小&lt;br&gt;&lt;img src=&quot;C:\Users\123\Desktop\记录本\图片</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://example.com/undefined/0.html"/>
    <id>http://example.com/undefined/0.html</id>
    <published>2023-03-30T07:17:43.445Z</published>
    <updated>2023-03-24T16:03:04.746Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">偏导数连续(x.y)</span><br><span class="line">一阶偏导数连续的意思是，该函数的图像是一条连续的线，无论从哪个方向接近某一点，偏导数的</span><br><span class="line">极限都存在且相等。也就是说，偏导数函数在每一点都满足连续性的定义。如果一个函数在某个区</span><br><span class="line">域内的所有点都有一阶连续偏导数，那么这个函数就是可微的(x、y方向的偏导数都连续)</span><br><span class="line">可微(x.y其他任意方向)</span><br><span class="line">是指曲面某一个点处存在一个切面，该点的各个方向的偏导数都存在(x、y和其他任意方向)</span><br><span class="line">偏导数存在(x.y)</span><br><span class="line">偏导数存在的意思是，一个多变量函数的偏导数，就是它关于其中一个变量的导数而保持其他变量</span><br><span class="line">恒定。也就是说，如果一个多元函数在某一点沿着某个方向的偏增量与该方向的增量之比当增量趋</span><br><span class="line">于零时的极限存在，那么这个极限值就是该函数在该点沿着该方向的偏导数(对于二元函数来说</span><br><span class="line">变量只有x.y那么要xy方向都存在偏导数，那么偏导数存在，要考虑两个变量)</span><br><span class="line">函数连续</span><br><span class="line">就是说二元函数所形成的的曲面是连续的没有断口，判断方法--&gt;该点函数值是否等于函数极限值</span><br><span class="line">等于就是连续</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">综上可以得到</span><br><span class="line"></span><br><span class="line">偏导数连续</span><br><span class="line">=&gt;可微</span><br><span class="line">=&gt;连续</span><br><span class="line">=&gt;偏导数存在</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span c</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://example.com/undefined/0.html"/>
    <id>http://example.com/undefined/0.html</id>
    <published>2023-03-30T07:17:43.445Z</published>
    <updated>2023-03-25T07:59:23.976Z</updated>
    
    <content type="html"><![CDATA[<p><a href="D:\408\01.【2024有道数学定制vip长线领学班】（武忠祥，刘金峰）领学班\00.扫描讲义+课件\01.扫描讲义">常用公式手册</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;D:\408\01.【2024有道数学定制vip长线领学班】（武忠祥，刘金峰）领学班\00.扫描讲义+课件\01.扫描讲义&quot;&gt;常用公式手册&lt;/a&gt;&lt;/p&gt;
</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://example.com/undefined/0.html"/>
    <id>http://example.com/undefined/0.html</id>
    <published>2023-03-30T07:17:43.445Z</published>
    <updated>2023-03-25T06:42:23.245Z</updated>
    
    <content type="html"><![CDATA[<p><img src="C:\Users\123\Desktop\记录本\图片\数学题\Snipaste_2023-03-07_20-42-57.png"></p><p><img src="C:\Users\123\Desktop\记录本\图片\数学题\Snipaste_2023-03-07_20-50-01.png"></p><p><img src="C:\Users\123\Desktop\记录本\图片\数学题\Snipaste_2023-03-16_23-04-11.png"></p><p><img src="C:\Users\123\Desktop\记录本\图片\数学题\Snipaste_2023-03-16_23-15-35.png"></p><p><img src="C:\Users\123\Desktop\记录本\图片\数学题\Snipaste_2023-03-21_19-38-50.png"></p><p><img src="C:\Users\123\Desktop\记录本\图片\数学题\Snipaste_2023-03-21_19-45-11.png"></p><p><img src="C:\Users\123\Desktop\记录本\图片\数学题\Snipaste_2023-03-21_19-51-43.png"><br><img src="C:\Users\123\Desktop\记录本\图片\数学题\Snipaste_2023-03-21_19-53-17.png"></p><p><img src="C:\Users\123\Desktop\记录本\图片\数学题\Snipaste_2023-03-21_20-07-00.png"><br>[[偏导数连续-可微-偏导数存在-连续关系]]</p><p><img src="C:\Users\123\Desktop\记录本\图片\数学题\Snipaste_2023-03-21_20-12-08.png"></p><p><img src="C:\Users\123\Desktop\记录本\图片\数学题\Snipaste_2023-03-21_20-15-25.png"></p><p><img src="C:\Users\123\Desktop\记录本\图片\数学题\Snipaste_2023-03-21_21-23-31.png"><br><img src="C:\Users\123\Desktop\记录本\图片\数学题\Snipaste_2023-03-21_21-23-55.png"></p><p><img src="C:\Users\123\Desktop\记录本\图片\数学题\Snipaste_2023-03-21_21-44-46.png"></p><p><img src="C:\Users\123\Desktop\记录本\图片\数学题\Snipaste_2023-03-21_21-47-58.png"></p><p><img src="C:\Users\123\Desktop\记录本\图片\数学题\Snipaste_2023-03-21_21-49-50.png"></p><p><img src="C:\Users\123\Desktop\记录本\图片\数学题\Snipaste_2023-03-21_21-53-46.png"><br><img src="C:\Users\123\Desktop\记录本\图片\Snipaste_2023-03-24_23-46-55.png"><br><img src="C:\Users\123\Desktop\记录本\图片\Snipaste_2023-03-24_23-55-42.png"><br><img src="C:\Users\123\Desktop\记录本\图片\Snipaste_2023-03-25_00-01-21.png"><br><img src="C:\Users\123\Desktop\记录本\图片\Snipaste_2023-03-25_00-12-08.png"><br><img src="C:\Users\123\Desktop\记录本\图片\Snipaste_2023-03-25_00-14-59.png"><br><img src="C:\Users\123\Desktop\记录本\图片\Snipaste_2023-03-25_00-26-47.png"><br><img src="C:\Users\123\Desktop\记录本\图片\Snipaste_2023-03-25_00-28-33.png"><br><img src="C:\Users\123\Desktop\记录本\图片\Snipaste_2023-03-25_11-37-08.png"><br><img src="C:\Users\123\Desktop\记录本\图片\Snipaste_2023-03-25_11-41-30.png"><br><img src="C:\Users\123\Desktop\记录本\图片\Snipaste_2023-03-25_11-51-23.png"><br><img src="C:\Users\123\Desktop\记录本\图片\Snipaste_2023-03-25_14-28-48.png"><br><img src="C:\Users\123\Desktop\记录本\图片\Snipaste_2023-03-25_14-30-55.png"><br><img src="C:\Users\123\Desktop\记录本\图片\Snipaste_2023-03-25_14-41-57.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;C:\Users\123\Desktop\记录本\图片\数学题\Snipaste_2023-03-07_20-42-57.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;C:\Users\123\Desktop\记录本\图片\数学题\Snipaste_20</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://example.com/undefined/0.html"/>
    <id>http://example.com/undefined/0.html</id>
    <published>2023-03-30T07:17:43.429Z</published>
    <updated>2023-03-26T14:36:34.265Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://example.com/undefined/0.html"/>
    <id>http://example.com/undefined/0.html</id>
    <published>2023-03-30T07:17:43.429Z</published>
    <updated>2023-03-26T14:35:00.435Z</updated>
    
    <content type="html"><![CDATA[<p><a href="%E2%80%AAD:%5C408%5CC%E8%AF%AD%E8%A8%80%5C%E9%AB%98%E7%BA%A7%5C21%E8%AF%BE%E4%BB%B6%5C21.5%E3%80%90%E8%AF%BE%E4%BB%B6%E3%80%91%E9%80%89%E6%8B%A9%E5%BE%AA%E7%8E%AF%E6%B1%87%E7%BC%96%E5%AE%9E%E6%88%98%E8%A7%A3%E6%9E%90.pdf">PDF</a></p><p>C语言代码<br><img src="C:\Users\123\Desktop\记录本\图片\Snipaste_2023-03-26_22-08-38.png"></p><p>C语言转为汇编分析</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">入口</span><br></pre></td></tr></table></figure><p><img src="C:\Users\123\Desktop\记录本\图片\Snipaste_2023-03-26_22-11-39.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">i j 赋值</span><br></pre></td></tr></table></figure><p><img src="C:\Users\123\Desktop\记录本\图片\Snipaste_2023-03-26_22-13-16.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">if 判断</span><br></pre></td></tr></table></figure><p><img src="C:\Users\123\Desktop\记录本\图片\Snipaste_2023-03-26_22-14-33.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><p><img src="C:\Users\123\Desktop\记录本\图片\Snipaste_2023-03-26_22-17-10.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">循环条件判断</span><br></pre></td></tr></table></figure><p><img src="C:\Users\123\Desktop\记录本\图片\Snipaste_2023-03-26_22-25-49.png"></p><p><img src="C:\Users\123\Desktop\记录本\图片\Snipaste_2023-03-26_22-26-23.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Jge: &gt;时 跳转</span><br><span class="line">Jmp：无条件 跳转</span><br><span class="line">Jle：&lt;= 时跳转</span><br><span class="line"></span><br><span class="line">cmp: 比较，然后设置条件码</span><br><span class="line">add:加</span><br><span class="line">move:赋值操作</span><br><span class="line">lea ：地址传送指令，将有效地址传送到指定的的寄存器。</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;%E2%80%AAD:%5C408%5CC%E8%AF%AD%E8%A8%80%5C%E9%AB%98%E7%BA%A7%5C21%E8%AF%BE%E4%BB%B6%5C21.5%E3%80%90%E8%AF%BE%E4%BB%B6%E3%80%91%E</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://example.com/undefined/0.html"/>
    <id>http://example.com/undefined/0.html</id>
    <published>2023-03-30T07:17:43.429Z</published>
    <updated>2023-03-26T14:07:13.872Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-汇编指令格式"><a href="#1-汇编指令格式" class="headerlink" title="1.汇编指令格式"></a>1.汇编指令格式</h2><p><img src="C:\Users\123\Desktop\记录本\图片\Snipaste_2023-03-26_12-29-52.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1.编译后的可执行程序，也就是 main.exe(可执行文件),是放在代码段的</span><br></pre></td></tr></table></figure><p><img src="C:\Users\123\Desktop\记录本\图片\Snipaste_2023-03-26_12-32-10.png"></p><p>读取了代码段的某一条指令后，会交给译码器<br>来解析，这时候译码器就知道要做什么事情了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2.CPU中有一个PC指针始终指向代码段的命令，当指向的的命令被译码器读取之后</span><br><span class="line">就指向下一条要执行的命令</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">3.CPU 中的计算单元 加法器不能直接对栈上的某个变量 a，直接做加 1 操作的，需要首先将栈，也就是内存上的数据，加载到寄存器中，然后再用加法器做加 1 操作，再从寄存器搬到内存上去。</span><br><span class="line"></span><br><span class="line">原因是CPU读写寄存器的速度要比读写内存的速度快很多</span><br></pre></td></tr></table></figure><p><img src="C:\Users\123\Desktop\记录本\图片\Snipaste_2023-03-26_16-29-56.png"></p><p><img src="C:\Users\123\Desktop\记录本\图片\Snipaste_2023-03-26_16-31-17.png"></p><h2 id="2-生成汇编的方法"><a href="#2-生成汇编的方法" class="headerlink" title="2.生成汇编的方法"></a>2.生成汇编的方法</h2><p><img src="C:\Users\123\Desktop\记录本\图片\Snipaste_2023-03-26_12-49-39.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">main.obj文件里已经是机器码了</span><br><span class="line">还需要通过链接器，把里面调用的方法第三方库的&#x27;起始地址&#x27;链接进来</span><br></pre></td></tr></table></figure><h3 id="2-1-先配置环境变量"><a href="#2-1-先配置环境变量" class="headerlink" title="2.1.先配置环境变量"></a>2.1.先配置环境变量</h3><p><img src="C:\Users\123\Desktop\记录本\图片\Snipaste_2023-03-26_15-34-20.png"></p><h3 id="2-2-完成C代码的编写"><a href="#2-2-完成C代码的编写" class="headerlink" title="2.2.完成C代码的编写"></a>2.2.完成C代码的编写</h3><p><img src="C:\Users\123\Desktop\记录本\图片\Snipaste_2023-03-26_15-36-23.png"></p><p>生成汇编指令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc -S -fverbose-asm main.c</span><br></pre></td></tr></table></figure><p><img src="C:\Users\123\Desktop\记录本\图片\Snipaste_2023-03-26_16-02-44.png"><br><img src="C:\Users\123\Desktop\记录本\图片\Snipaste_2023-03-26_16-04-42.png"><br><img src="C:\Users\123\Desktop\记录本\图片\Snipaste_2023-03-26_16-04-51.png"></p><h2 id="3-汇编常用指令讲解"><a href="#3-汇编常用指令讲解" class="headerlink" title="3.汇编常用指令讲解"></a>3.汇编常用指令讲解</h2><p><a href="D:\408\C语言\高级\21课件\21.3【课件】汇编指令格式讲解-C语言转汇编方法讲解.pdf">pdf介绍</a></p><h4 id="标记：寄存器、内存、常数"><a href="#标记：寄存器、内存、常数" class="headerlink" title="标记：寄存器、内存、常数"></a>标记：寄存器、内存、常数</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> &lt;reg&gt;：表示任意寄存器，若其后带有数字，则指定其位数，如&lt;reg32&gt;表示 32 位</span><br><span class="line">寄存器（eax、ebx、ecx、edx、esi、edi、esp 或 ebp）；&lt;reg16&gt;表示 16 位寄存器</span><br><span class="line">（ax、bx、cx 或 dx）；&lt;reg8&gt;表示 8 位寄存器（ah、al、bh、bl、ch、cl、dh、dl）。</span><br><span class="line"> &lt;mem&gt;：表示内存地址（如[eax]、[var+4]或 dword ptr [eax+ebx]）。</span><br><span class="line"> &lt;con&gt;：表示 8 位、16 位或 32 位常数。&lt;con8&gt;表示 8 位常数；&lt;con16 &gt;表示 16 位</span><br></pre></td></tr></table></figure><h4 id="条件码"><a href="#条件码" class="headerlink" title="条件码"></a>条件码</h4><p><img src="C:\Users\123\Desktop\记录本\图片\Snipaste_2023-03-26_22-06-18.png"></p><p>判断溢出</p><p><img src="C:\Users\123\Desktop\记录本\图片\Snipaste_2023-03-26_16-43-08.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">例如</span><br><span class="line">0100 1111</span><br><span class="line">0100 1001  </span><br><span class="line">相加之后 最高位符号位，高位往符号位进了一位，但是，符号位没有进位，符号改变 溢出</span><br></pre></td></tr></table></figure><p><img src="C:\Users\123\Desktop\记录本\图片\Snipaste_2023-03-26_16-46-43.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">例如</span><br><span class="line">1000 0000</span><br><span class="line">1000 0000</span><br><span class="line">两个负数，相加，符号位进位，高位没有进位，符号由负变正，溢出</span><br></pre></td></tr></table></figure><p><img src="C:\Users\123\Desktop\记录本\图片\Snipaste_2023-03-26_16-49-56.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">例如</span><br><span class="line">1111 1111  -1</span><br><span class="line">1100 0000  -64  </span><br><span class="line">不溢出</span><br></pre></td></tr></table></figure><p><img src="C:\Users\123\Desktop\记录本\图片\Snipaste_2023-03-26_16-51-36.png"></p><p><img src="C:\Users\123\Desktop\记录本\图片\Snipaste_2023-03-26_16-51-01.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1-汇编指令格式&quot;&gt;&lt;a href=&quot;#1-汇编指令格式&quot; class=&quot;headerlink&quot; title=&quot;1.汇编指令格式&quot;&gt;&lt;/a&gt;1.汇编指令格式&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;C:\Users\123\Desktop\记录本\图片\Snipaste</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://example.com/undefined/0.html"/>
    <id>http://example.com/undefined/0.html</id>
    <published>2023-03-30T07:17:43.414Z</published>
    <updated>2023-03-26T14:00:08.659Z</updated>
    
    <content type="html"><![CDATA[<p><a href="D:\408\C语言\高级\21课件\21.4【课件】各种变量赋值汇编实战解析.pdf">pdf</a></p><h3 id="C语言代码"><a href="#C语言代码" class="headerlink" title="C语言代码"></a>C语言代码</h3><p><img src="C:\Users\123\Desktop\记录本\图片\Snipaste_2023-03-26_21-27-47.png"></p><p>从 main 标签位置开看即可。我们的 C 代码在让 CPU 去运行时， 其 实 所 有 的 变 量 名 都 已 经 消 失 了 ， 实 际 是 数 据 从 一个 空 间 ， 拿 到 另 一 个 空 间 的 过 程</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">```</span><br><span class="line">ESP ： 栈指针 寄存器 (extended stack pointer)，其内存放着一个 指针 ，该 指针 永远指向系统 栈 最上面一个 栈 帧的 栈 顶。 由于 栈 的地址大小是从上到下从大到小，所以 **ESP 指在 栈 的最底端**。</span><br><span class="line"></span><br><span class="line">EBP：基址指针寄存器 (extended base pointer)，其内存放着一个**指**针，该**指****针**永远指向系统**栈**最上面一个**栈****帧**的**底****部**</span><br><span class="line"></span><br><span class="line">![](C:\Users\123\Desktop\记录本\图片\InkedSnipaste_2023-03-26_21-26-37.jpg)</span><br></pre></td></tr></table></figure><pre><code>### C转为汇编分析![](C:\Users\123\Desktop\记录本\图片\Snipaste_2023-03-26_21-39-02.png)![](C:\Users\123\Desktop\记录本\图片\Snipaste_2023-03-26_21-39-21.png)![](C:\Users\123\Desktop\记录本\图片\Snipaste_2023-03-26_21-39-35.png)这一节大家理解变量赋值的汇编指令及原理即可，主 要 掌 握 的 指 令是 是 mov ， 还有 lea ，还有 PTR 。ptr -- pointer （既指针）得缩写。汇编里面 ptr 是规定 的 字 (既保留字)，是用来临时指定类型的。![](C:\Users\123\Desktop\记录本\图片\Snipaste_2023-03-26_21-51-40.png)</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;D:\408\C语言\高级\21课件\21.4【课件】各种变量赋值汇编实战解析.pdf&quot;&gt;pdf&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;C语言代码&quot;&gt;&lt;a href=&quot;#C语言代码&quot; class=&quot;headerlink&quot; title=&quot;C语言代码&quot;&gt;&lt;/a&gt;C语</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://example.com/undefined/0.html"/>
    <id>http://example.com/undefined/0.html</id>
    <published>2023-03-30T07:17:43.414Z</published>
    <updated>2023-03-19T06:44:59.295Z</updated>
    
    <content type="html"><![CDATA[<p><img src="C:\Users\123\Desktop\记录本\图片\Snipaste_2023-03-19_14-15-47.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">```</span><br><span class="line"></span><br><span class="line">![](C:\Users\123\Desktop\记录本\图片\Snipaste_2023-03-19_14-25-46.png)</span><br><span class="line"></span><br><span class="line">代码</span><br><span class="line">```c</span><br><span class="line">#include &lt;stdio.h&gt;  </span><br><span class="line">#include &lt;stdlib.h&gt;  </span><br><span class="line">#include &lt;time.h&gt;  </span><br><span class="line">  </span><br><span class="line">typedef int ElemType;  </span><br><span class="line">//定义顺序表结构体  </span><br><span class="line">typedef struct &#123;  </span><br><span class="line">    ElemType *str;  </span><br><span class="line">    int len;  </span><br><span class="line">&#125;SSTable;  </span><br><span class="line">//顺序表初始化，添加随机数  </span><br><span class="line">void init_table(SSTable &amp;SST,int len)&#123;  </span><br><span class="line">    srand(time(NULL));  </span><br><span class="line">    SST.len=len;  </span><br><span class="line">    SST.str=(ElemType*)malloc(sizeof (ElemType)*SST.len);  </span><br><span class="line">    int i;  </span><br><span class="line">    for(i=0;i&lt;SST.len;i++)&#123;  </span><br><span class="line">        SST.str[i]=rand()%100;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">//打印顺序表  </span><br><span class="line">void print_table(SSTable SST)&#123;  </span><br><span class="line">    int i;  </span><br><span class="line">    for(i=0;i&lt;SST.len;i++)&#123;  </span><br><span class="line">        printf(&quot;%3d&quot;,SST.str[i]);  </span><br><span class="line">    &#125;  </span><br><span class="line">    printf(&quot;\n&quot;);  </span><br><span class="line">&#125;  </span><br><span class="line">//交换两个元素的方法  </span><br><span class="line">void swap(ElemType &amp;a,ElemType &amp;b)&#123;  </span><br><span class="line">    ElemType temp;  </span><br><span class="line">    temp=a;  </span><br><span class="line">    a=b;  </span><br><span class="line">    b=temp;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line">//选择排序方法  </span><br><span class="line">void select_sort(ElemType *A,int n)&#123;  </span><br><span class="line">    int min,i,j;  </span><br><span class="line">    for(i=0;i&lt;n-1;i++)&#123;//外循环,i只需要进行n-1轮就可以了  </span><br><span class="line">        min=i;  </span><br><span class="line">        for(j=min+1;j&lt;n;j++)&#123;//内循环，j从左到右遍历最小  </span><br><span class="line">            if(A[j]&lt;A[min])&#123;//找到更小的  </span><br><span class="line">                min=j;//交换下标数，意味着j下标表示的数更小，j赋值给min  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">        swap(A[i],A[min]);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line">int main() &#123;  </span><br><span class="line">    SSTable T;//定义顺序表  </span><br><span class="line">    init_table(T,10);//初始化  </span><br><span class="line">    print_table(T);//打印  </span><br><span class="line">  </span><br><span class="line">    select_sort(T.str,10);//选择排序  </span><br><span class="line">    print_table(T);//再次打印，看排序效果  </span><br><span class="line">    return 0;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行效果<br><img src="C:\Users\123\Desktop\记录本\图片\Snipaste_2023-03-19_14-40-09.png"></p><p><img src="C:\Users\123\Desktop\记录本\图片\Snipaste_2023-03-19_14-44-38.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;C:\Users\123\Desktop\记录本\图片\Snipaste_2023-03-19_14-15-47.png&quot;&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gu</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://example.com/undefined/0.html"/>
    <id>http://example.com/undefined/0.html</id>
    <published>2023-03-30T07:17:43.398Z</published>
    <updated>2023-03-20T13:31:37.235Z</updated>
    
    <content type="html"><![CDATA[<p><a href="D:\408\C语言\中阶\17课件\17.4【课件】堆排序原理解析【公众号：思雨考研】.pdf">pdf</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">实际上就是一个数组，并不是真正意义的树</span><br><span class="line">就是把数组，想象成一个树</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">若父结点的值恒大于等于子结点的值，则该堆称为最大堆（max heap）。堆中最顶端的那个结点称为根结点（root node），根结点本身没有父结点（parent node）。平时在工作中，我们将最小堆称为小根堆或小顶堆，把最大堆称为大根堆或大顶堆</span><br></pre></td></tr></table></figure><p><img src="C:\Users\123\Desktop\记录本\图片\Snipaste_2023-03-19_15-13-04.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">堆排序步骤：</span><br><span class="line">堆排序的步骤是首先把堆调整为大根堆，然后我们交换根部元素也就是A[0]，和最后一个元素，这</span><br><span class="line">样最大的元素就放到了数组最后，接着我们将剩余 9 个元素继续调整为大根堆，然后交换 A[0]和</span><br><span class="line">9 个元素的最后一个，循环往复，直到有序</span><br></pre></td></tr></table></figure><p>步骤示意<br><img src="C:\Users\123\Desktop\记录本\图片\Snipaste_2023-03-19_17-08-24.png"></p><p>示例<br><img src="C:\Users\123\Desktop\记录本\图片\Snipaste_2023-03-19_17-52-17.png"></p><p><img src="C:\Users\123\Desktop\记录本\图片\Snipaste_2023-03-19_17-04-14.png"></p><p>代码实现</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;time.h&gt;</span>  </span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> ElemType;  </span><br><span class="line"><span class="comment">//定义顺序表结构体  </span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span>  </span><br><span class="line">    ElemType *str;  </span><br><span class="line">    <span class="type">int</span> len;  </span><br><span class="line">&#125;SSTable;  </span><br><span class="line"><span class="comment">//顺序表初始化，添加随机数  </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">init_table</span><span class="params">(SSTable &amp;SST,<span class="type">int</span> len)</span>&#123;  </span><br><span class="line">    srand(time(<span class="literal">NULL</span>));  </span><br><span class="line">    SST.len=len;  </span><br><span class="line">    SST.str=(ElemType*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span> (ElemType)*SST.len);  </span><br><span class="line">    <span class="type">int</span> i;  </span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;SST.len;i++)&#123;  </span><br><span class="line">        SST.str[i]=rand()%<span class="number">100</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="comment">//打印顺序表  </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">print_table</span><span class="params">(SSTable SST)</span>&#123;  </span><br><span class="line">    <span class="type">int</span> i;  </span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;SST.len;i++)&#123;  </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%3d&quot;</span>,SST.str[i]);  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="comment">//交换两个元素的方法  </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">swap</span><span class="params">(ElemType &amp;a,ElemType &amp;b)</span>&#123;  </span><br><span class="line">    ElemType temp;  </span><br><span class="line">    temp=a;  </span><br><span class="line">    a=b;  </span><br><span class="line">    b=temp;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//调整单个子树为大根堆的方法  </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">adjust_down1</span><span class="params">(ElemType A[],<span class="type">int</span> k,<span class="type">int</span> len)</span>&#123;<span class="comment">//k表示父节点位置，开始调整的位置  </span></span><br><span class="line">    <span class="type">int</span> dad=k;<span class="comment">//父节点的下标  </span></span><br><span class="line">    <span class="type">int</span> son=<span class="number">2</span>*dad+<span class="number">1</span>;<span class="comment">//子节点的下标  </span></span><br><span class="line">    <span class="keyword">while</span>(son&lt;len)&#123;  </span><br><span class="line">        <span class="keyword">if</span>(son+<span class="number">1</span>&lt;len&amp;&amp;A[son]&lt;A[son+<span class="number">1</span>])&#123;<span class="comment">//左节点应该比右结点小,son+1且不能越界  </span></span><br><span class="line">            son++;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">if</span>(A[dad]&lt;A[son])&#123;  </span><br><span class="line">            swap(A[son],A[dad]);  </span><br><span class="line">            dad=son;  </span><br><span class="line">            son=<span class="number">2</span>*dad+<span class="number">1</span>;  </span><br><span class="line">        &#125; <span class="keyword">else</span>&#123;  </span><br><span class="line">            <span class="keyword">break</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//堆排序的方法  </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">heap_sort</span><span class="params">(ElemType *A,<span class="type">int</span> len)</span>&#123;  </span><br><span class="line">    <span class="type">int</span> i;  </span><br><span class="line">    <span class="keyword">for</span>(i=len/<span class="number">2</span><span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)&#123;<span class="comment">//从最末尾的子树开始一个一个向前调整为大根堆  </span></span><br><span class="line">        adjust_down1(A,i,len);  </span><br><span class="line">    &#125;  </span><br><span class="line">    swap(A[<span class="number">0</span>],A[len<span class="number">-1</span>]);<span class="comment">//交换根结点和尾结点  </span></span><br><span class="line">    <span class="keyword">for</span>(i=len<span class="number">-1</span>;i&gt;<span class="number">1</span>;i--)&#123;<span class="comment">//剩余的数组进入循环  </span></span><br><span class="line">        adjust_down1(A,<span class="number">0</span>,i);<span class="comment">//从根结点开始重新调整为大堆根,此时数组长度变化-1  </span></span><br><span class="line">        swap(A[<span class="number">0</span>],A[i<span class="number">-1</span>]);<span class="comment">//交换根结点  </span></span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;  </span><br><span class="line">    SSTable T;  </span><br><span class="line">    init_table(T,<span class="number">10</span>);  </span><br><span class="line">    print_table(T);  </span><br><span class="line">  </span><br><span class="line">    heap_sort(T.str,<span class="number">10</span>);  </span><br><span class="line">    print_table(T);  </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行效果<br><img src="C:\Users\123\Desktop\记录本\图片\Snipaste_2023-03-19_17-53-54.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;D:\408\C语言\中阶\17课件\17.4【课件】堆排序原理解析【公众号：思雨考研】.pdf&quot;&gt;pdf&lt;/a&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://example.com/undefined/0.html"/>
    <id>http://example.com/undefined/0.html</id>
    <published>2023-03-30T07:17:43.398Z</published>
    <updated>2023-03-18T09:19:34.442Z</updated>
    
    <content type="html"><![CDATA[<p><img src="C:\Users\123\Desktop\记录本\图片\Snipaste_2023-03-18_15-37-22.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">一个顺序表</span><br><span class="line">以第一个数为基准</span><br><span class="line">定义两个指针i j</span><br><span class="line">i从左往右找比3大的数，i停止</span><br><span class="line">j从右往左找比3小的数，j停止</span><br><span class="line">然后i j 对应的数完成一次交换，i j 继续前进</span><br><span class="line">循环..直到ij相遇</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>代码实战</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;time.h&gt;</span>  </span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> ElemType;  </span><br><span class="line"><span class="comment">//定义顺序表结构体  </span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span>  </span><br><span class="line">    ElemType *str;  </span><br><span class="line">    <span class="type">int</span> len;  </span><br><span class="line">&#125;SSTable;  </span><br><span class="line"><span class="comment">//顺序表添加随机数  </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">init_table</span><span class="params">(SSTable &amp;SST,<span class="type">int</span> len)</span>&#123;  </span><br><span class="line">    srand(time(<span class="literal">NULL</span>));  </span><br><span class="line">    SST.len=len;  </span><br><span class="line">    SST.str=(ElemType*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span> (ElemType)*SST.len);  </span><br><span class="line">    <span class="type">int</span> i;  </span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;SST.len;i++)&#123;  </span><br><span class="line">        SST.str[i]=rand()%<span class="number">100</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="comment">//打印顺序表  </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">print_table</span><span class="params">(SSTable SST)</span>&#123;  </span><br><span class="line">    <span class="type">int</span> i;  </span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;SST.len;i++)&#123;  </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%3d&quot;</span>,SST.str[i]);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//分割方法  </span></span><br><span class="line"><span class="type">int</span> <span class="title function_">partition</span><span class="params">(ElemType *str,<span class="type">int</span> low,<span class="type">int</span> high)</span>&#123;  </span><br><span class="line">    <span class="type">int</span> temp;<span class="comment">//用于存放分割界限数(选取数组第一个数）  </span></span><br><span class="line">    temp=str[low];<span class="comment">//相当于将low位置外一个坑，先让high往前放入元素  </span></span><br><span class="line">    <span class="keyword">while</span>(low&lt;high)&#123;  </span><br><span class="line">        <span class="comment">//右指针用来找比分割数小的数  </span></span><br><span class="line">        <span class="comment">//停了说明找到了  </span></span><br><span class="line">        <span class="keyword">while</span>(low&lt;high&amp;&amp;str[high]&gt;=temp)&#123;  </span><br><span class="line">            high--;<span class="comment">//移动  </span></span><br><span class="line">        &#125;  </span><br><span class="line">        str[low]=str[high];<span class="comment">//将找到的值给str[low],因为这时的str[low]赋给了temp  </span></span><br><span class="line">        <span class="comment">//左指针，用来找比分割数大的数  </span></span><br><span class="line">        <span class="keyword">while</span>(low&lt;high&amp;&amp;str[low]&lt;=temp)&#123;  </span><br><span class="line">            low++;  </span><br><span class="line">        &#125;  </span><br><span class="line">        str[high]=str[low];  </span><br><span class="line">    &#125;  </span><br><span class="line">    str[low]=temp;<span class="comment">//结束时，low位置是空的  </span></span><br><span class="line">    <span class="keyword">return</span> low;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//快速排序方法  </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">quick_sort</span><span class="params">(ElemType *str,<span class="type">int</span> low,<span class="type">int</span> high)</span>&#123;  </span><br><span class="line">    <span class="keyword">if</span>(low&lt;high) &#123;<span class="comment">//low high用来限定分割的范围  </span></span><br><span class="line">        <span class="type">int</span> postion = partition(str, low, high);<span class="comment">//partition方法是核心方法，是每一次分割的方法  </span></span><br><span class="line">        quick_sort(str, low, postion - <span class="number">1</span>);<span class="comment">//递归左边的数组  </span></span><br><span class="line">        quick_sort(str, postion + <span class="number">1</span>, high);<span class="comment">//递归数组右边  </span></span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;  </span><br><span class="line">    SSTable T;  </span><br><span class="line">    <span class="type">int</span> len=<span class="number">9</span>;  </span><br><span class="line">    init_table(T,len);  </span><br><span class="line">    print_table(T);  </span><br><span class="line">  </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);  </span><br><span class="line">    quick_sort(T.str,<span class="number">0</span>,T.len<span class="number">-1</span>);  </span><br><span class="line">    print_table(T);  </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>时间复杂与空间复杂度<br><img src="C:\Users\123\Desktop\记录本\图片\Snipaste_2023-03-18_17-18-41.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;C:\Users\123\Desktop\记录本\图片\Snipaste_2023-03-18_15-37-22.png&quot;&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gu</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://example.com/undefined/0.html"/>
    <id>http://example.com/undefined/0.html</id>
    <published>2023-03-30T07:17:43.398Z</published>
    <updated>2023-03-20T13:33:52.124Z</updated>
    
    <content type="html"><![CDATA[<p><a href="D:\408\C语言\中阶\17课件\17.6【课件】归并排序原理及实战【公众号：思雨考研】.pdf">pdf</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">归并排序是我们不断进行二分，最终各自剩余 1 个元素，自然有序，然后先将每两个元</span><br><span class="line">素进行合并，变为有序，然后再将两个小组合并，变为有序，循环往复，直到整个数组有序</span><br></pre></td></tr></table></figure><p><img src="C:\Users\123\Desktop\记录本\图片\Snipaste_2023-03-19_21-55-33.png"><br><img src="C:\Users\123\Desktop\记录本\图片\Snipaste_2023-03-19_21-59-48.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">递归到最底部后，开始层层merge，low,high,mid任然对应分组时的位置</span><br></pre></td></tr></table></figure><p><img src="C:\Users\123\Desktop\记录本\图片\Snipaste_2023-03-20_21-23-30.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">merge的时候，需要三个指针,i指向A的有序的前半段，j指向A有序的后半段，k指向放入的数组的当前位置</span><br><span class="line"></span><br><span class="line">1、将A[] 元素全部复制放到B[] ，i ,j分别对应low\mid+1起始位置，k=i.</span><br><span class="line"></span><br><span class="line">2、i j 先比较，小的放入A[k],i++,j不动，k++</span><br><span class="line"></span><br><span class="line">3、直到有剩余，i到头了，j还没到头;或者j到头了，i还没到头。while循环将剩余的全部放入,k随着++</span><br></pre></td></tr></table></figure><p>代码如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;time.h&gt;</span>  </span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> ElemType;  </span><br><span class="line"><span class="comment">//定义顺序表结构体  </span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span>  </span><br><span class="line">    ElemType *str;  </span><br><span class="line">    <span class="type">int</span> len;  </span><br><span class="line">&#125;SSTable;  </span><br><span class="line"><span class="comment">//顺序表初始化，添加随机数  </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">init_table</span><span class="params">(SSTable &amp;SST,<span class="type">int</span> len)</span>&#123;  </span><br><span class="line">    srand(time(<span class="literal">NULL</span>));  </span><br><span class="line">    SST.len=len;  </span><br><span class="line">    SST.str=(ElemType*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span> (ElemType)*SST.len);  </span><br><span class="line">    <span class="type">int</span> i;  </span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;SST.len;i++)&#123;  </span><br><span class="line">        SST.str[i]=rand()%<span class="number">100</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="comment">//打印顺序表  </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">print_table</span><span class="params">(SSTable SST)</span>&#123;  </span><br><span class="line">    <span class="type">int</span> i;  </span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;SST.len;i++)&#123;  </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%3d&quot;</span>,SST.str[i]);  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="comment">//交换两个元素的方法  </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">swap</span><span class="params">(ElemType &amp;a,ElemType &amp;b)</span>&#123;  </span><br><span class="line">    ElemType temp;  </span><br><span class="line">    temp=a;  </span><br><span class="line">    a=b;  </span><br><span class="line">    b=temp;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//合并方法  </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">merge</span><span class="params">(ElemType A[],<span class="type">int</span> low,<span class="type">int</span> mid,<span class="type">int</span> high)</span>&#123;  </span><br><span class="line">    <span class="comment">//用额外的空间存放，避免原数组交换次数过多  </span></span><br><span class="line">    <span class="comment">//static修饰防止递归时，重复加载  </span></span><br><span class="line">    <span class="comment">//因为申请了额外的空间，所以空间复杂度是O(n),n是元素个数  </span></span><br><span class="line">    <span class="type">static</span> ElemType B[<span class="number">10</span>];  </span><br><span class="line">    <span class="type">int</span> i,j,k;  </span><br><span class="line">    <span class="keyword">for</span>(k=low;k&lt;=high;k++)&#123;<span class="comment">//复制元素到B中  </span></span><br><span class="line">        B[k]=A[k];  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">for</span>(i=low,j=mid+<span class="number">1</span>,k=i;i&lt;=mid&amp;&amp;j&lt;=high;k++) &#123;<span class="comment">//合并两个有序数组  </span></span><br><span class="line">        <span class="keyword">if</span> (B[i] &lt;= B[j]) &#123;  </span><br><span class="line">            A[k] = B[i];  </span><br><span class="line">            i++;  </span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">            A[k] = B[j];  </span><br><span class="line">            j++;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">while</span> (i &lt;= mid) &#123;<span class="comment">//如果左半边数组有剩余接着放入  </span></span><br><span class="line">        A[k] = B[i];  </span><br><span class="line">        k++;  </span><br><span class="line">        i++;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">while</span> (j &lt;= high) &#123;<span class="comment">//如果右半边数组有剩余接着放入  </span></span><br><span class="line">        A[k] = B[j];  </span><br><span class="line">        k++;  </span><br><span class="line">        j++;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//归并排序方法  </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">merge_sort</span><span class="params">(ElemType A[],<span class="type">int</span> low,<span class="type">int</span> high)</span>&#123;  </span><br><span class="line">    <span class="keyword">if</span>(low&lt;high) &#123;  </span><br><span class="line">        <span class="type">int</span> mid = (low + high) / <span class="number">2</span>;  </span><br><span class="line">        merge_sort(A, low, mid);  </span><br><span class="line">        merge_sort(A, mid+<span class="number">1</span>,high);  </span><br><span class="line">        merge(A,low,mid,high);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;  </span><br><span class="line">    SSTable T;  </span><br><span class="line">    init_table(T,<span class="number">10</span>);  </span><br><span class="line">    print_table(T);  </span><br><span class="line">  </span><br><span class="line">    merge_sort(T.str,<span class="number">0</span>,<span class="number">9</span>);  </span><br><span class="line">    print_table(T);  </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">MergeSort 函数的递归 次数是 log 2 n， Merge 函数的循环了 n 次， 因此时间复杂度是 O(nlog 2 n)。</span><br><span class="line">归并排序最好、最坏、平均时间复杂度都是 O(nlog 2 n)。</span><br><span class="line">归并排序的空间复杂度是 O(n)，因为使用了数组 B，它的大小与 A 一样，占用 n 个元素的</span><br><span class="line">空间。</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;D:\408\C语言\中阶\17课件\17.6【课件】归并排序原理及实战【公众号：思雨考研】.pdf&quot;&gt;pdf&lt;/a&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://example.com/undefined/0.html"/>
    <id>http://example.com/undefined/0.html</id>
    <published>2023-03-30T07:17:43.398Z</published>
    <updated>2023-03-20T13:43:18.378Z</updated>
    
    <content type="html"><![CDATA[<p><img src="C:\Users\123\Desktop\记录本\图片\Snipaste_2023-03-20_21-42-39.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;C:\Users\123\Desktop\记录本\图片\Snipaste_2023-03-20_21-42-39.png&quot;&gt;&lt;/p&gt;
</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://example.com/undefined/0.html"/>
    <id>http://example.com/undefined/0.html</id>
    <published>2023-03-30T07:17:43.398Z</published>
    <updated>2023-03-19T07:55:03.389Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">排序算法分为 交换类排序、插入类排序、选择类排序、归并类排序</span><br><span class="line"></span><br><span class="line">交换类排序</span><br><span class="line"></span><br><span class="line">冒泡排序</span><br><span class="line">初冒泡排序,一般靠选择题，考大题几率小</span><br><span class="line">快速排序</span><br><span class="line">更重要，考大题</span><br><span class="line"></span><br><span class="line">插入类排序</span><br><span class="line"></span><br><span class="line">直接插入</span><br><span class="line"></span><br><span class="line">折半插入</span><br><span class="line"></span><br><span class="line">希尔排序，以上三种插入算法，一般考选择题，考大题概率低</span><br><span class="line">选择排序</span><br><span class="line"></span><br><span class="line">简单选择排序</span><br><span class="line"></span><br><span class="line">堆排序(重要)</span><br><span class="line">很有可能考大题</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span c</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://example.com/undefined/0.html"/>
    <id>http://example.com/undefined/0.html</id>
    <published>2023-03-30T07:17:43.398Z</published>
    <updated>2023-03-20T13:36:52.621Z</updated>
    
    <content type="html"><![CDATA[<p>原理<br><img src="C:\Users\123\Desktop\记录本\图片\Snipaste_2023-03-18_17-27-16.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">一般用于部分有序的场景，例如本来有序的数组，要插入一个数字，没必要放到数组末尾，重新排序</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="C:\Users\123\Desktop\记录本\图片\Snipaste_2023-03-18_18-31-22.png"></p><p><img src="C:\Users\123\Desktop\记录本\图片\Snipaste_2023-03-18_18-41-42.png"></p><p><img src="C:\Users\123\Desktop\记录本\图片\Snipaste_2023-03-18_20-42-55.png"></p><p>代码实现</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;time.h&gt;</span>  </span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> ElemType;  </span><br><span class="line"><span class="comment">//定义顺序表结构体  </span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span>  </span><br><span class="line">    ElemType *str;  </span><br><span class="line">    <span class="type">int</span> len;  </span><br><span class="line">&#125;SSTable;  </span><br><span class="line"><span class="comment">//顺序表添加随机数  </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">init_table</span><span class="params">(SSTable &amp;SST,<span class="type">int</span> len)</span>&#123;  </span><br><span class="line">    srand(time(<span class="literal">NULL</span>));  </span><br><span class="line">    SST.len=len;  </span><br><span class="line">    SST.str=(ElemType*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span> (ElemType)*SST.len);  </span><br><span class="line">    <span class="type">int</span> i;  </span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;SST.len;i++)&#123;  </span><br><span class="line">        SST.str[i]=rand()%<span class="number">100</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="comment">//打印顺序表  </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">print_table</span><span class="params">(SSTable SST)</span>&#123;  </span><br><span class="line">    <span class="type">int</span> i;  </span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;SST.len;i++)&#123;  </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%3d&quot;</span>,SST.str[i]);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//插入排序方法  </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">insert_sort</span><span class="params">(ElemType *str,<span class="type">int</span> n)</span>&#123; <span class="comment">//n为数组长度 </span></span><br><span class="line">    <span class="type">int</span> i,j,temp;  </span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;n;i++)&#123;  </span><br><span class="line">        temp=str[i];  </span><br><span class="line">        <span class="keyword">for</span>(j=i<span class="number">-1</span>;j&gt;=<span class="number">0</span>&amp;&amp;str[j]&gt;temp;j--)&#123;<span class="comment">//将比插入的数大的全部往后移一格  </span></span><br><span class="line">            str[j+<span class="number">1</span>]=str[j];  </span><br><span class="line">        &#125;  </span><br><span class="line">        str[j+<span class="number">1</span>]=temp;<span class="comment">//j来到了插入位置，将temp插入  </span></span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;  </span><br><span class="line">    SSTable T;  </span><br><span class="line">    <span class="type">int</span> len=<span class="number">9</span>;  </span><br><span class="line">    init_table(T,len);  </span><br><span class="line">    print_table(T);  </span><br><span class="line">  </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);  </span><br><span class="line">    insert_sort(T.str,<span class="number">9</span>);  </span><br><span class="line">    print_table(T);  </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="C:\Users\123\Desktop\记录本\图片\Snipaste_2023-03-20_21-36-31.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;原理&lt;br&gt;&lt;img src=&quot;C:\Users\123\Desktop\记录本\图片\Snipaste_2023-03-18_17-27-16.png&quot;&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td cla</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://example.com/undefined/0.html"/>
    <id>http://example.com/undefined/0.html</id>
    <published>2023-03-30T07:17:43.383Z</published>
    <updated>2023-03-17T13:22:52.587Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span>  <span class="comment">//</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span>  </span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> ElemType;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">BSNode</span>&#123;</span>  </span><br><span class="line">    ElemType key;  </span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">BSNode</span> *<span class="title">left</span>,*<span class="title">righr</span>;</span>  </span><br><span class="line">&#125;BSNode,*BiTree;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//插入元素的方法  </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">BST_insert</span><span class="params">(BiTree &amp;T,ElemType k)</span>&#123;  </span><br><span class="line">    <span class="keyword">if</span>(T==<span class="literal">NULL</span>)&#123;  </span><br><span class="line">        T=(BiTree) <span class="built_in">calloc</span>(<span class="number">1</span>,<span class="keyword">sizeof</span> (BSNode));  </span><br><span class="line">        T-&gt;key=k;  </span><br><span class="line">    &#125;  </span><br><span class="line">    BiTree p=T;  </span><br><span class="line">    BiTree parent;  </span><br><span class="line">    <span class="keyword">while</span>(p)&#123;  </span><br><span class="line">        parent=p;  </span><br><span class="line">        <span class="keyword">if</span>(k==p-&gt;key)&#123;  </span><br><span class="line">            <span class="keyword">return</span>;  </span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(k&lt;p-&gt;key)&#123;  </span><br><span class="line">            p=p-&gt;left;  </span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;  </span><br><span class="line">            p=p-&gt;righr;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="comment">//申请要加入元素的新节点空间  </span></span><br><span class="line">    BiTree pnew;  </span><br><span class="line">    pnew=(BiTree) <span class="built_in">calloc</span>(<span class="number">1</span>,<span class="keyword">sizeof</span> (BSNode));  </span><br><span class="line">    pnew-&gt;key=k;  </span><br><span class="line">    <span class="keyword">if</span>(k&lt;parent-&gt;key)&#123;  </span><br><span class="line">        parent-&gt;left=pnew;  </span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;  </span><br><span class="line">        parent-&gt;righr=pnew;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//创建二叉查找树的方法  </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">creat_BSTree</span><span class="params">(BiTree &amp;T,ElemType str[],<span class="type">int</span> n)</span>&#123;  </span><br><span class="line">    T=<span class="literal">NULL</span>;  </span><br><span class="line">    <span class="type">int</span> i;  </span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)&#123;  </span><br><span class="line">        BST_insert(T,str[i]);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//中序遍历打印二叉树  </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">InOrder</span><span class="params">(BiTree T)</span>&#123;  </span><br><span class="line">    <span class="keyword">if</span>(T!=<span class="literal">NULL</span>)&#123;  </span><br><span class="line">        InOrder(T-&gt;left);  </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%3d&quot;</span>,T-&gt;key);  </span><br><span class="line">        InOrder(T-&gt;righr);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//二叉树的查找方法  </span></span><br><span class="line">BiTree <span class="title function_">BS_Search</span><span class="params">(BiTree T,ElemType key)</span>&#123;  </span><br><span class="line">    <span class="keyword">while</span>(T!=<span class="literal">NULL</span>&amp;&amp;key!=T-&gt;key)&#123;  </span><br><span class="line">        <span class="keyword">if</span>(key&lt;T-&gt;key)&#123;  </span><br><span class="line">            T=T-&gt;left;  </span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;  </span><br><span class="line">            T=T-&gt;righr;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> T;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//删除二叉排序树元素的方法  </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">delete_BSNode</span><span class="params">(BiTree &amp;root,ElemType x)</span>&#123;  </span><br><span class="line">    <span class="keyword">if</span>(root==<span class="literal">NULL</span>)&#123;  </span><br><span class="line">        <span class="keyword">return</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">if</span>(x&lt;root-&gt;key)&#123;  </span><br><span class="line">        delete_BSNode(root-&gt;left,x);  </span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(x&gt;root-&gt;key)&#123;  </span><br><span class="line">        delete_BSNode(root-&gt;righr,x);  </span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;<span class="comment">//查找到了要删的结点  </span></span><br><span class="line">        <span class="comment">//如果左子树为空，右结点顶上去  </span></span><br><span class="line">        <span class="keyword">if</span>(root-&gt;left==<span class="literal">NULL</span>)&#123;  </span><br><span class="line">            BiTree tempNode=root;  </span><br><span class="line">            root=root-&gt;righr;  </span><br><span class="line">            <span class="built_in">free</span>(tempNode);  </span><br><span class="line">            <span class="comment">//如果右子树为空，左节点顶上去  </span></span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(root-&gt;righr==<span class="literal">NULL</span>)&#123;  </span><br><span class="line">            BiTree tempNode=root;  </span><br><span class="line">            root=root-&gt;left;  </span><br><span class="line">            <span class="built_in">free</span>(tempNode);  </span><br><span class="line">            <span class="comment">//如果左右子树都不为空  </span></span><br><span class="line">            <span class="comment">//1-左子树最大顶上去；2-右子树最下顶上去  </span></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;  </span><br><span class="line">            BiTree p=root-&gt;left;<span class="comment">//遍历左子树，寻找左子树最大  </span></span><br><span class="line">            <span class="keyword">while</span>(p-&gt;righr!=<span class="literal">NULL</span>)&#123;  </span><br><span class="line">                p=p-&gt;righr;  </span><br><span class="line">            &#125;  </span><br><span class="line">            root-&gt;key=p-&gt;key;<span class="comment">//将p的值赋给root  </span></span><br><span class="line">            <span class="comment">//然后删除p  </span></span><br><span class="line">            delete_BSNode(root-&gt;left,p-&gt;key);  </span><br><span class="line">                <span class="comment">//这里得从左子树找，因为root的key也是和p一样  </span></span><br><span class="line">                <span class="comment">//这样可以略过根结点  </span></span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;  </span><br><span class="line">  </span><br><span class="line">    BiTree T;  </span><br><span class="line">    ElemType str[<span class="number">8</span>]=&#123;<span class="number">13</span>,<span class="number">4</span>,<span class="number">56</span>,<span class="number">7</span>,<span class="number">23</span>,<span class="number">7</span>,<span class="number">95</span>,<span class="number">48</span>&#125;;  </span><br><span class="line">    ElemType key;  </span><br><span class="line">  </span><br><span class="line">    creat_BSTree(T,str,<span class="number">8</span>);  </span><br><span class="line">    InOrder(T);  </span><br><span class="line">    ElemType x;  </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\ndelet 23\n&quot;</span>);  </span><br><span class="line">  </span><br><span class="line">    delete_BSNode(T,<span class="number">23</span>);  </span><br><span class="line">    InOrder(T);  </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;li</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://example.com/undefined/0.html"/>
    <id>http://example.com/undefined/0.html</id>
    <published>2023-03-30T07:17:43.383Z</published>
    <updated>2023-03-18T13:55:57.456Z</updated>
    
    <content type="html"><![CDATA[<p><img src="C:\Users\123\Desktop\记录本\图片\Snipaste_2023-03-18_21-02-34.png"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;time.h&gt;</span>  </span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> ElemType;  </span><br><span class="line"><span class="comment">//定义顺序表结构体  </span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span>  </span><br><span class="line">    ElemType *str;  </span><br><span class="line">    <span class="type">int</span> len;  </span><br><span class="line">&#125;SSTable;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//初始化顺序表，手动输入十个数  </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">init_table</span><span class="params">(SSTable &amp;T)</span>&#123;  </span><br><span class="line">    <span class="type">int</span> i;  </span><br><span class="line">    <span class="type">int</span> x;  </span><br><span class="line">    T.str=(ElemType*) <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(ElemType)*T.len);  </span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;T.len;i++)&#123;  </span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x);  </span><br><span class="line">        T.str[i]=x;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//打印顺序表  </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">print_table</span><span class="params">(SSTable SST)</span>&#123;  </span><br><span class="line">    <span class="type">int</span> i;  </span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;SST.len;i++)&#123;  </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%3d&quot;</span>,SST.str[i]);  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="comment">//================================================================================  </span></span><br><span class="line"><span class="comment">//交换的方法  </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span> &amp;a,<span class="type">int</span> &amp;b)</span>&#123;  </span><br><span class="line">    <span class="type">int</span> temp;  </span><br><span class="line">    temp=a;  </span><br><span class="line">    a=b;  </span><br><span class="line">    b=temp;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//冒泡排序算法  </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">bubble_sort</span><span class="params">(SSTable &amp;T)</span>&#123;  </span><br><span class="line">    <span class="type">int</span> i,j;  </span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;T.len<span class="number">-1</span>;i++)&#123;  </span><br><span class="line">        <span class="keyword">for</span>(j=T.len<span class="number">-1</span>;j&gt;i;j--)&#123;  </span><br><span class="line">            <span class="keyword">if</span>(T.str[j]&gt;T.str[j<span class="number">-1</span>])&#123;  </span><br><span class="line">                swap(T.str[j],T.str[j<span class="number">-1</span>]);  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="comment">//==============================================================================</span></span><br><span class="line"><span class="comment">//分割方法  </span></span><br><span class="line"><span class="type">int</span> <span class="title function_">split</span><span class="params">(SSTable &amp;T,<span class="type">int</span> low,<span class="type">int</span> high)</span>&#123;  </span><br><span class="line">    <span class="type">int</span> temp;  </span><br><span class="line">    temp=T.str[low];  </span><br><span class="line">    <span class="keyword">while</span>(low&lt;high)&#123;  </span><br><span class="line">        <span class="keyword">while</span>(low&lt;high&amp;&amp;T.str[high]&gt;=temp)&#123;  </span><br><span class="line">            high--;  </span><br><span class="line">        &#125;  </span><br><span class="line">        T.str[low]=T.str[high];  </span><br><span class="line">        <span class="keyword">while</span>(low&lt;high&amp;&amp;T.str[low]&lt;=temp)&#123;  </span><br><span class="line">            low++;  </span><br><span class="line">        &#125;  </span><br><span class="line">        T.str[high]=T.str[low];  </span><br><span class="line">    &#125;  </span><br><span class="line">    T.str[low]=temp;  </span><br><span class="line">    <span class="keyword">return</span> low;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//快速排序法  </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">quick_sort</span><span class="params">(SSTable &amp;T,<span class="type">int</span> low,<span class="type">int</span> high)</span>&#123;  </span><br><span class="line">    <span class="keyword">if</span>(low&lt;high)&#123;  </span><br><span class="line">       <span class="type">int</span> pos;  </span><br><span class="line">       pos= split(T,low,high);  </span><br><span class="line">        quick_sort(T,low,pos<span class="number">-1</span>);  </span><br><span class="line">        quick_sort(T,pos+<span class="number">1</span>,high);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//================================================================================ </span></span><br><span class="line"><span class="comment">//插入排序方法  </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">insert_sort</span><span class="params">(SSTable &amp;T)</span>&#123;  </span><br><span class="line">    <span class="type">int</span> i,j,temp;  </span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;T.len;i++)&#123;  </span><br><span class="line">        temp=T.str[i];  </span><br><span class="line">        <span class="keyword">for</span>(j=i<span class="number">-1</span>;j&gt;=<span class="number">0</span>&amp;&amp;T.str[j]&gt;temp;j--)&#123;  </span><br><span class="line">            T.str[j+<span class="number">1</span>]=T.str[j];  </span><br><span class="line">        &#125;  </span><br><span class="line">        T.str[j+<span class="number">1</span>]=temp;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;  </span><br><span class="line">    SSTable SST;  </span><br><span class="line">    SST.len=<span class="number">10</span>;  </span><br><span class="line">    init_table(SST);  </span><br><span class="line">    print_table(SST);  </span><br><span class="line">  </span><br><span class="line"><span class="comment">/*  </span></span><br><span class="line"><span class="comment"> * //冒泡排序  </span></span><br><span class="line"><span class="comment">    bubble_sort(SST);    print_table(SST);*/</span>  </span><br><span class="line">  </span><br><span class="line"><span class="comment">/*  </span></span><br><span class="line"><span class="comment">    //快速排序  </span></span><br><span class="line"><span class="comment">    quick_sort(SST,0,9);    print_table(SST);*/</span>  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">//插入排序  </span></span><br><span class="line">    insert_sort(SST);  </span><br><span class="line">    print_table(SST);  </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;C:\Users\123\Desktop\记录本\图片\Snipaste_2023-03-18_21-02-34.png&quot;&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;p</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://example.com/undefined/0.html"/>
    <id>http://example.com/undefined/0.html</id>
    <published>2023-03-30T07:17:43.383Z</published>
    <updated>2023-03-14T15:40:40.182Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;time.h&gt;</span>  </span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> ELemType;  </span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span>  </span><br><span class="line">    ELemType* elem;<span class="comment">//整数型指针，申请的对空间起始地址存入elem  </span></span><br><span class="line">    <span class="type">int</span> TableLen;<span class="comment">//存储动态数组里边元素的个数  </span></span><br><span class="line">&#125;SSTable;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//初始化顺序表  </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">st_init</span><span class="params">(SSTable &amp;ST,<span class="type">int</span> len)</span>&#123;  </span><br><span class="line">    <span class="comment">//多申请一个位置，是为了存哨兵的，不用哨兵也可以的  </span></span><br><span class="line">    ST.TableLen=len+<span class="number">1</span>;  </span><br><span class="line">    ST.elem= (ELemType*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span> (ELemType)*ST.TableLen);  </span><br><span class="line">    <span class="type">int</span> i;  </span><br><span class="line">    srand(time(<span class="literal">NULL</span>));<span class="comment">//随机数生成  </span></span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;ST.TableLen;i++)&#123;<span class="comment">//因为第0个放的位置是哨兵，所以从1开始随机  </span></span><br><span class="line">        ST.elem[i]=rand() % <span class="number">100</span>;<span class="comment">//生成1-99之间的随机数  </span></span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="type">void</span> <span class="title function_">st_print</span><span class="params">(SSTable ST)</span>&#123;  </span><br><span class="line">    <span class="type">int</span> i;  </span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;ST.TableLen;i++)&#123;  </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%3d&quot;</span>,ST.elem[i]);  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="type">int</span> <span class="title function_">Search_Seq</span><span class="params">(SSTable ST,ELemType e)</span>&#123;  </span><br><span class="line">    <span class="type">int</span> i;  </span><br><span class="line">    <span class="keyword">for</span>(i=ST.TableLen<span class="number">-1</span>;ST.elem[i]!=e;--i)&#123;  </span><br><span class="line">  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> i;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;  </span><br><span class="line">    SSTable ST;  </span><br><span class="line">    st_init(ST,<span class="number">9</span>);  </span><br><span class="line">    st_print(ST);  </span><br><span class="line">    ELemType key;  </span><br><span class="line">    <span class="type">int</span> pos;  </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;please input search by\n&quot;</span>);  </span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;key);  </span><br><span class="line">    pos=Search_Seq(ST,key);  </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;the postion is %d&quot;</span>,pos);  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;li</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://example.com/undefined/0.html"/>
    <id>http://example.com/undefined/0.html</id>
    <published>2023-03-30T07:17:43.383Z</published>
    <updated>2023-03-20T14:27:19.878Z</updated>
    
    <content type="html"><![CDATA[<p><img src="C:\Users\123\Desktop\记录本\图片\Snipaste_2023-03-20_21-52-24.png"><br>代码如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;time.h&gt;</span>  </span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> ElemType;  </span><br><span class="line"><span class="comment">//定义顺序表结构体  </span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span>  </span><br><span class="line">    ElemType *str;  </span><br><span class="line">    <span class="type">int</span> len;  </span><br><span class="line">&#125;SSTable;  </span><br><span class="line"><span class="comment">//顺序表初始化，添加随机数  </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">init_table</span><span class="params">(SSTable &amp;SST,<span class="type">int</span> len)</span>&#123;  </span><br><span class="line">    srand(time(<span class="literal">NULL</span>));  </span><br><span class="line">    SST.len=len;  </span><br><span class="line">    SST.str=(ElemType*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span> (ElemType)*SST.len);  </span><br><span class="line">    <span class="type">int</span> i;  </span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;SST.len;i++)&#123;  </span><br><span class="line">        SST.str[i]=rand()%<span class="number">100</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="comment">//打印顺序表  </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">print_table</span><span class="params">(SSTable SST)</span>&#123;  </span><br><span class="line">    <span class="type">int</span> i;  </span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;SST.len;i++)&#123;  </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%3d&quot;</span>,SST.str[i]);  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="comment">//交换两个元素的方法  </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">swap</span><span class="params">(ElemType &amp;a,ElemType &amp;b)</span>&#123;  </span><br><span class="line">    ElemType temp;  </span><br><span class="line">    temp=a;  </span><br><span class="line">    a=b;  </span><br><span class="line">    b=temp;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//选择排序方法  </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">select_sort</span><span class="params">(ElemType A[],<span class="type">int</span> len)</span>&#123;  </span><br><span class="line">    <span class="type">int</span> i,j,min;  </span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;len;i++)&#123;  </span><br><span class="line">        min=i;  </span><br><span class="line">        <span class="keyword">for</span>(j=i+<span class="number">1</span>;j&lt;len;j++)&#123;  </span><br><span class="line">            <span class="keyword">if</span>(A[j]&lt;A[min])&#123;  </span><br><span class="line">                min=j;  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">        swap(A[i],A[min]);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//调整为大堆根的方法  </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">ajust_down1</span><span class="params">(ElemType A[],<span class="type">int</span> k,<span class="type">int</span> len)</span>&#123;<span class="comment">//k表示父节点的下标  </span></span><br><span class="line">    <span class="type">int</span> dad=k;  </span><br><span class="line">    <span class="type">int</span> son=dad*<span class="number">2</span>+<span class="number">1</span>;  </span><br><span class="line">    <span class="keyword">while</span>(son&lt;len)&#123;  </span><br><span class="line">        <span class="keyword">if</span>(son+<span class="number">1</span>&lt;len&amp;&amp;A[son]&lt;A[son+<span class="number">1</span>])&#123;  </span><br><span class="line">            son++;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">if</span>(A[dad]&lt;A[son])&#123;  </span><br><span class="line">            swap(A[dad],A[son]);  </span><br><span class="line">            dad=son;  </span><br><span class="line">            son=dad*<span class="number">2</span>+<span class="number">1</span>;  </span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;  </span><br><span class="line">            <span class="keyword">break</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//堆排序方法  </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">heap_sort</span><span class="params">(ElemType A[],<span class="type">int</span> len)</span>&#123;  </span><br><span class="line">    <span class="type">int</span> i;  </span><br><span class="line">    <span class="keyword">for</span>(i=len/<span class="number">2</span><span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)&#123;<span class="comment">//从后往前依次排成大堆根  </span></span><br><span class="line">        ajust_down1(A,i,len);  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="comment">//交换根结点和尾结点  </span></span><br><span class="line">    swap(A[<span class="number">0</span>],A[len<span class="number">-1</span>]);  </span><br><span class="line">    <span class="keyword">for</span>(i=len<span class="number">-1</span>;i&gt;<span class="number">1</span>;i--)&#123;<span class="comment">//第一次交换之后，都从根结点排成大堆根，剩余元素进入循环  </span></span><br><span class="line">        ajust_down1(A,<span class="number">0</span>,i);  </span><br><span class="line">        swap(A[<span class="number">0</span>],A[i<span class="number">-1</span>]);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;  </span><br><span class="line">    SSTable T;  </span><br><span class="line">    init_table(T,<span class="number">10</span>);  </span><br><span class="line">    print_table(T);  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">//选择排序  </span></span><br><span class="line">    select_sort(T.str,<span class="number">10</span>);  </span><br><span class="line">    print_table(T);  </span><br><span class="line">  </span><br><span class="line">    init_table(T,<span class="number">10</span>);  </span><br><span class="line">    print_table(T);  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">//堆排序  </span></span><br><span class="line">    heap_sort(T.str,<span class="number">10</span>);  </span><br><span class="line">    print_table(T);  </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果<br><img src="C:\Users\123\Desktop\记录本\图片\Snipaste_2023-03-20_22-26-37.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;C:\Users\123\Desktop\记录本\图片\Snipaste_2023-03-20_21-52-24.png&quot;&gt;&lt;br&gt;代码如下&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gu</summary>
      
    
    
    
    
  </entry>
  
</feed>
