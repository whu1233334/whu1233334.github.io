<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Telegram</title>
      <link href="/undefined/fd45428c.html"/>
      <url>/undefined/fd45428c.html</url>
      
        <content type="html"><![CDATA[<h1 id="常用bot"><a href="#常用bot" class="headerlink" title="常用bot"></a>常用bot</h1><p><code>@SMS24.me</code><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">提供虚拟手机号，接收短信</span><br></pre></td></tr></table></figure></p><p><code>@Vision Bot</code><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">图像识别，识别文字</span><br></pre></td></tr></table></figure></p><p><code>@WhatAnimeBot</code><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">上传图片，根据图片寻找动漫片段</span><br></pre></td></tr></table></figure></p><p><code>@lang_translat_bot</code><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">翻译机器人</span><br></pre></td></tr></table></figure></p><p><code>@hao1234bot</code><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">搜索</span><br></pre></td></tr></table></figure></p><p><code>@filetobot</code><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">将文件上传到无限空间，并生成链接</span><br></pre></td></tr></table></figure></p><p><code>@GmailBot</code><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">编辑接收谷歌邮件</span><br></pre></td></tr></table></figure></p><p><code>@newfileconverterbot</code><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">文件格式转换，支持各种文件</span><br></pre></td></tr></table></figure></p><p><code>@TempMail_org_bot</code><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">提供10min临时邮箱</span><br></pre></td></tr></table></figure></p><p><code>@sendme_bot</code><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">配合浏览器安装SendMe Telegram插件，可以直接将网页内容发送到电报，用于资源记录收集</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Python安装</title>
      <link href="/undefined/ae5c380e.html"/>
      <url>/undefined/ae5c380e.html</url>
      
        <content type="html"><![CDATA[<h1 id="配置python"><a href="#配置python" class="headerlink" title="配置python"></a>配置python</h1><hr><ul><li><code>下载好python环境，将文件夹配置到环境变量当中</code><br><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202304302355861.png" alt="image.png"></li></ul><ul><li><code>CMD输入python查看版本信息，若显示说明配置成功</code><br><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202304302355755.png" alt="image.png"></li></ul><ul><li><code>若不显示，打开CMD窗口，where python查看python安装位置 path查看环境变量配置</code></li><li><code>不显示，而是打开微软商店，需要将变量中的python移到Microsoft上方,或者删除Microsoft环境变量</code><br><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202304302355535.png" alt="image.png"></li></ul><h1 id="添加pip"><a href="#添加pip" class="headerlink" title="添加pip"></a>添加pip</h1><hr><p><strong>pip</strong>是一个以Python计算机程序语言写成的软件包管理系统，他可以安装和管理软件包</p><ul><li>将图中<code>\python311\Script</code>配置到环境变量当中<br><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202304302355943.png" alt="image.png"></li></ul><ul><li><code>查看配置是否成功</code><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip -V</span><br></pre></td></tr></table></figure></li></ul><h1 id="最便捷方式"><a href="#最便捷方式" class="headerlink" title="最便捷方式"></a>最便捷方式</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">安装python后，install前勾选pip to path</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CMD命令</title>
      <link href="/undefined/3e5cd712.html"/>
      <url>/undefined/3e5cd712.html</url>
      
        <content type="html"><![CDATA[<h1 id="调出远程桌面控制"><a href="#调出远程桌面控制" class="headerlink" title="调出远程桌面控制"></a>调出远程桌面控制</h1><hr><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mstsc</span><br></pre></td></tr></table></figure><p><code>输入ip地址</code><br><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202304302352256.png" alt="image.png"></p><h1 id="查看连接过的wifi密码"><a href="#查看连接过的wifi密码" class="headerlink" title="查看连接过的wifi密码"></a>查看连接过的wifi密码</h1><hr><p><code>1.查看历史所有wifi</code><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netsh wlan show profiles</span><br></pre></td></tr></table></figure></p><p><code>2.查看指定wifi的密码</code><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netsh wlan show profile name=&quot;wifi名&quot; key=clear</span><br></pre></td></tr></table></figure></p><h1 id="查询本机当前ip地址"><a href="#查询本机当前ip地址" class="headerlink" title="查询本机当前ip地址"></a>查询本机当前ip地址</h1><hr><ul><li><code>查看当前局域网ip和其他信息</code><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ipconfig</span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202304302353460.png" alt="image.png"></li></ul><ul><li><code>查看更详细信息</code><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ipconfig /all</span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202304302353598.png" alt="image.png"></li></ul><ul><li><code>查看当前外网地址</code><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -L ip.tool.lu</span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202304302353405.png" alt="image.png"></li></ul><h1 id="ping检测ip地址或服务器网络情况"><a href="#ping检测ip地址或服务器网络情况" class="headerlink" title="ping检测ip地址或服务器网络情况"></a>ping检测ip地址或服务器网络情况</h1><hr><ul><li><code>短暂监测</code><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ping (+要检测的ip地址/绑定了ip的域名)</span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202304302353128.png" alt="image.png"></li></ul><ul><li><code>持续监测</code><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ping (+要检测的ip地址/绑定了ip的域名) -t</span><br></pre></td></tr></table></figure></li></ul><h1 id="调出资源监测器"><a href="#调出资源监测器" class="headerlink" title="调出资源监测器"></a>调出资源监测器</h1><hr><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">perfmon.msc</span><br></pre></td></tr></table></figure><p><code>监测磁盘、网络、CPUz占用率</code><br><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202304302353676.png" alt="image.png"></p><h1 id="查看电脑当前所有用户"><a href="#查看电脑当前所有用户" class="headerlink" title="查看电脑当前所有用户"></a>查看电脑当前所有用户</h1><hr><p><code>查看用户名</code><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net user</span><br></pre></td></tr></table></figure><br><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202304302354885.png" alt="image.png"></p><p><code>删除用户名</code><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net user 名字 /del</span><br></pre></td></tr></table></figure></p><h1 id="修复丢失或损坏的系统文件"><a href="#修复丢失或损坏的系统文件" class="headerlink" title="修复丢失或损坏的系统文件"></a>修复丢失或损坏的系统文件</h1><hr><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">工具可以允许用户扫描所有受保护的系统文件，并且检查系统文件的完整性，然后恢复Windows损坏的系统文件</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sfc /scannow</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> cmd </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言(三)</title>
      <link href="/undefined/1db5c403.html"/>
      <url>/undefined/1db5c403.html</url>
      
        <content type="html"><![CDATA[<h1 id="数据的机器级表示"><a href="#数据的机器级表示" class="headerlink" title="数据的机器级表示"></a>数据的机器级表示</h1><h2 id="补码解析"><a href="#补码解析" class="headerlink" title="补码解析"></a>补码解析</h2><hr><ul><li><code>补码</code>：计算机只能加法运算<code>2+(-5)</code>,所以需要补码，补码大小是<code>原码取反+1</code></li><li><p><code>原码</code>：补码取反+1</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">0000 0000 0000 0000 0000 0000 0000 0101     //5的原码</span><br><span class="line">1111 1111 1111 1111 1111 1111 1111 1011     //补码 -5    fffffffb </span><br></pre></td></tr></table></figure><p><code>由于X8架构采用的是小端存储</code>：低字节在前(低地址)，高字节在后(高地址) —&gt; <code>fbffffff</code></p></li><li><p><code>补码原码相加</code>：对应位置相加</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">0000 0000 0000 0000 0000 0000 0000 0010     //2的原码</span><br><span class="line">1111 1111 1111 1111 1111 1111 1111 1011     //补码 -5 </span><br><span class="line"></span><br><span class="line">1111 1111 1111 1111 1111 1111 1111 1101     //补码 -3 =2+(-5)  --&gt;依次相加</span><br></pre></td></tr></table></figure></li><li><p>对于有符号数，最高位为1，就是负数</p></li></ul><h2 id="整型不同类型"><a href="#整型不同类型" class="headerlink" title="整型不同类型"></a>整型不同类型</h2><div class="table-container"><table><thead><tr><th style="text-align:left">整型类型</th><th style="text-align:center">符号</th><th style="text-align:center">字节</th><th style="text-align:center">整型数范围</th></tr></thead><tbody><tr><td style="text-align:left">基本整型</td><td style="text-align:center">int</td><td style="text-align:center">4</td><td style="text-align:center">-2^31~(2^31-1)</td></tr><tr><td style="text-align:left">短整型</td><td style="text-align:center">short</td><td style="text-align:center">2</td><td style="text-align:center">-2^15~(2^15-1)</td></tr><tr><td style="text-align:left">长整型</td><td style="text-align:center">long</td><td style="text-align:center">(32位)4;(64位)8</td><td style="text-align:center">-2^31~(2^31-1)或-2^63~(-2^63-1)</td></tr><tr><td style="text-align:left">无符号整型</td><td style="text-align:center">unsigned int</td><td style="text-align:center">4</td><td style="text-align:center">0~2^32-1</td></tr><tr><td style="text-align:left">无符号短整型</td><td style="text-align:center">unsigned short</td><td style="text-align:center">2</td><td style="text-align:center">0~2^16-1</td></tr><tr><td style="text-align:left">无符号长整型</td><td style="text-align:center">unsigned long</td><td style="text-align:center">(32位)4;(62位)8</td><td style="text-align:center">0~(2^32-1)或0~(-2^64-1)</td></tr></tbody></table></div><ul><li><code>有符号数</code>：最高位只表示正负，不代表大小</li><li><code>无符号数</code>：最高位代表大小，不表示正负</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">short最小数字：</span><br><span class="line">1000 0000 0000 0000  //补码 -32768 </span><br><span class="line">1000 0000 0000 0000  //原码  32768</span><br></pre></td></tr></table></figure><h2 id="溢出解析"><a href="#溢出解析" class="headerlink" title="溢出解析"></a>溢出解析</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//数值溢出</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="type">short</span> a = <span class="number">32767</span>;   <span class="comment">//01111 1111 1111 1111     32767</span></span><br><span class="line">a = a+<span class="number">1</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,a);  <span class="comment">//10000 0000 0000 0000    -32768 </span></span><br><span class="line"><span class="comment">//解决办法是用更大的空间存储</span></span><br><span class="line"><span class="type">int</span> i;</span><br><span class="line">i=a+<span class="number">1</span>;   </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304111919441.png" alt="image.png"></p><h2 id="浮点数类型"><a href="#浮点数类型" class="headerlink" title="浮点数类型"></a>浮点数类型</h2><h3 id="浮点数IEE754标准解析"><a href="#浮点数IEE754标准解析" class="headerlink" title="浮点数IEE754标准解析"></a>浮点数IEE754标准解析</h3><hr><div class="table-container"><table><thead><tr><th style="text-align:center">浮点类型</th><th style="text-align:center">字节</th></tr></thead><tbody><tr><td style="text-align:center">float</td><td style="text-align:center">4</td></tr><tr><td style="text-align:center">double</td><td style="text-align:center">8</td></tr></tbody></table></div><div class="table-container"><table><thead><tr><th>格式</th><th>SEEEEEEE</th><th>EMMMMMMM</th><th>MMMMMMMM</th><th>MMMMMMMM</th></tr></thead><tbody><tr><td>二进制</td><td>01000000</td><td>10010000</td><td>00000000</td><td>00000000</td></tr><tr><td>十六进制</td><td>40</td><td>90</td><td>00</td><td>00</td></tr></tbody></table></div><ul><li><code>S</code>：符号位1表示正，0表示负</li><li><code>E</code>：指数部分，(指数部分的值规定只能是1到254，不能是全0，全1)，指数部分运算前都要减去127(这是EEE-754的规定)，因为还要表示负指数。这里的<code>10000001</code>转换为十进制数为129,129-127=2，即实际指数部分为2.<code>表示小数部分小数点往后移两位</code></li><li><code>M</code>：小数部分 <code>0010000 00000000 00000000</code> 左边默认省略了一个1，应该是<code>1.0010000 00000000 00000000(二进制数)</code></li></ul><blockquote><p>分析上面浮点数<br>S=0，表示正数<br>E=2^0+2^7-127=129-127=2,表示小数点向后移动两位<br>M=<code>0010000 00000000</code> ，前面默认有个1，<code>1.0010000 00000000 00000000</code><br>因为E，M小数点向后移动两位，<code>100.10000 00000000 00000000</code> =2^2 + 2^-1 =4.5</p></blockquote><h3 id="浮点数精度丢失"><a href="#浮点数精度丢失" class="headerlink" title="浮点数精度丢失"></a>浮点数精度丢失</h3><hr><ul><li>浮点型变量分为单精度（float）型、双精度（double）型</li><li>float的数值范围：<code>2^-126~2^127</code>(因为指数部分值1~254，再减去127，得到的-126~127，也就是二进制位数小数点后126位，到小数点前127位)</li><li>float的精度：<code>6~7位</code></li><li>double数值范围：<code>2^-1022~2^1023</code></li><li>double的精度：<code>15~16位</code><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">我们赋给a的值为1.23456789e10,加20后，应该得到的值为1.234567892e10,</span><br><span class="line">但b输出结果却是b=12345678848.000000,变得更小了。我们将这种现象称为精度丢失，因</span><br><span class="line">为float型数据能够表示的有效数字为7位，最多只保证1.234567e10的正确性，要使结果正确，</span><br><span class="line">就需要把a和b均改为double型，因为double可以表示的精度为15~16位。</span><br></pre></td></tr></table></figure><code>int 溢出 可以考虑改用double存储</code></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git远程仓库</title>
      <link href="/undefined/3f8bae1e.html"/>
      <url>/undefined/3f8bae1e.html</url>
      
        <content type="html"><![CDATA[<h1 id="获取本地仓库及其基础操作指令"><a href="#获取本地仓库及其基础操作指令" class="headerlink" title="获取本地仓库及其基础操作指令"></a>获取本地仓库及其基础操作指令</h1><ul><li>初始化仓库文件夹：<code>git init</code></li><li><code>git status</code>：查看的修改的状态（暂存区、工作区）</li><li><code>git add 单个文件名|通配符.</code>：工作区-&gt;暂存区</li><li><code>git commit -m &#39;注释内容&#39;</code>：暂存区-&gt;本地仓库的当前分支</li><li><code>git-log</code>：查看提交日志</li><li><code>git reset --hard commitID</code>：版本回退；commitID 可以使用 git-log 或 git log 指令查看</li><li><code>git push -f -u origin master</code>：把修改推送至远程</li><li><code>git branch</code>：查看本地分支</li><li><code>git branch 分支名</code>：创建本地分支</li><li><code>git checkout 分支名</code>：切换本地分支</li><li><code>git merge 分支名称</code>：一个分支上的提交合并到另一个分支上</li><li><code>git branch -d 分支名</code>：删除分支，不能删除当前分支<h1 id="配置SSH公钥"><a href="#配置SSH公钥" class="headerlink" title="配置SSH公钥"></a>配置SSH公钥</h1></li></ul><hr><ul><li>生成SSH公钥：<code>ssh-keygen -t rsa</code>   不断回车; 如果公钥已经存在，则自动覆盖</li><li>获取公钥：<code>cat ~/.ssh/id_rsa.pub</code></li><li>公钥获取后，将其添加到github仓库设置中，以获取推送权限</li><li>验证是否配置成功: <code>ssh-T:git@github.com</code></li></ul><h1 id="添加远程仓库"><a href="#添加远程仓库" class="headerlink" title="添加远程仓库"></a>添加远程仓库</h1><hr><ul><li>命令：<code>git remote add &lt;远端名称&gt; &lt;仓库路径&gt;</code><ul><li>远端名称，默认是origin，取决于远端服务器设置</li><li>仓库路径，从远端服务器获取此URL<br><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202304302354039.png" alt="image.png"></li></ul></li></ul><h1 id="查看远程仓库"><a href="#查看远程仓库" class="headerlink" title="查看远程仓库"></a>查看远程仓库</h1><hr><ul><li>命令：<code>git remote</code><br><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202304302354389.png" alt="image.png"></li></ul><h1 id="推送到远程仓库"><a href="#推送到远程仓库" class="headerlink" title="推送到远程仓库"></a>推送到远程仓库</h1><hr><ul><li>命令：<code>git push [-f] [--set-upstream] [远端名称 [本地分支名][:远端分支名] ]</code></li><li>当前分支已经和远端分支关联，则可以省略分支名和远端名<code>git push</code></li><li><code>--set-upstream</code> 推送到远端的同时并且建立起和远端分支的关联关系。<br><code>git push --set-upstream origin master</code></li></ul><h1 id="从远程仓库克隆"><a href="#从远程仓库克隆" class="headerlink" title="从远程仓库克隆"></a>从远程仓库克隆</h1><hr><ul><li>命令: <code>git clone &lt;仓库路径&gt; [本地目录]</code><br><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202304302354898.png" alt="image.png"></li></ul><h1 id="从远程仓库抓取和拉取"><a href="#从远程仓库抓取和拉取" class="headerlink" title="从远程仓库抓取和拉取"></a>从远程仓库抓取和拉取</h1><ul><li>抓取 命令：<code>git fetch [remote name] [branch name]</code> </li><li>抓取指令就是将仓库里的更新都抓取到本地，不会进行合并</li><li><p>如果不指定远端名称和分支名，则抓取所有分支。</p></li><li><p>拉取 命令：<code>git pull [remote name] [branch name]</code></p></li><li>拉取指令就是将远端仓库的修改拉到本地并自动进行合并，等同于fetch+merge</li><li>如果不指定远端名称和分支名，则抓取所有并更新当前分支。</li></ul><h1 id="其他基础命令"><a href="#其他基础命令" class="headerlink" title="其他基础命令"></a>其他基础命令</h1><h2 id="查看当前仓库大小"><a href="#查看当前仓库大小" class="headerlink" title="查看当前仓库大小"></a>查看当前仓库大小</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git count-objects -vH</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202304302354114.png" alt="image.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>白鲸vpn无限白嫖</title>
      <link href="/undefined/e47230b0.html"/>
      <url>/undefined/e47230b0.html</url>
      
        <content type="html"><![CDATA[<h1 id="pc端"><a href="#pc端" class="headerlink" title="pc端"></a>pc端</h1><h2 id="官网下载地址"><a href="#官网下载地址" class="headerlink" title="官网下载地址"></a>官网下载地址</h2><p><a href="https://www.bjchuhai.com/?mid=3020">https://www.bjchuhai.com/?mid=3020</a></p><h2 id="注册"><a href="#注册" class="headerlink" title="注册"></a>注册</h2><ul><li>随便填写一个邮箱，密码随意，没有二次验证</li><li>邀请码可以填写安卓手机端的账户邀请码，可以延长30天试用时间，并加速5%<br><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202304302351374.png" alt="image.png"></li></ul><h2 id="重复注册"><a href="#重复注册" class="headerlink" title="重复注册"></a>重复注册</h2><ul><li>注册之后重新注册一个账号<br>一般情况提示账户密码错误<br><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202304302351877.png" alt="image.png"></li></ul><ul><li><p>找到<code>‪C:\ProgramData\Whale</code> 路径下的文件，并将所有文件删除<br><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202304302352313.png" alt="image.png"></p></li><li><p>再次注册即可</p></li></ul><h1 id="手机端-安卓"><a href="#手机端-安卓" class="headerlink" title="手机端(安卓)"></a>手机端(安卓)</h1><h2 id="手机注册"><a href="#手机注册" class="headerlink" title="手机注册"></a>手机注册</h2><p>与pc注册步骤一致</p><h2 id="重复注册-1"><a href="#重复注册-1" class="headerlink" title="重复注册"></a>重复注册</h2><p>手机最多注册两个账号，且无法像pc端进行重复注册操作<br>有两个方法：</p><ul><li>安装安卓模拟器(推荐voms pro)：通过手机模拟器，注册账号，并改变模拟器虚拟机的设备信息，实现重复注册，再通过填写邀请码延长时间</li><li>利用电脑端重复注册时，填写手机账号的邀请码，延长手机账号使用时间</li><li>注意,pc端，手机端 账号<code>不通用</code></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> VPN 白嫖 备用 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言(一)</title>
      <link href="/undefined/cc777f4a.html"/>
      <url>/undefined/cc777f4a.html</url>
      
        <content type="html"><![CDATA[<h1 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h1><div class="table-container"><table><thead><tr><th>类型</th><th>字节数</th><th>说明</th></tr></thead><tbody><tr><td>int</td><td>4字节</td><td></td></tr><tr><td>float</td><td>4字节</td><td>形式-&gt;0.123 或 1.23e-1</td></tr><tr><td>char</td><td>1字节</td><td>与int类型可通用，printf(“%c\n”,c+32);—&gt;a</td></tr><tr><td>字符串</td><td>字符数+1</td><td>字符串结尾\0字符不显示，用于判断字符串结束，因此+1</td></tr></tbody></table></div><p><code>一个字节byte = 8 bit</code><br>-&gt; 1 byte = 0000 0000 </p><h1 id="printf函数"><a href="#printf函数" class="headerlink" title="printf函数"></a>printf函数</h1><div class="note blue [icon] modern"><p>printf函数的具体代码格式</p></div><div class="table-container"><table><thead><tr><th style="text-align:center">代码</th><th style="text-align:center">格式</th></tr></thead><tbody><tr><td style="text-align:center">%c</td><td style="text-align:center">字符</td></tr><tr><td style="text-align:center">%d</td><td style="text-align:center">带符号整数,-左对齐，不带右对齐(printf函数默认靠右对齐)</td></tr><tr><td style="text-align:center">%x</td><td style="text-align:center">无符号十六进制数，用小写字母</td></tr><tr><td style="text-align:center">%X</td><td style="text-align:center">无符号十六进制数，用大写字母</td></tr><tr><td style="text-align:center">%f</td><td style="text-align:center">浮点数；%5.2f显示5位数字，并带有2位小数的浮点数</td></tr><tr><td style="text-align:center">%s</td><td style="text-align:center">一串字符，%10s代表占用10个字符位置</td></tr><tr><td style="text-align:center">%u</td><td style="text-align:center">无符号整数</td></tr><tr><td style="text-align:center">%p</td><td style="text-align:center">一个指针</td></tr></tbody></table></div><h1 id="scanf函数"><a href="#scanf函数" class="headerlink" title="scanf函数"></a>scanf函数</h1><h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><div class="table-container"><table><thead><tr><th style="text-align:left">数组初始化</th><th style="text-align:left">例子</th></tr></thead><tbody><tr><td style="text-align:left">（1）在定义数组时对数组元素赋初值。</td><td style="text-align:left">int a[10]={0,1,2,3,4,5,6,7,8,9};不能写成int a[10];a[10]={0,1,2,3,4,5,6,7,8,9}</td></tr><tr><td style="text-align:left">（2）可以只给一部分元素赋值</td><td style="text-align:left">int a[10]={0,1,2,3,4};</td></tr><tr><td style="text-align:left">（3）使一个数组中全部元素的值为 0，那么可以写为</td><td style="text-align:left">int a[10]={0,0,0,0,0,0,0,0,0,0};或int a[10]={0};</td></tr><tr><td style="text-align:left">（4）在对全部数组元素赋初值时，数据的个数，可以不指定数组的长度</td><td style="text-align:left">int a[]={1,2,3,4,5};</td></tr></tbody></table></div><ul><li>数组名a存的是数组的起始地址，数组名传递到子函数后，形参接收到的是数组起始地址</li><li>指针在64为计算机上是8个字节<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> k=<span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> a[k]; --&gt;<span class="comment">//有的编译器支持，但是有的编译器不支持，尽量还是不要这样使用</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//另外不能直接给指针赋值一个数组</span></span><br><span class="line"><span class="type">int</span> *data;</span><br><span class="line">data=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;; --&gt; 错误</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> *data</span><br><span class="line"><span class="type">int</span> arr[]=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line">data=arr         --&gt; 正确</span><br><span class="line"></span><br><span class="line"><span class="comment">//另外，数组名是一个常量指针，它指向数组第一个元素，无法被修改</span></span><br><span class="line"><span class="comment">//如果要修改，需要定义一个指针变量</span></span><br><span class="line"><span class="type">int</span> arr[]=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line">arr++;  --&gt;错误</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> arr[]=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line"><span class="type">int</span> *data=arr;</span><br><span class="line">data++; --&gt;正确</span><br></pre></td></tr></table></figure></li></ul><h1 id="调试debug"><a href="#调试debug" class="headerlink" title="调试debug"></a>调试debug</h1><p><code>进入子函数</code></p><ul><li>按向下箭头进入子函数</li><li>按拐弯箭头越过子函数，只在当前函数一步一步走下去<br><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304091733716.png" alt="image.png"></li></ul><p><code>查看变量内存视图</code></p><ul><li>点击内存视图</li><li>输入&amp;i，i为要查看内存视图的变量<br><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304102154125.png" alt="image.png"></li></ul><h1 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h1><ul><li>指针在64位计算机上站8个字节<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//* 在变量定义中的意思</span></span><br><span class="line"><span class="type">int</span> a=<span class="number">1</span>; </span><br><span class="line"><span class="type">int</span>* pa = &amp;a; <span class="comment">//这里的*声明定义的p是指针,指向的是a的内存地址</span></span><br><span class="line"><span class="type">int</span> ** p = &amp;pa; <span class="comment">//二级指针，** 声明该指针是 指针的指针</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//* 在变量赋值运算中的意思</span></span><br><span class="line">*pa == <span class="number">1</span>; <span class="comment">//这里*是取值得意思 pa的值</span></span><br><span class="line">*p == pa;</span><br><span class="line">**p == *pa == <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//指针进行+运算</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305061516769.png" alt="image.png"></li></ul><h1 id="struct结构体"><a href="#struct结构体" class="headerlink" title="struct结构体"></a>struct结构体</h1><h2 id="定义结构体"><a href="#定义结构体" class="headerlink" title="定义结构体"></a>定义结构体</h2><hr><ul><li><p>方式1</p><div class="note pink [icon] [style] flat"><p>这种方式定义的结构体，每次结构体声明都要<code>struct student s；</code>指针声明<code>struct student *p*;</code></p></div><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> 结构体名&#123;</span></span><br><span class="line">[成员列表]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p>方式2</p><div class="note pink [icon] [style] flat"><p>这种方式定义的结构体，结构体声明方式直接<code>stu s；</code>结构体指针<code>pstu p;</code></p></div><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Student</span>&#123;</span><span class="comment">//下面起了别名stu后student可以省略不写</span></span><br><span class="line">[成员列表]</span><br><span class="line">&#125;stu,*pstu; <span class="comment">//stu结构体别名；*pstu结构体指针别名</span></span><br></pre></td></tr></table></figure></li><li><p>结构体数组</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> MaxSize 100</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">double</span> val;</span><br><span class="line">&#125;Stack[MaxSize];</span><br><span class="line"></span><br><span class="line"><span class="comment">//声明单独结构体</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> <span class="title">x</span>;</span></span><br><span class="line"><span class="comment">//声明结构体数组</span></span><br><span class="line">Stack st; <span class="comment">//最大容量MaxSize,无需手动分配空间，默认MaxSize</span></span><br><span class="line"><span class="comment">//声明结构体二维数组</span></span><br><span class="line">Stack b[<span class="number">10</span>]; <span class="comment">//声明一个名为b的结构体数组的数组，包含10个结构体数组</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h2 id="typedef的使用"><a href="#typedef的使用" class="headerlink" title="typedef的使用"></a>typedef的使用</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> Element;<span class="comment">//重命名int类型  Element i;</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> *p;<span class="comment">//重命名指针类型      p k;</span></span><br><span class="line">trpedef <span class="class"><span class="keyword">struct</span> <span class="title">student</span> <span class="title">stu</span>;</span><span class="comment">//如上，重命名结构体类型 stu s;</span></span><br></pre></td></tr></table></figure><h1 id="循环体循环判断"><a href="#循环体循环判断" class="headerlink" title="循环体循环判断"></a>循环体循环判断</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">while(a&lt;i);找到第i个结点</span><br><span class="line">while(a&lt;=i);找到第i+1个结点</span><br><span class="line">同理&gt;;&gt;=</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>markdown语法</title>
      <link href="/undefined/f134a8e5.html"/>
      <url>/undefined/f134a8e5.html</url>
      
        <content type="html"><![CDATA[<h1 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">---</span><br></pre></td></tr></table></figure><h1 id="高亮显示"><a href="#高亮显示" class="headerlink" title="高亮显示"></a>高亮显示</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% label text color %&#125;</span><br></pre></td></tr></table></figure><ul><li>text    文字</li><li>color可选，背景顏色，默认为 default</li><li>default/blue/pink/red/purple/orange/green</li></ul><h1 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h1><h2 id="表格写法"><a href="#表格写法" class="headerlink" title="表格写法"></a>表格写法</h2><hr><blockquote><p>要添加表，请使用三个或多个连字符（<code>---</code>）创建每列的标题，并使用管道（<code>|</code>）分隔每列。您可以选择在表的任一端添加管道。<br><div class="tabs" id="test1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test1-1">写法1</button></li><li class="tab"><button type="button" data-href="#test1-2">效果1</button></li><li class="tab"><button type="button" data-href="#test1-3">写法2</button></li><li class="tab"><button type="button" data-href="#test1-4">效果2</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test1-1"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">| Syntax      | Description |</span><br><span class="line">| ----------- | ----------- |</span><br><span class="line">| Header      | Title       |</span><br><span class="line">| Paragraph   | Text        |</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-2"><div class="table-container"><table><thead><tr><th>Syntax</th><th>Description</th></tr></thead><tbody><tr><td>Header</td><td>Title</td></tr><tr><td>Paragraph</td><td>Text</td></tr></tbody></table></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-3"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">| Syntax | Description |</span><br><span class="line">| --- | ----------- |</span><br><span class="line">| Header | Title |</span><br><span class="line">| Paragraph | Text |</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-4"><div class="table-container"><table><thead><tr><th>Syntax</th><th>Description</th></tr></thead><tbody><tr><td>Header</td><td>Title</td></tr><tr><td>Paragraph</td><td>Text</td></tr></tbody></table></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div></p></blockquote><h2 id="对齐"><a href="#对齐" class="headerlink" title="对齐"></a>对齐</h2><hr><p>标题行中的连字符的左侧，右侧或两侧添加冒号（<code>:</code>），将列中的文本对齐到左侧，右侧或中心。<br><div class="tabs" id="test1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test1-1">语法</button></li><li class="tab"><button type="button" data-href="#test1-2">效果</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test1-1"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">| Syntax      | Description | Test Text     |</span><br><span class="line">| :---        |    :----:   |          ---: |</span><br><span class="line">| Header      | Title       | Here&#x27;s this   |</span><br><span class="line">| Paragraph   | Text        | And more      |</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-2"><div class="table-container"><table><thead><tr><th style="text-align:left">Syntax</th><th style="text-align:center">Description</th><th style="text-align:right">Test Text</th></tr></thead><tbody><tr><td style="text-align:left">Header</td><td style="text-align:center">Title</td><td style="text-align:right">Here’s this</td></tr><tr><td style="text-align:left">Paragraph</td><td style="text-align:center">Text</td><td style="text-align:right">And more</td></tr></tbody></table></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div></p><h1 id="分栏显示"><a href="#分栏显示" class="headerlink" title="分栏显示"></a>分栏显示</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tabs test1 %&#125;</span><br><span class="line">&lt;!-- tab 栏目1--&gt;</span><br><span class="line">**This is Tab 1.**</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab 栏目2--&gt;</span><br><span class="line">**This is Tab 2.**</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab 栏目3--&gt;</span><br><span class="line">**This is Tab 3.**</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure><div class="tabs" id="test1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test1-1">栏目1</button></li><li class="tab"><button type="button" data-href="#test1-2">栏目2</button></li><li class="tab"><button type="button" data-href="#test1-3">栏目3</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test1-1"><p>这里是1</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-2"><p>这里是2</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-3"><p>这里是2</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="标签外挂"><a href="#标签外挂" class="headerlink" title="标签外挂"></a>标签外挂</h1><div class="tabs" id="test1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test1-1">语法</button></li><li class="tab"><button type="button" data-href="#test1-2">效果</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test1-1"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note [color] [icon] [style] %&#125;</span><br><span class="line">Any content (support inline tags too.io).</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><div class="table-container"><table><thead><tr><th>名称</th><th>用法</th></tr></thead><tbody><tr><td>color</td><td>顔色(default / blue / pink / red / purple / orange / green)</td></tr><tr><td>icon</td><td>可配置自定义 icon (只支持 fontawesome 图标, 也可以配置 no-icon )</td></tr><tr><td>style</td><td>可以覆盖配置中的 style（simple/modern/flat/disabled）</td></tr></tbody></table></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-2"><div class="note blue [icon] modern"><p>效果展示</p></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="大量内容隐藏"><a href="#大量内容隐藏" class="headerlink" title="大量内容隐藏"></a>大量内容隐藏</h1><div class="tabs" id="test1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test1-1">写法</button></li><li class="tab"><button type="button" data-href="#test1-2">效果</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test1-1"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;details&gt;  </span><br><span class="line">&lt;summary&gt;点击打开&lt;/summary&gt;  </span><br><span class="line">隐藏的内容  </span><br><span class="line">&lt;/details&gt;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-2"><details>  <summary>显示的文字</summary>  隐藏的内容  </details><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>]]></content>
      
      
      
        <tags>
            
            <tag> markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构</title>
      <link href="/undefined/79666db.html"/>
      <url>/undefined/79666db.html</url>
      
        <content type="html"><![CDATA[<h1 id="绪论"><a href="#绪论" class="headerlink" title="绪论"></a>绪论</h1><h2 id="数据结构概念"><a href="#数据结构概念" class="headerlink" title="数据结构概念"></a>数据结构概念</h2><hr><blockquote><p>概念：</p><ul><li>数据元素：一个数据体，考虑为一个人，一份订单…</li><li>数据项：数据体内的各项，人的信息项，订单的信息项…</li><li>数据对象：具有相同性质，数据元素的集合<br><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202304302328740.png" alt="image.png"></li><li>数据类型：是指一个值得集合，和定义在此集合上一组操作的总称<ul><li>原子类型：基本数据类型<br>  结构体运算：+ - * % …</li><li>结构类型：结构体(可以再分为若干分量)<br>  结构体运算—&gt;封装为函数</li><li>抽象数据类型：抽象数据组织及与之相关操作(描述了数据的<code>逻辑结构</code>和<code>抽象运算</code>)，可以用其定义一个完整的数据结构</li><li>数据结构：相互间存在一种或多种特定关系的数据元素的集合</li></ul></li></ul><p>数据结构三要素：</p><ul><li><code>逻辑结构</code><ul><li>线性结构</li><li>非线性结构(集合结构、树形结构、图状结构)</li></ul></li><li><code>存储结构</code><ul><li>链式存储：离散存放的</li><li>顺序存储：占用大片连续空间</li><li>索引存储</li><li>散列存储</li></ul></li><li><code>数据的运算</code>：比如，栈的抽象运算是<code>先进后出</code><br><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202304302341139.png" alt="image.png"></li></ul></blockquote><p><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202304302341254.png" alt="image.png"></p><h2 id="课后习题"><a href="#课后习题" class="headerlink" title="课后习题"></a>课后习题</h2><hr><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">1.数据的逻辑结构独立于其存储结构，逻辑结构是抽象表达方式，例如图的逻辑结构，采用顶点与边</span><br><span class="line">而图的存储结构采用二维数组(顺序存储)或链表结点(链式存储)</span><br><span class="line"></span><br><span class="line">2.存储数据时，不仅要存储数据的值，还要存储数据元素之间的关系(例如顺序表存储元素有下标，表示与其他数据元素的位置关系)</span><br><span class="line"></span><br><span class="line">3.对于两种不同的数据结构，他们的逻辑结构完全有可能相同，</span><br><span class="line"></span><br><span class="line">4.举例说明，对相同的逻辑结构，同一种运算在不同的存储方式下实现时，其运算效率不同？</span><br><span class="line">线性表，可以顺序存储，可以链式存储，顺序存储方式，插入删除操作要平均移动一半元素，O(n)</span><br><span class="line">链式存储方式，插入删除时间复杂度O(1)</span><br><span class="line"></span><br><span class="line">5.以下与数据存储结构无关的术语是：D</span><br><span class="line">  A 循环队列  B 链表  C 哈希表  D 栈 </span><br><span class="line">  解析：栈是哟中抽象数据类型，可采用顺序存储，链式存储，只表示逻辑结构</span><br><span class="line"></span><br><span class="line">6.以下属于逻辑结构的是（c）。</span><br><span class="line">A.顺序表</span><br><span class="line">B.哈希表</span><br><span class="line">C.有序表</span><br><span class="line">·D.单链表</span><br><span class="line"></span><br><span class="line">顺序表体现数组存储方式，哈希表体现散列存储方式，单链表体现链式存方式，有序表体现有序的逻辑结构</span><br></pre></td></tr></table></figure><h2 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h2><hr><blockquote><p>算法：求解问题的步骤<br><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304061942250.png" alt="image.png"><br>-算法特性：</p><ul><li>有穷性，有限步骤内完成，有穷时间内完成</li><li>确定性，意义明确，无歧义；给定相同的输入，输出结果确定唯一</li><li>可行性，可以通过基本运算执行有限次来实现</li><li>输入，0个或多个输入</li><li>输出，1个或多个输出</li></ul><p>好的算法具备特质：</p><ul><li>正确性，能正确实现目的</li><li>可读性，容易理解阅读</li><li>健壮性，可以灵活处理数据中的非法数据，给出反应进行处理</li><li>高效率地存储需求，花费时间少(时间复杂度低)，不费内存(空间复杂度低)</li></ul><p><mark class="hl-label blue">时间复杂度</mark> ：</p></blockquote><div class="table-container"><table><thead><tr><th>a</th><th>结论</th></tr></thead><tbody><tr><td>1</td><td>顺序执行的代码只影响常数项</td></tr><tr><td>2</td><td>只需要挑去循环当中的某一个基本操作分析它的执行次数与n的关系</td></tr><tr><td>3</td><td>如果有多层嵌套循环，只需要关注最深层得循环执行了几次</td></tr></tbody></table></div><p><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304072136217.png" alt="image.png"></p><p><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304072140867.png" alt="image.png"></p><p><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304072141426.png" alt="image.png"></p><blockquote><p><mark class="hl-label blue">空间复杂度</mark> ：</p></blockquote><div class="table-container"><table><thead><tr><th style="text-align:center">普通程序</th><th style="text-align:center">结论</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:center">只需关注存储空间大小与问题规模相关的变量</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">分析所占空间x与问题规模n的关系 x=f(n)</td></tr><tr><td style="text-align:center">3</td><td style="text-align:center">x的数量级O(x)就是算法空间复杂度S(n)</td></tr></tbody></table></div><div class="table-container"><table><thead><tr><th style="text-align:center">递归程序</th><th style="text-align:center">结论</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:center">找到递归深度x与问题规模n的关系</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">x的数量级O(x)就是算法空间复杂度S(n)</td></tr></tbody></table></div><p><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304072151890.png" alt="image.png"></p><p><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304072152388.png" alt="image.png"></p><h1 id="线性表"><a href="#线性表" class="headerlink" title="线性表"></a>线性表</h1><div class="table-container"><table><thead><tr><th style="text-align:center">序号</th><th style="text-align:center">总结</th></tr></thead><tbody><tr><td style="text-align:center">定义</td><td style="text-align:center">数据类型同类型、有限、有序(先后顺序)</td></tr><tr><td style="text-align:center">位序</td><td style="text-align:center">线性表数据元素的位序从1开始(数组下标以0开始)</td></tr><tr><td style="text-align:center">基本操作</td><td style="text-align:center">创销、增删改查；判空、判长、打印输出</td></tr><tr><td style="text-align:center">注意</td><td style="text-align:center">函数名要有可读性、见名知意</td></tr><tr><td style="text-align:center">包括</td><td style="text-align:center">链表(链式存储)、顺序表(顺序存储)</td></tr></tbody></table></div><p><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304072231315.png" alt="image.png"></p><p><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304072232709.png" alt="image.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">构造方法框架：</span><br><span class="line">InitL1st(&amp;L）:初始化表。构造一个空的线性表。</span><br><span class="line">Length(L):求表长。返回线性表L的长度，即L中数据元素的个数。</span><br><span class="line">LocateElem(L,e):按值查找操作。在表L中查找具有给定关键字值的元素。</span><br><span class="line">GetE1em(L,i):按位查找操作。获取表L中第1个位置的元素的值。</span><br><span class="line">ListInsert(&amp;L,i,e):插入操作。在表L中的第i个位置上插入指定元素e.</span><br><span class="line">ListDelete(&amp;L,i,&amp;e):别除操作，别除表L中第1个位置的元素，并用e返回别除元素的值。</span><br><span class="line">Pr1 ntList(L):输出操作。按前后顺序输出线性表L的所有元素值。</span><br><span class="line">Empty(L):判空操作。若L为空表，则返回true,否则返回false.</span><br><span class="line">DestroyList(&amp;L):销毁操作。销毁线性表，并释放线性表L所占用的内存空间。</span><br></pre></td></tr></table></figure><h1 id="线性表顺序存储"><a href="#线性表顺序存储" class="headerlink" title="线性表顺序存储"></a>线性表顺序存储</h1><h2 id="顺序表"><a href="#顺序表" class="headerlink" title="顺序表"></a>顺序表</h2><h3 id="顺序表定义"><a href="#顺序表定义" class="headerlink" title="顺序表定义"></a>顺序表定义</h3><hr><blockquote><p>顺序表实现方式：<br><code>静态分配</code>：ElemType data[MaxSize]（存储空间不可调控）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> Maxsize 10</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">ElemType data [MaxSize];</span><br><span class="line"><span class="type">int</span> Length;</span><br><span class="line">&#125;SqList; <span class="comment">//定义的是结构体的数据类型</span></span><br></pre></td></tr></table></figure><p><code>动态分配</code>：ElemType  * data （存储空间可调控）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> Initsize10 <span class="comment">//默认的最大长度</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">ElemType *data ;</span><br><span class="line"><span class="type">int</span> Maxsize;<span class="comment">//记录最大容量</span></span><br><span class="line"><span class="type">int</span> Length;</span><br><span class="line">&#125;SqList; </span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//初始化</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">InitList</span><span class="params">(SeqList &amp;L)</span>&#123;</span><br><span class="line"><span class="comment">//用ma11oc函数申请一片连续的存储空间</span></span><br><span class="line">L.data=(<span class="type">int</span> *)<span class="built_in">malloc</span>(Initsize*<span class="keyword">sizeof</span>(<span class="type">int</span>));</span><br><span class="line">L.length=<span class="number">0</span>;</span><br><span class="line">L.MaxSize=Initsize;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//增加动态数组的长度</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Increasesize</span><span class="params">(SeqList &amp;L,<span class="type">int</span> len)</span>&#123;</span><br><span class="line"><span class="type">int</span> *p=L.data;</span><br><span class="line">L.data=(<span class="type">int</span> *)<span class="built_in">malloc</span>((L.MaxSize+len)*<span class="keyword">sizeof</span>(<span class="type">int</span>));<span class="comment">//申请另一块内存空</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;L.length;i++)&#123;</span><br><span class="line">L.data[i]=p[i];<span class="comment">//将数据复制到新区域</span></span><br><span class="line">&#125;</span><br><span class="line">L.MaxSize=L.MaxSize+len;<span class="comment">//顺序表最大长度增加len</span></span><br><span class="line"><span class="built_in">free</span>(p);<span class="comment">//释放原来的内存空间</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304072344443.png" alt="image.png"></p><p>顺序表特点</p><ul><li>随机访问：可以在O(1)时间内找到第i给元素</li><li>存储密度高，只能存储数据本身，不能存储指针信息</li><li>拓展容量不方便：每次拓展容量都需要开拓一个新的内存空间，并复制过去</li><li>插入删除元素不方便，需要移动大量的元素</li></ul></blockquote><h3 id="顺序表插入操作"><a href="#顺序表插入操作" class="headerlink" title="顺序表插入操作"></a>顺序表插入操作</h3><hr><blockquote><p>健壮性，异常处理：</p><ul><li>返回布尔型变量用于判断操作是否成功</li><li>方法要进行，判满，判断插入位置是否有效</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">bool</span> <span class="title function_">ListInsert</span><span class="params">(SqList&amp;L <span class="type">int</span> i，<span class="type">int</span> e)</span>&#123;<span class="comment">//i插入位置，e要插入元素</span></span><br><span class="line"><span class="keyword">if</span>（i&lt;<span class="number">1ll</span>i&gt;L.length+<span class="number">1</span>） <span class="comment">//判断i的范围是否有效</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>；</span><br><span class="line"><span class="keyword">if</span>（L.length&gt;=MaxSize） <span class="comment">//当前存储空间已满，不能插入</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>；</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>；</span><br><span class="line"><span class="keyword">for</span>（intj=L.length;j&gt;=i；j--） <span class="comment">//将第i个元素及之后的元素后移</span></span><br><span class="line">L.data[j]=L.data[j<span class="number">-1</span>]；</span><br><span class="line">L.data[i<span class="number">-1</span>]=e； <span class="comment">//在位置i处放入e</span></span><br><span class="line">L.length++； <span class="comment">//长度加1</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>；</span><br></pre></td></tr></table></figure><p>问题规模n:顺序表表长length<br>时间复杂度：</p><ul><li>最好：插入到表尾i=n+1，无需移动元素 <code>O(1)</code></li><li>最坏：插入到表头i=1，全部后移一位<code>O(n)</code></li><li>平均：假设新元素插入到任何一个位置的概率相同，即i=1,2,3,,length+1的概率都是p=1/n+1,i=1,循环n次：i=2时，循环n-1次：i=3,循环n-2次…i=n+1时，循环0次;平均循环次数=np+(n-1)p+(n-2)p+…+1p=n/2,  <code>O(n)</code></li></ul></blockquote><h3 id="顺序表的删除操作"><a href="#顺序表的删除操作" class="headerlink" title="顺序表的删除操作"></a>顺序表的删除操作</h3><hr><blockquote><p>健壮性异常处理</p><ul><li>返回布尔型变量用于判断操作是否成功</li><li>判空、判断删除位置i是否有效</li><li>要加一个变量e(注意要&amp;e)，将被删除元素的值带回来</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">bool</span> <span class="title function_">ListDelete</span><span class="params">(SqList &amp;L,<span class="type">int</span> i,<span class="type">int</span> &amp;e)</span>&#123;<span class="comment">//引用，否则无法带回数据</span></span><br><span class="line"><span class="keyword">if</span>(i&lt;<span class="number">1</span> i&gt;L.length)<span class="comment">//判断i的范围是否有效</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">e=L.data[i<span class="number">-1</span>];<span class="comment">//将被删除的元素赋值给e</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=i;j&lt;L.length;j++)<span class="comment">//将第i个位置后的元素前移</span></span><br><span class="line">L.data[j<span class="number">-1</span>]=L.data[j];</span><br><span class="line">L.length--;<span class="comment">//线性表长度减1</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>问题规模n:顺序表表长length<br>时间复杂度：</p><ul><li>最好：删除表尾i=n，无需移动元素 <code>O(1)</code></li><li>最坏：删除表头i=1，全部前移一位<code>O(n)</code></li><li>平均：假设删除任何一个位置的概率相同，即i=1,2,3,,length的概率都是p=1/n,i=1,循环n-1次：i=2时，循环n-2次：i=3,循环n-3次…i=n时，循环0次;平均循环次数=(n-1)p+(n-2)p+(n-3)p+…+1p=n-1/2,  <code>O(n)</code></li></ul></blockquote><h3 id="顺序表的查找"><a href="#顺序表的查找" class="headerlink" title="顺序表的查找"></a>顺序表的查找</h3><hr><h4 id="按位查找"><a href="#按位查找" class="headerlink" title="按位查找"></a>按位查找</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ElemType <span class="title function_">GetElem</span><span class="params">(SeqList L,<span class="type">int</span> i)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> L.data[i<span class="number">-1</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>时间复杂度：<code>O(1)</code></p><h4 id="按值查找"><a href="#按值查找" class="headerlink" title="按值查找"></a>按值查找</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">LocateElem</span><span class="params">(SeqList L,ElemType e)</span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;L.length;<span class="number">1</span>++)</span><br><span class="line"><span class="keyword">if</span>(L.data[i]==e)</span><br><span class="line"><span class="keyword">return</span> i+<span class="number">1</span>; <span class="comment">//数组下标为i的元素值等于e,返回其位i+1</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>; <span class="comment">//退出循环，说明查找失败</span></span><br></pre></td></tr></table></figure><p>时间复杂度：</p><ul><li>最好：<code>O(1)</code> 查找元素在表头</li><li>最坏：<code>O(n)</code> 查找元素在表尾</li><li>平均：<code>O(n)</code>  循环n+1/2次</li></ul><h3 id="课后习题-1"><a href="#课后习题-1" class="headerlink" title="课后习题"></a>课后习题</h3><div class="tabs" id="test1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test1-1">1</button></li><li class="tab"><button type="button" data-href="#test1-2">2</button></li><li class="tab"><button type="button" data-href="#test1-3">3</button></li><li class="tab"><button type="button" data-href="#test1-4">4</button></li><li class="tab"><button type="button" data-href="#test1-5">5</button></li><li class="tab"><button type="button" data-href="#test1-6">6</button></li><li class="tab"><button type="button" data-href="#test1-7">7</button></li><li class="tab"><button type="button" data-href="#test1-8">8</button></li><li class="tab"><button type="button" data-href="#test1-9">9</button></li><li class="tab"><button type="button" data-href="#test1-10">10</button></li><li class="tab"><button type="button" data-href="#test1-11">11</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test1-1"><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.从顺序表中别除具有最小值的元素（假设唯一）并由函数返回被别元素的值。空出的位</span></span><br><span class="line"><span class="comment">//置由最后一个元素填补，若顺序表为空，则显示出错信息并退出运行</span></span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="title function_">delet_min</span><span class="params">(SqList T,<span class="type">int</span> &amp;e)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(T.length==<span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> min=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;T.length;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(T.data[i]&lt;T.data[min])&#123;</span><br><span class="line">min=i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">e=T.data[min];</span><br><span class="line">T.data[min]=T.data[length<span class="number">-1</span>];</span><br><span class="line">T.length--;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-2"><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">2.设计一个高效算法，将顺序表L的所有元素逆置，要求算法的空间复杂度为O（1）,</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">inverse</span><span class="params">(SqList T)</span>&#123;</span><br><span class="line"><span class="type">int</span> temp;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;T.length/<span class="number">2</span>;i++)&#123;</span><br><span class="line">temp=T.data[i];</span><br><span class="line">T.data[i]=T.data[T.length-i];</span><br><span class="line">T.data[T.length-i]=temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-3"><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">3.对长度为n的顺序表L,编写一个时间复杂度为O（n）、空间复杂度为O（1）的算法，该算</span></span><br><span class="line"><span class="comment">法别除线性表中所有值为x的数据元素</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">void delet(Sqlist T,int pos)&#123;</span></span><br><span class="line"><span class="comment">if(T.length=0||pos&gt;T.length||pos&lt;0)&#123;</span></span><br><span class="line"><span class="comment">return;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">for(int i=pos;i&lt;=T.length;i++)&#123;</span></span><br><span class="line"><span class="comment">T.data[i]=T.data[i+1];</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">void delet_x(Sqlist T,int x)&#123;</span></span><br><span class="line"><span class="comment">int* arr;</span></span><br><span class="line"><span class="comment">int k=0;</span></span><br><span class="line"><span class="comment">for(int i=0;i&lt;T.length;i++)&#123;</span></span><br><span class="line"><span class="comment">if(T.data[i]=x)&#123;</span></span><br><span class="line"><span class="comment">arr[k]=i;</span></span><br><span class="line"><span class="comment">k++;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">for(k;k&gt;=0;k--)&#123;</span></span><br><span class="line"><span class="comment">delet(T,arr[k]);</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//上述代码，不符合时间复杂度与空间复杂度要求</span></span><br><span class="line"><span class="comment">//解法1.正确思路：用k记录值不等于x的元素的个数，然后，将不等于x的值移到下标为x的位置，然后调整k位置</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">del_x</span><span class="params">(Sqlist &amp;T,<span class="type">int</span> x)</span>&#123;</span><br><span class="line"><span class="type">int</span> k=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;T.length;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(T.data[i]!=x)&#123;</span><br><span class="line">T.data[k]=T.data[i];</span><br><span class="line">k++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">T.length=k;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//解法2，用k记录值等于x的元素个数，边扫描L边统计k,并将不等于x的元素前移k位</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">del_x</span><span class="params">(Sqlist &amp;L,<span class="type">int</span> x)</span>&#123;</span><br><span class="line"><span class="type">int</span> k=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;L.length;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(T.data[i]==x)&#123;</span><br><span class="line">k++;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">L.data[i-k]=L.data[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">L.len=L.len-k;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-4"><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">4.从顺序表中删除其值在给定值s与t之间(要求s&lt;t)的所有元素，若s或t不合理</span></span><br><span class="line"><span class="comment">或顺序表为空，则显示出错信息并退出运行</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//解法1.用k记录不符合删除条件的元素个数</span></span><br><span class="line"><span class="type">bool</span> <span class="title function_">delet_st</span><span class="params">(Sqlist &amp;T,<span class="type">int</span> s,<span class="type">int</span> t)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(s&gt;=t||T.length==<span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> k=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;T.length;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(!(T.data[i]&gt;s&amp;&amp;T.data[i]&lt;t))&#123;</span><br><span class="line">T.data[k]=T.data[i];</span><br><span class="line">k++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">T.length=k;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//解法2.用k记录在s和t之间的元素个数，并边扫描，边统计k，将不在s和t之间的元素前移k位</span></span><br><span class="line"><span class="type">bool</span> <span class="title function_">delet_st</span><span class="params">(Sqlist &amp;L,<span class="type">int</span> s,<span class="type">int</span> t)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(s&gt;=t||T.length==<span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> k=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;L.length;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(L.data[i]&gt;s&amp;&amp;L.data[i]&lt;t)&#123;</span><br><span class="line">k++;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">L.data[i-k]=L.data[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">L.length-=k;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-5"><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">5.从有序顺序表中删除所有其值重复的元素，使表中所有元素的值均不同</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">SqTable</span>&#123;</span>  </span><br><span class="line">    <span class="type">int</span>* data;  </span><br><span class="line">    <span class="type">int</span> length;  </span><br><span class="line">&#125;Sqlist;  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="type">bool</span> <span class="title function_">delet</span><span class="params">(Sqlist &amp;T,<span class="type">int</span> pos)</span>&#123;  </span><br><span class="line">    <span class="keyword">if</span>(T.length==<span class="number">0</span>)&#123;  </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=pos+<span class="number">1</span>;i&lt;T.length;i++)&#123;  </span><br><span class="line">        T.data[i<span class="number">-1</span>]=T.data[i];  </span><br><span class="line">    &#125;  </span><br><span class="line">    T.length--;  </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="type">void</span> <span class="title function_">delet_repeat</span><span class="params">(Sqlist &amp;T)</span>&#123;  </span><br><span class="line">    <span class="keyword">if</span>(T.length==<span class="number">0</span>)&#123;  </span><br><span class="line">        <span class="keyword">return</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="type">int</span> i=<span class="number">0</span>;  </span><br><span class="line">    <span class="keyword">while</span>(i&lt;T.length<span class="number">-1</span>)&#123;  </span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=i+<span class="number">1</span>;j&lt;T.length;j++)&#123;  </span><br><span class="line">            <span class="keyword">if</span>(j==T.length)&#123;  </span><br><span class="line">                <span class="keyword">break</span>;  </span><br><span class="line">            &#125;  </span><br><span class="line">            <span class="keyword">if</span>(T.data[i]==T.data[j])&#123;  </span><br><span class="line">                delet(T,j);  </span><br><span class="line">                j--;  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">        i++;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//时间复杂度O(n^2)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//优化思路，先排序，后遍历删除</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">delet_repeat</span><span class="params">(Sqlist &amp;T)</span> &#123;</span><br><span class="line">    <span class="comment">// 首先排序</span></span><br><span class="line">    qsort(T.data, T.length, <span class="keyword">sizeof</span>(<span class="type">int</span>), cmp); </span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt; T.length; j++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (T.data[i] != T.data[j]) &#123;</span><br><span class="line">            i++;</span><br><span class="line">            T.data[i] = T.data[j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    T.length = i + <span class="number">1</span>; </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//排序的时间复杂度为O(nlogn),遍历的时间复杂度为O(n),所以总时间复杂度为O(nlogn)</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-6"><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*6.将两个有序顺序表合并为一个新的有序顺序表，并由函数返回结果顺序表*/</span></span><br><span class="line"><span class="comment">//算法思想：首先，按顺序不断取下两个顺序表表头较小的结点存入新的顺序表中。然后，看</span></span><br><span class="line"><span class="comment">//哪个表还有剩余，将剩下的部分加到新的顺序表后面。</span></span><br><span class="line">Sqlist <span class="title function_">merge</span><span class="params">(Sqlist T1,Sqlist T2)</span>&#123;  </span><br><span class="line">    Sqlist T3;  </span><br><span class="line">    T3.data=(<span class="type">int</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">int</span>)*(T1.length+T2.length));  </span><br><span class="line">    <span class="type">int</span> k=<span class="number">0</span>;  </span><br><span class="line">    <span class="type">int</span> i=<span class="number">0</span>;  </span><br><span class="line">    <span class="type">int</span> j=<span class="number">0</span>;  </span><br><span class="line">    <span class="keyword">while</span>(i&lt;T1.length&amp;&amp;j&lt;T2.length)&#123;  </span><br><span class="line">        <span class="keyword">if</span>(T1.data[i]&lt;=T2.data[j])&#123;  </span><br><span class="line">            T3.data[k]=T1.data[i];  </span><br><span class="line">            i++;  </span><br><span class="line">            k++;  </span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;  </span><br><span class="line">            T3.data[k]=T2.data[j];  </span><br><span class="line">            j++;  </span><br><span class="line">            k++;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">while</span>(i&lt;T1.length)&#123;  </span><br><span class="line">        T3.data[k]=T1.data[i];  </span><br><span class="line">        k++;  </span><br><span class="line">        i++;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">while</span>(j&lt;T2.length)&#123;  </span><br><span class="line">        T3.data[k]=T2.data[j];  </span><br><span class="line">        k++;  </span><br><span class="line">        j++;  </span><br><span class="line">    &#125;  </span><br><span class="line">    T3.length=k;  </span><br><span class="line">    <span class="keyword">return</span> T3;  </span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-7"><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">7.[2010统考真题]设将n(n&gt;1)个整数存放到一维数组R中。设计一个在时间和空间</span></span><br><span class="line"><span class="comment">两方面都尽可能高效的算法。将R中保存的序列循环左移p(0&lt;p&lt;n)个位置，即将R</span></span><br><span class="line"><span class="comment">中的数据由(X0,X1,…,Xn-1)变换为(XpXp+1,…,Xn-1,X0,X1,…,Xp-1).要求：</span></span><br><span class="line"><span class="comment">1)给出算法的基本设计思想。</span></span><br><span class="line"><span class="comment">2)根据设计思想，采用C或C++或Java语言描述算法，关键之处给出注释。</span></span><br><span class="line"><span class="comment">3)说明你所设计算法的时间复杂度和空间复杂度。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">答：</span></span><br><span class="line"><span class="comment">1.可以将问题看做将数组ab转换成ba,可以先将a逆转置，再将b逆置，再将整体逆置，就得到ba</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">reserve_singel</span><span class="params">(Sqlist &amp;T,<span class="type">int</span> bengin,<span class="type">int</span> end)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(T.length&lt;=<span class="number">1</span>)&#123;</span><br><span class="line"><span class="keyword">return</span>；</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(begin,end;begin&lt;end;begin++,end--)&#123;</span><br><span class="line"><span class="type">int</span> temp;</span><br><span class="line">temp=T.data[begin];</span><br><span class="line">T.data[begin]=T.data[end];</span><br><span class="line">T.data[end]=temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">reserve_all</span><span class="params">(Sqlist &amp;T,<span class="type">int</span> p)</span>&#123;</span><br><span class="line">reserve_singel(T,<span class="number">0</span>,p<span class="number">-1</span>);</span><br><span class="line">reserve_singel(T,p,n<span class="number">-1</span>);</span><br><span class="line">reserve_singel(T,<span class="number">0</span>,n<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//以上算法中三个reserve_all的时间复杂度分别是O(p/2),O((n-p)/2),O(n/2);</span></span><br><span class="line"><span class="comment">//总时间复杂度是O(n),空间复杂度O(1)</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-8"><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">8.线性表(a1,a2,a3,an)中元素递增有序且按顺序存储于计算机内。要求设计一算法完成用最少时间在表中查找数值为x的元素，若找到将其与后继元素位置相交换，若找不到将其插入表中并使表中元素仍递增有序。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//算法思路：二分查找函数+交换函数+插入函数</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Swap</span><span class="params">(SSTable &amp;S,<span class="type">int</span> i)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(i&gt;=S.len)&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> temp;</span><br><span class="line">temp=S.data[i];</span><br><span class="line">S.data[i]=S.data[i+<span class="number">1</span>];</span><br><span class="line">S.data[i+<span class="number">1</span>]=temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">bool</span> <span class="title function_">Insert</span><span class="params">(SSTable &amp;S,<span class="type">int</span> x,<span class="type">int</span> pos)</span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=S.len<span class="number">-1</span>;i&gt;=pos;i--)&#123;</span><br><span class="line">S.data[i+<span class="number">1</span>]=S.data[i];</span><br><span class="line">&#125;</span><br><span class="line">S.len++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Binary_Search_insert</span><span class="params">(SSTable S,<span class="type">int</span> x)</span>&#123;</span><br><span class="line"><span class="type">int</span> low=<span class="number">0</span>,high=S.len,mid;</span><br><span class="line"><span class="keyword">while</span>(low&lt;=high)&#123;</span><br><span class="line">mid=(low+high)/<span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span>(S.data[mid]==x)&#123;</span><br><span class="line">Swap(S,mid);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(S.data[mid]&lt;x)&#123;</span><br><span class="line">low=mid+<span class="number">1</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">high=mid<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">Insert(S,x,low);  <span class="comment">//没有查到，那么low所指向位置，就是插入位置,low一定是比x大的元素</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-9"><p><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305050853124.png" alt="image.png"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-10"><p><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305050947008.png" alt="image.png"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-11"><p><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305051013253.png" alt="image.png"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">findMissMin</span><span class="params">(<span class="type">int</span> A[],<span class="type">int</span> n)</span>&#123;</span><br><span class="line"><span class="type">int</span> *B;</span><br><span class="line">B=(<span class="type">int</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">int</span>)*n); <span class="comment">//创建一个存放标记的数组</span></span><br><span class="line"><span class="built_in">memset</span>(B,<span class="number">0</span>,<span class="keyword">sizeof</span>(<span class="type">int</span>)*n*);  <span class="comment">//赋值初始0</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(A[i]&gt;<span class="number">0</span>&amp;&amp;A[i]&lt;=n)&#123;</span><br><span class="line">B[A[i]<span class="number">-1</span>]=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(B[i]==<span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> i+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="线性表链式存储"><a href="#线性表链式存储" class="headerlink" title="线性表链式存储"></a>线性表链式存储</h1><h2 id="单链表"><a href="#单链表" class="headerlink" title="单链表"></a>单链表</h2><h3 id="单链表的定义"><a href="#单链表的定义" class="headerlink" title="单链表的定义"></a>单链表的定义</h3><hr><ul><li>定义结构体</li><li>初始化</li><li>判空</li></ul><div class="tabs" id="test1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test1-1">不带头结点的链表</button></li><li class="tab"><button type="button" data-href="#test1-2">带头结点链表</button></li><li class="tab"><button type="button" data-href="#test1-3">区别</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test1-1"><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义单链表结点类型</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">LNode</span>&#123;</span></span><br><span class="line">ElemType data;<span class="comment">//每个节点存放一个数据元素</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LNode</span> *<span class="title">next</span>;</span><span class="comment">//指针指向下一个节点</span></span><br><span class="line">&#125;LNode *LinkList;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//初始化一个空的单链表</span></span><br><span class="line"><span class="type">bool</span> <span class="title function_">InitList</span><span class="params">(LinkList &amp;L)</span>&#123;</span><br><span class="line">L=<span class="literal">NULL</span>; <span class="comment">//空表，暂时还没有任何结点,同时为了防止脏数据</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//判断单链表是否为空</span></span><br><span class="line"><span class="type">bool</span> <span class="title function_">Empty</span><span class="params">(LinkList L)</span>&#123;</span><br><span class="line"><span class="keyword">if</span> (L =<span class="literal">NULL</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">LinkList L; <span class="comment">//声明一个指向单链表的指针</span></span><br><span class="line"><span class="comment">//初始化一个空表</span></span><br><span class="line">InitList(L);</span><br><span class="line">....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-2"><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义单链表结点类型</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">LNode</span>&#123;</span></span><br><span class="line">ElemType data;<span class="comment">//每个节点存放一个数据元素</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LNode</span> *<span class="title">next</span>;</span><span class="comment">//指针指向下一个节点</span></span><br><span class="line">&#125;LNode *LinkList;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//初始化一个空的单链表</span></span><br><span class="line"><span class="type">bool</span> <span class="title function_">InitList</span><span class="params">(LinkList &amp;L)</span>&#123;</span><br><span class="line">L=(LinkList) <span class="built_in">malloc</span>(<span class="keyword">sizeof</span> (LNode));</span><br><span class="line"><span class="keyword">if</span>(L==<span class="literal">NULL</span>)&#123; <span class="comment">//内存不足，分配失败</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">L-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//判断单链表是否为空</span></span><br><span class="line"><span class="type">bool</span> <span class="title function_">Empty</span><span class="params">(LinkList L)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(L-&gt;next==<span class="literal">NULL</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">LinkList L; <span class="comment">//声明一个指向单链表的指针</span></span><br><span class="line"><span class="comment">//初始化一个空的表</span></span><br><span class="line">InitList(L);</span><br><span class="line">....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-3"><p><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304081438655.png" alt="image.png"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="单链表的插入"><a href="#单链表的插入" class="headerlink" title="单链表的插入"></a>单链表的插入</h3><hr><div class="tabs" id="test1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test1-1">按位插入不带头结点</button></li><li class="tab"><button type="button" data-href="#test1-2">按位插入带头结点</button></li><li class="tab"><button type="button" data-href="#test1-3">指定结点的前插操作O(n)</button></li><li class="tab"><button type="button" data-href="#test1-4">指定结点的前插操作O(1)</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test1-1"><p><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304081503593.png" alt="image.png"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-2"><p><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304081501067.png" alt="image.png"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-3"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">指定结点，这种方式，先找到指定节点的前驱结点--&gt;遍历</span><br><span class="line">平均复杂度O(n)</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304081605285.png" alt="image.png"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-4"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">这种方式，无需找到指定结点前驱结点，先插入到后面，然后交换data,等效为前插</span><br><span class="line">O(1)</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304081550682.png" alt="image.png"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="单链表的删除"><a href="#单链表的删除" class="headerlink" title="单链表的删除"></a>单链表的删除</h3><hr><div class="note blue [icon] [style] flat"><p>这里就不讨论不带头结点的链表删除情况了</p></div><div class="tabs" id="test1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test1-1">按位序删除</button></li><li class="tab"><button type="button" data-href="#test1-2">指定结点删除</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test1-1"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">按位置删除，只能通过遍历找到第i-1个结点</span><br><span class="line">最坏，平均都是O(n)</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304081615962.png" alt="image.png"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-2"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">这种指定节点删除方式，时间复杂度`O(1)`,但是极限情况，当p最后结点的时候</span><br><span class="line">就无法通过转移数据的方式完成删除</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304081618302.png" alt="image.png"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="单链表查找"><a href="#单链表查找" class="headerlink" title="单链表查找"></a>单链表查找</h3><hr><h4 id="按位查找-1"><a href="#按位查找-1" class="headerlink" title="按位查找"></a>按位查找</h4><p><code>时间复杂度O(n)</code><br><div class="tabs" id="test1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test1-1">优化前</button></li><li class="tab"><button type="button" data-href="#test1-2">优化后</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test1-1"><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//按位置查找  </span></span><br><span class="line"> LinkList <span class="title function_">GetEle_by_pos</span><span class="params">(LinkList L,<span class="type">int</span> pos)</span>&#123;  </span><br><span class="line"> <span class="comment">//说明：L头结点的位置是0</span></span><br><span class="line">    <span class="keyword">if</span>(pos&lt;<span class="number">1</span>)&#123;  </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">if</span>(pos==<span class="number">0</span>)&#123;  </span><br><span class="line">        <span class="keyword">return</span> L;  </span><br><span class="line">    &#125;  </span><br><span class="line">    Linklist p;</span><br><span class="line">    p=L;</span><br><span class="line">    <span class="type">int</span> i=<span class="number">0</span>;  </span><br><span class="line">    <span class="keyword">while</span>(p!=<span class="literal">NULL</span>&amp;&amp;i&lt;pos)&#123;  </span><br><span class="line">        p=p-&gt;next;  </span><br><span class="line">        i++;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> p;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-2"><ul><li><code>无需再定义一个p指针用来遍历，直接用头结点L进行遍历，然后返回L，由于L没有用引用,最终并不会改变L</code><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//按位置查找  </span></span><br><span class="line"> LinkList <span class="title function_">GetEle_by_pos</span><span class="params">(LinkList L,<span class="type">int</span> pos)</span>&#123;  </span><br><span class="line"> <span class="comment">//说明：L头结点的位置是0</span></span><br><span class="line">    <span class="keyword">if</span>(pos&lt;<span class="number">1</span>)&#123;  </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">if</span>(pos==<span class="number">0</span>)&#123;  </span><br><span class="line">        <span class="keyword">return</span> L;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="type">int</span> i=<span class="number">0</span>;  </span><br><span class="line">    <span class="keyword">while</span>(L&amp;&amp;i&lt;pos)&#123;  </span><br><span class="line">        L=L-&gt;next;  </span><br><span class="line">        i++;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> L;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div></p><h4 id="按值查找-1"><a href="#按值查找-1" class="headerlink" title="按值查找"></a>按值查找</h4><p><code>时间复杂度O(n)</code><br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//按值查找，找到数据域==e的结点</span></span><br><span class="line">Linklist <span class="title function_">LocateElem</span><span class="params">(LinkList L,ElemType e)</span>&#123;</span><br><span class="line">L=L-&gt;next;</span><br><span class="line"><span class="comment">//从第1个结点开始查找数据域为e的结点</span></span><br><span class="line"><span class="keyword">while</span> (L !=<span class="literal">NULL</span>&amp;&amp;L-&gt;data!=e)</span><br><span class="line">L = L-&gt;next;</span><br><span class="line"><span class="keyword">return</span> L;<span class="comment">//找到后返回该结点指针，否则返回WULL</span></span><br></pre></td></tr></table></figure></p><h4 id="统计表长"><a href="#统计表长" class="headerlink" title="统计表长"></a>统计表长</h4><p><code>时间复杂度O(n)</code></p><h3 id="单链表建立"><a href="#单链表建立" class="headerlink" title="单链表建立"></a>单链表建立</h3><h4 id="头插法"><a href="#头插法" class="headerlink" title="头插法"></a>头插法</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">list_head_insert</span><span class="params">(LNode* &amp;L)</span>&#123;  </span><br><span class="line">    L= (LinkList)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));<span class="comment">//给L申请一个头结点结点空间  </span></span><br><span class="line">    L-&gt;next=<span class="literal">NULL</span>;  </span><br><span class="line">    ElemType x;<span class="comment">//读取的第一个元素  </span></span><br><span class="line">    LinkList s;<span class="comment">//用来指向新节点  </span></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x);  </span><br><span class="line">    <span class="keyword">while</span> (x!=<span class="number">9999</span>)&#123;  </span><br><span class="line">        s=(LinkList) <span class="built_in">malloc</span>(<span class="keyword">sizeof</span> (LNode));<span class="comment">//给s申请一个新的空间  </span></span><br><span class="line">        s-&gt;data=x;  </span><br><span class="line">        s-&gt;next=L-&gt;next;<span class="comment">//实现头插法，s成为第一个结点  </span></span><br><span class="line">        L-&gt;next=s;<span class="comment">//L作为头结点，任然指向第一个结点  </span></span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x);<span class="comment">//读取x的值  </span></span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><p><code>重要性质：头插法实现的链表数据是逆置的，用于链表的逆置</code><br><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304091654816.png" alt="image.png"><br><code>链表逆置：循环依次读取老链表数据，然后用头插法依次建立新链表/再次用头插法插入到之后，这样就是实现了链表逆置</code></p><h4 id="尾插法"><a href="#尾插法" class="headerlink" title="尾插法"></a>尾插法</h4><p><code>时间复杂度O(n)</code><br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//尾插法新建链表  </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">list_tail_insert</span><span class="params">(LinkList &amp;L)</span>&#123;  </span><br><span class="line">    L=(LinkList) <span class="built_in">malloc</span>(<span class="keyword">sizeof</span> (LNode));  </span><br><span class="line">    L-&gt;next=<span class="literal">NULL</span>;  </span><br><span class="line">    ElemType x;  </span><br><span class="line">    LNode *s,*r=L;<span class="comment">//s指向新节点，r指向尾结点 ,将L赋给s,r ,相当于s,r,L都是头结点</span></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x);  </span><br><span class="line">    <span class="keyword">while</span>(x!=<span class="number">9999</span>)&#123;  </span><br><span class="line">        s=(LinkList) <span class="built_in">malloc</span>(<span class="keyword">sizeof</span> (LNode));  </span><br><span class="line">        s-&gt;data=x;  </span><br><span class="line">        r-&gt;next=s;  </span><br><span class="line">        r=s;  <span class="comment">//将s赋给r,r重新指向尾结点</span></span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x);  </span><br><span class="line">    &#125;  </span><br><span class="line">    r-&gt;next=<span class="literal">NULL</span>;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure></p><h2 id="双链表"><a href="#双链表" class="headerlink" title="双链表"></a>双链表</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">为了克服单链表无法直接通过一个结点访问其前驱</span><br><span class="line">提出了双链表</span><br><span class="line">双链表结点结构体，有两个指针，一个指向前驱，另一个指向后继</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//双链表中结点类型的描述如下：</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title function_">DNode</span><span class="params">(            <span class="comment">//定义双链表结点类型</span></span></span><br><span class="line"><span class="params">ElemType data;               <span class="comment">//数据域</span></span></span><br><span class="line"><span class="params"><span class="keyword">struct</span> DNode *prior,*next;   <span class="comment">//前驱和后继指针</span></span></span><br><span class="line"><span class="params">&#125;DNode,*DLinklist;</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304191402515.png" alt="image.png"></p><h2 id="循环单链表"><a href="#循环单链表" class="headerlink" title="循环单链表"></a>循环单链表</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">在循环单链表中，表尾结点*r的next域指向L，故表中没有指针域为NULL的结点，因此，</span><br><span class="line">循环单链表的判空条件不是头结点的指针是否为空，而是它是否等于头指针。</span><br><span class="line"></span><br><span class="line">循环单链表的插入、删除算法与单链表的几乎一样，所不同的是若操作是在表尾进行，则执</span><br><span class="line">行的操作不同，以让单链表继续保持循环的性质。当然，正是因为循环单链表是一个“环”，因</span><br><span class="line">此在任何一个位置上的插入和删除操作都是等价的，无须判断是否是表尾。</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304191402323.png" alt="image.png"></p><h2 id="静态链表"><a href="#静态链表" class="headerlink" title="静态链表"></a>静态链表</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">静态链表借助数组，表示链式存储结构</span><br><span class="line">需要大片的连续的空间，删除或增加结点不需要移动其他元素</span><br><span class="line">结点有指针域(下一个结点的数组下标)，数据域(存储的数据)；</span><br><span class="line">静态链表以next=-1表示结束</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> Maxsize 50           <span class="comment">//静态链表的最大长度</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span>              <span class="comment">//静态链表结构类型的定义</span></span><br><span class="line">ElemType data;               <span class="comment">//存储数据元素</span></span><br><span class="line"><span class="type">int</span> next;                    <span class="comment">//下一个元素的数组下标</span></span><br><span class="line">&#125;SLinkList [Maxsize];</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304191339715.png" alt="image.png"></p><h2 id="课后习题-2"><a href="#课后习题-2" class="headerlink" title="课后习题"></a>课后习题</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1.静态链表中指针表示的是（C）。</span></span><br><span class="line"><span class="comment">A.下一元素的地址</span></span><br><span class="line"><span class="comment">B.内存储器地址</span></span><br><span class="line"><span class="comment">C.下一个元素在数组中的位置</span></span><br><span class="line"><span class="comment">D.左链或右链指向的元素的地址</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">解析：静态链表就是用数组(顺序存储)的链表</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">2.一个链表最常用的操作是在最后一个元素后插入一个元素和删除第一个元素，则选用（C）</span></span><br><span class="line"><span class="comment">最节省时间。</span></span><br><span class="line"><span class="comment">A.不带头结点的单循环链表</span></span><br><span class="line"><span class="comment">B.双链表</span></span><br><span class="line"><span class="comment">C不带头结点且有尾指针的单循环链表</span></span><br><span class="line"><span class="comment">D.单链表</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">3.[2021统考真题]已知头指针h指向一个带头结点的非空单循环链表，结点结构为</span></span><br><span class="line"><span class="comment">【data next】</span></span><br><span class="line"><span class="comment">,其中next是指向直接后继结，点的指针，p是尾指针，q是临时指针。现要</span></span><br><span class="line"><span class="comment">删除该链表的第一个元素，正确的语句序列是（D）。</span></span><br><span class="line"><span class="comment">A.h-&gt;nextsh-&gt;next-&gt;next;q=h-&gt;next;free(q)</span></span><br><span class="line"><span class="comment">B.q=h-&gt;next;h-&gt;next=h-&gt;next-&gt;next;free(q);</span></span><br><span class="line"><span class="comment">C.q=h-&gt;next;h-&gt;next=q-&gt;next;if(p!=q) p=h;free(q);.</span></span><br><span class="line"><span class="comment">D.q=h-&gt;next;h-&gt;next=q-&gt;next;if(p==q) p=h;free(q);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">解析：如果删除的元素是尾结点，则需要判断是否是尾结点，是则将尾指针指向头结点</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">4.[2009统考真题]已知一个带有表头结，点的单链表，结点结构为</span></span><br><span class="line"><span class="comment">data link</span></span><br><span class="line"><span class="comment">假设该链表只给出了头指针11st。在不改变链表的前提下，请设计一个尽可能高效的</span></span><br><span class="line"><span class="comment">算法，查找链表中倒数第k个位置上的结点(k为正整数)。若查找成功，算法输出该结</span></span><br><span class="line"><span class="comment">点的data域的值，并返回l;否则，只返回0。要求：</span></span><br><span class="line"><span class="comment">1)描述算法的基本设计思想。</span></span><br><span class="line"><span class="comment">2)描述算法的详细实现步骤。</span></span><br><span class="line"><span class="comment">3)根据设计思想和实现步骤，采用程序设计语言描述算法（使用C、C++或Java语言</span></span><br><span class="line"><span class="comment">实现），关健之处请给出简要注释。</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//基本思路：设置p、q两个指针，p指针先走当p指针走到底k的结点时，q开始移动，当p移动到尾部时，q停止</span></span><br><span class="line"><span class="comment">//此时q所指得结点就是倒数第k个结点</span></span><br><span class="line"></span><br><span class="line">LinkList <span class="title function_">search_k</span><span class="params">(LinkList L,<span class="type">int</span> k)</span>&#123;  </span><br><span class="line">    <span class="type">int</span> count=<span class="number">0</span>;  </span><br><span class="line">    LinkList p=L-&gt;next;  </span><br><span class="line">    LinkList q=L-&gt;next;<span class="comment">//p、q起点可以不是L-&gt;next,因为求得是倒数，只要倒数个数比起点更右端即可  </span></span><br><span class="line">    <span class="keyword">while</span>(p!=<span class="literal">NULL</span>)&#123;  </span><br><span class="line">        <span class="keyword">if</span>(count&lt;k)&#123;  </span><br><span class="line">            p=p-&gt;next;  </span><br><span class="line">            count++;  </span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;  </span><br><span class="line">            p=p-&gt;next;  </span><br><span class="line">            q=q-&gt;next;    </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">if</span>(count&lt;k)&#123;  </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> q;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">5.[2012统考真题]假定采用带头结点的单链表保存单词，当两个单词有相同的后缎时，</span></span><br><span class="line"><span class="comment">可共享相同的后缀存储空间；例如，loading和being的存储映像如下图所示。</span></span><br><span class="line"><span class="comment">   str1</span></span><br><span class="line"><span class="comment">  头结点1 -&gt; l -&gt; o -&gt; a -&gt; d ----&gt; i -&gt; n -&gt; g</span></span><br><span class="line"><span class="comment">                                   ^</span></span><br><span class="line"><span class="comment">   str2                            |</span></span><br><span class="line"><span class="comment">  头结点2 -&gt; b -&gt; e ----------------</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">设str1和str2分别指向两个单词所在单链表的头结点，链表结，点结构为[data next]</span></span><br><span class="line"><span class="comment">请设计一个时间上尽可能高效的算法，找出由str1和str2所指向两个链表共同后缀</span></span><br><span class="line"><span class="comment">的起始位置(如图中字符1所在结点的位置p)。要求：</span></span><br><span class="line"><span class="comment">1)给出算法的基本设计思想。</span></span><br><span class="line"><span class="comment">2)根据设计思想，采用C或C++或Java语言描述算法，关键之处给出注释。</span></span><br><span class="line"><span class="comment">3)说明你所设计算法的时间复杂度。  </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//解：因为是单链表无法，从后往前遍历，于是只能单向从前往后遍历，p 、q指针分别指向str1 str2的头结点，判断str1和str2的长度m、n.如果m&gt;n则p先走，使得p q到尾结点的距离一致。然后p、q共同移动直到遇到结点内容一致</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//遍历两条链表的长度</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">Get_length</span><span class="params">(LinkList L)</span>&#123;</span><br><span class="line"><span class="type">int</span> count=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(L)&#123;</span><br><span class="line">L=L-&gt;next;</span><br><span class="line">count++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//找出共同后缀起始地址</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">find_same_str</span><span class="params">(LinkList str1,LinkList str2)</span>&#123;</span><br><span class="line">m=Get_length(str1);</span><br><span class="line">n=Get_length(str2);</span><br><span class="line"><span class="keyword">for</span>(str1;m&gt;n;m--)&#123;</span><br><span class="line">str1=str1-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(str2;n&gt;m;n--)&#123;</span><br><span class="line">str2=str2-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(str1-&gt;next!=<span class="literal">NULL</span>&amp;&amp;str1-&gt;next!=str2-&gt;next)&#123;</span><br><span class="line">str1=str1-&gt;next;</span><br><span class="line">str2=str2-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//时间复杂度 m+n+(m-n)+2(n-x)=2m+2n-2x 所以时间复杂度为O(m+n)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//6.将链表L&#123;a1,a2 a3 a4 a5...an-2 an-1an&#125;--&gt;L&#123;a1 an a2 an-1 a3...&#125;</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">resort</span><span class="params">(LinkNode *L)</span>&#123;</span><br><span class="line">LinkNode *k,kk=L;</span><br><span class="line">LinkNode *r,s;</span><br><span class="line"><span class="keyword">while</span>(kk-&gt;next)&#123;</span><br><span class="line">k=k-&gt;next;</span><br><span class="line">kk=kk-&gt;next;</span><br><span class="line"><span class="keyword">if</span>(kk-&gt;next!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">kk=kk-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//将链表后半段逆置</span></span><br><span class="line">kk=k-&gt;next;</span><br><span class="line"><span class="keyword">while</span>(kk)&#123;</span><br><span class="line">r=kk-&gt;next;</span><br><span class="line">kk-&gt;next=k-&gt;next;</span><br><span class="line">k-&gt;next=kk;</span><br><span class="line">kk=r;</span><br><span class="line">&#125;</span><br><span class="line">s=L-&gt;next;</span><br><span class="line">kk=k-&gt;next;</span><br><span class="line"><span class="keyword">while</span>(kk)&#123;</span><br><span class="line">r=kk-&gt;next;</span><br><span class="line">kk-&gt;next=s-&gt;next;</span><br><span class="line">s-&gt;next=q;</span><br><span class="line">s=q-&gt;next;</span><br><span class="line">kk=r;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h1><h2 id="栈的实现"><a href="#栈的实现" class="headerlink" title="栈的实现"></a>栈的实现</h2><hr><p><code>定义</code>：一种只允许在一端进行插入或删除<code>的线性表</code><br><div class="tabs" id="test1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test1-1">栈实现(顺序存储)</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test1-1"><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> MaxSize 10</span></span><br><span class="line">typeof <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line"><span class="type">int</span> data[MaxSize];</span><br><span class="line"><span class="type">int</span> top;  <span class="comment">//栈针</span></span><br><span class="line">&#125;SqStack</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">init</span><span class="params">(SqStack &amp;S)</span>&#123;</span><br><span class="line">S.top=<span class="number">-1</span>;  <span class="comment">//初始指向-1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//判空</span></span><br><span class="line"><span class="type">bool</span>  <span class="title function_">isEmpty</span><span class="params">(SqStack &amp;S)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(S.top==<span class="number">-1</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//入栈</span></span><br><span class="line"><span class="type">bool</span> <span class="title function_">push</span><span class="params">(SqStack &amp;S,ElemType x)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(S.top==MaxSize<span class="number">-1</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">S.data[++S.top]=x; <span class="comment">//先+，后赋值</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//出栈</span></span><br><span class="line"><span class="type">bool</span> <span class="title function_">pop</span><span class="params">(SqStack &amp;S,ElemType &amp;x)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(S.top==<span class="number">-1</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">x=S.data[S.top--]; <span class="comment">//先赋值，后-</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div></p><h2 id="栈在括号匹配中应用"><a href="#栈在括号匹配中应用" class="headerlink" title="栈在括号匹配中应用"></a>栈在括号匹配中应用</h2><hr><blockquote><p><code>括号匹配问题</code><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">最后出现的左括号，最先被匹配</span><br></pre></td></tr></table></figure><br><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305051432873.png" alt="image.png"><br><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305051433730.png" alt="image.png"><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">遇到左括号--&gt;入栈</span><br><span class="line">遇到右括号--&gt;出栈，并且匹配检查</span><br></pre></td></tr></table></figure><br><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305051434299.png" alt="image.png"></p><p><code>算法实现</code><br><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305051439016.png" alt=""></p></blockquote><h2 id="栈在表达式求值应用"><a href="#栈在表达式求值应用" class="headerlink" title="栈在表达式求值应用"></a>栈在表达式求值应用</h2><hr><p><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305051442887.png" alt="image.png"></p><blockquote><p><code>前缀、中缀、后缀表达式</code><br><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305051522948.png" alt="image.png"></p><p><code>中缀转后缀表达式</code><br><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305051524252.png" alt="image.png"><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">虽然两种后序表达式都是正确的，但是由于计算机运算遵循左优先原则，尽可能的先算左边运算符</span><br><span class="line">这样就保证运算顺序唯一</span><br></pre></td></tr></table></figure><br><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305051529561.png" alt="image.png"></p><p><code>用栈实现后缀表达式的计算</code><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1.从左往右依次扫描</span><br><span class="line">2.扫描到数字，则压入栈</span><br><span class="line">3.扫描到运算符，则弹出两个栈顶元素，执行相应运算，运算结果压回栈顶，继续1</span><br></pre></td></tr></table></figure><br><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305051548740.png" alt="image.png"></p><p><code>用栈实现中缀表达式转后缀表达式</code><br><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305051613746.png" alt="image.png"></p><p><code>用栈实现中缀表达式求值</code><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">中缀转后缀+后缀计算</span><br><span class="line"></span><br><span class="line">1.扫描中缀表达式，从左往右</span><br><span class="line">2.扫描到数，入数栈；扫描到符号，入符号栈</span><br><span class="line">3.扫描到符号如果前面有优先级更高的，则要先弹出高优先级，再入栈当前符号，并弹出两个操作数</span><br><span class="line">  与弹出的符号运算，并将结果入回数栈顶部</span><br><span class="line">4.如果扫描到的符号前面没有优先级更高的，则无需操作，继续扫描</span><br><span class="line">5.遇到 ( 则 直接入栈，遇到 ) 依次弹出栈内运算符，并弹出相应数进行运算，直到弹出 ( 为止</span><br></pre></td></tr></table></figure><br><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305051619822.png" alt="image.png"></p></blockquote><h2 id="栈在递归中的应用"><a href="#栈在递归中的应用" class="headerlink" title="栈在递归中的应用"></a>栈在递归中的应用</h2><hr><blockquote><p><code>递归工作栈</code><br><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305051744820.png" alt="image.png"></p></blockquote><h2 id="课后习题-3"><a href="#课后习题-3" class="headerlink" title="课后习题"></a>课后习题</h2><div class="tabs" id="test1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test1-1">1</button></li><li class="tab"><button type="button" data-href="#test1-2">2</button></li><li class="tab"><button type="button" data-href="#test1-3">3</button></li><li class="tab"><button type="button" data-href="#test1-4">3</button></li><li class="tab"><button type="button" data-href="#test1-5">4</button></li><li class="tab"><button type="button" data-href="#test1-6">5</button></li><li class="tab"><button type="button" data-href="#test1-7">6</button></li><li class="tab"><button type="button" data-href="#test1-8">7</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test1-1"><p><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305051804701.png" alt="image.png"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-2"><p><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305051939158.png" alt="image.png"><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">基本操作是指能直接实现的操作，ACD都属于基本操作，但是B栈不能直接删除栈底元素，需要一个一个移开上面元素，再删除，再放回之前的元素</span><br></pre></td></tr></table></figure></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-3"><p><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305052010610.png" alt="image.png"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-4"><p><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305052024207.png" alt="image.png"><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">链栈,头指针为栈顶--&gt;才能实现先进后出</span><br></pre></td></tr></table></figure></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-5"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">3个不同元依次进栈，能得到（B)种不同的出栈序列。</span><br><span class="line">A.4</span><br><span class="line">B.5</span><br><span class="line">C.6</span><br><span class="line">D.7</span><br><span class="line"></span><br><span class="line">解析：卡特兰数，(6x5x4)/(3x2x1)/4=5</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-6"><p><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305052151736.png" alt="image.png"><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">标识符可以字母，下划线开头，不可以数字开头</span><br></pre></td></tr></table></figure></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-7"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">共享栈，可以节省存储空间，降低发生上溢的可能</span><br><span class="line"></span><br><span class="line">共享栈是一种两个栈共享同一片存储空间的数据结构。它的特点是两个栈的栈底在这片存储空间的两</span><br><span class="line">端，当元素入栈时，两个栈的栈顶指针相向而行。这样可以更有效地利用存储空间，只有在整个空间</span><br><span class="line">满时才会发生上溢</span><br><span class="line"></span><br><span class="line">共享栈栈满条件判断有两种：</span><br><span class="line">栈顶指针初始指向-1:</span><br><span class="line">栈顶指针初始指向0：</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305052212674.png" alt="image.png"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-8"><p><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305052231925.png" alt="image.png"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h1><h2 id="队列实现"><a href="#队列实现" class="headerlink" title="队列实现"></a>队列实现</h2><hr><p><code>是只允许在一端进行插入，在另一端删除的线性表</code><br><div class="tabs" id="test1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test1-1">队列(顺序存储)</button></li><li class="tab"><button type="button" data-href="#test1-2">队列(链式存储-带头结点)</button></li><li class="tab"><button type="button" data-href="#test1-3">队列(链式存储-不带头结点)</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test1-1"><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> MaxSize 10</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line"><span class="type">int</span> data[MaxSize];</span><br><span class="line"><span class="type">int</span> rear,front;</span><br><span class="line">&#125;SqSueue;</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">InitQueue</span><span class="params">(SqQueue &amp;Q)</span>&#123;</span><br><span class="line">Q.rear=Q.front=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//判空</span></span><br><span class="line"><span class="type">bool</span> <span class="title function_">IsEmpty</span><span class="params">(SqQueue Q)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(Q.rear==Q.front)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>; <span class="comment">//为空</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//判断满</span></span><br><span class="line"><span class="type">bool</span> <span class="title function_">IsFull</span><span class="params">(SqQueue Q)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>((Q.rear+<span class="number">1</span>)%MaxSize==q.front)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//入队</span></span><br><span class="line"><span class="type">bool</span> <span class="title function_">EnQueue</span><span class="params">(SqQueue &amp;Q,<span class="type">int</span> x)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(IsFull(Q))&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">Q.data[Q.rear]=x;</span><br><span class="line">Q.rear=(Q.rear+<span class="number">1</span>)%MaxSize; </span><br><span class="line"><span class="comment">//取模，例如x%7,最终得到的值只能是0,1,2,3,4,5,6</span></span><br><span class="line"><span class="comment">//循环往复变化，采用取模方式的队列，被称为&quot;循环队列&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//出队</span></span><br><span class="line"><span class="type">bool</span> <span class="title function_">OutQueue</span><span class="params">(SqQueue &amp;Q,<span class="type">int</span> x)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(IsEmpty)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">Q.front=(Q.front+<span class="number">1</span>)%MaxSize;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305051245346.png" alt="image.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- 队列中元素个数=(rear+MaxSize-front)%MaxSize</span><br><span class="line">- 队列中最多存储MaxSize-1个元素，留一个空位给rear用来(rear+1)%MaxSize判定</span><br><span class="line">  否则，全装满，rear=front,那么判空，判满无法区分</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">另一种判断队列空满的方法，增加辅助变量，可以充分利用存储单元，可以装满</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305051252761.png" alt="image.png"></p><p><code>回顾</code><br><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305051257769.png" alt="image.png"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-2"><p><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305051400428.png" alt="image.png"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">LinkNode</span>&#123;</span></span><br><span class="line"><span class="type">int</span> data;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LinkNode</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;LinkNode;*LinkList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">LinkNode *front,*rear;</span><br><span class="line">&#125;LinkQueue;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化，带头结点                           </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">InitQueue</span><span class="params">(LinkQueue &amp;Q)</span>&#123;                </span><br><span class="line">L=(LinkList)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LinkNode));        </span><br><span class="line">Q.front=Q.rear=L;                        </span><br><span class="line">Q.front-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//判空，带头结点                             </span></span><br><span class="line"><span class="type">bool</span> <span class="title function_">IsEmpty</span><span class="params">(LinkQueue Q)</span>&#123;                   </span><br><span class="line"><span class="keyword">if</span>(Q.front==Q.rear)&#123;                         </span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;                                 </span><br><span class="line">&#125;                                           </span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;                               </span><br><span class="line">&#125;                                            </span><br><span class="line"></span><br><span class="line"><span class="comment">//无需判满，链表可以无限长</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//入队，带头结点                             </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">EnQueue</span><span class="params">(LinkQueue &amp;Q,<span class="type">int</span> x)</span>&#123;           </span><br><span class="line">LinkList s;                                  </span><br><span class="line">s=(Linklist)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LinkNode));        </span><br><span class="line">s-&gt;data=x;                                     </span><br><span class="line">s-&gt;next=<span class="literal">NULL</span>;                                </span><br><span class="line">Q.rear-&gt;next=s;                              </span><br><span class="line">Q.rear=s;                                        </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//出队，带头结点                             </span></span><br><span class="line"><span class="type">bool</span> <span class="title function_">OutQueue</span><span class="params">(LinkQueue &amp;Q,<span class="type">int</span> x)</span>&#123;  <span class="comment">//x将出队元素带出</span></span><br><span class="line"><span class="keyword">if</span>(IsEmpty)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">LinkList p=Q.front-&gt;next;</span><br><span class="line">x=p-&gt;data;</span><br><span class="line">Q.front-&gt;next=p-&gt;next;</span><br><span class="line"><span class="keyword">if</span>(Q.rear==p)&#123;  <span class="comment">//如果是出队队尾元素，要考虑rear的变化</span></span><br><span class="line">Q.rear=Q.front;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">free</span>(p);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;                            </span><br><span class="line"></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-3"><p><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305051416101.png" alt="image.png"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//初始化，不带头结点</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">InitQueue</span><span class="params">(LinkQueue &amp;Q)</span>&#123;</span><br><span class="line">Q.front=<span class="literal">NULL</span>;</span><br><span class="line">Q.rear=<span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//盘空，不带头结点</span></span><br><span class="line"><span class="type">bool</span> <span class="title function_">IsEmpty</span><span class="params">(LinkQueue Q)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(Q.front==Q.rear==<span class="literal">NULL</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//入队，不带头结点</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">EnQueue</span><span class="params">(LinkQueue &amp;Q,<span class="type">int</span> x)</span>&#123;</span><br><span class="line">linkList s;</span><br><span class="line">s=(Linklist)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LinkNode));</span><br><span class="line">s-&gt;data=x; </span><br><span class="line">s-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">if</span>(Q.front==<span class="literal">NULL</span>)&#123;</span><br><span class="line">Q.front-&gt;next=s;</span><br><span class="line">Q.rear=s;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">Q.rear-&gt;next=s;</span><br><span class="line">    Q.rear=s;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//出队，不带头结点</span></span><br><span class="line"><span class="type">bool</span> <span class="title function_">OutQueue</span><span class="params">(LinkQueue &amp;Q,<span class="type">int</span> x)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(Q.front==<span class="literal">NULL</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">Linklist p=Q.front;</span><br><span class="line">x=p-&gt;data;</span><br><span class="line">Q.front=p-&gt;next;</span><br><span class="line"><span class="keyword">if</span>(p==Q.rear)&#123;  <span class="comment">//如果删除的最后一元素</span></span><br><span class="line">Q.rear=<span class="literal">NULL</span>:</span><br><span class="line">Q.front=<span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">free</span>(p);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div></p><blockquote><p><code>注意</code>：顺序存储，<code>rear</code>指向的是尾部元素的后一位；链式存储，<code>rear</code>指向的就是尾部元素</p></blockquote><h2 id="双端队列"><a href="#双端队列" class="headerlink" title="双端队列"></a>双端队列</h2><hr><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">主要用于判断输出序列的合法性</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305051419921.png" alt="image.png"></p><p><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305051424490.png" alt="image.png"></p><h2 id="课后习题-4"><a href="#课后习题-4" class="headerlink" title="课后习题"></a>课后习题</h2><hr><div class="tabs" id="test1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test1-1">1</button></li><li class="tab"><button type="button" data-href="#test1-2">2</button></li><li class="tab"><button type="button" data-href="#test1-3">3</button></li><li class="tab"><button type="button" data-href="#test1-4">4</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test1-1"><p><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305061135804.png" alt="image.png"><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这题实质上问的需要多少个队列</span><br></pre></td></tr></table></figure></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-2"><p><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305061155791.png" alt="image.png"><br><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305061203327.png" alt="image.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">迷宫求解，本质是岔路选择，遇到选择则入栈</span><br><span class="line"></span><br><span class="line">缓冲区，本质是一个队列，将信息，按原本顺序输出(先入先出)，作用是缓存信息(延长信息存在时间)，以防止计算机反应慢接收不到</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-3"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">1.一个问题的递归算法求解和其相对应的非递归算法求解，（B）。</span><br><span class="line">A.递归算法通常效率高一些 B.非递归算法通常效率高一些</span><br><span class="line">C.两者相同    D.无法比较</span><br><span class="line"></span><br><span class="line">解析：递归算法--&gt;代码简洁，容易理解，但是效率低，因为递归存在大量重复运算；非递归算法--&gt;代码繁琐，但是效率较高，没有多余运算</span><br><span class="line"></span><br><span class="line">------</span><br><span class="line"></span><br><span class="line">2.执行（B）操作时，需要使用队列作为辅助存储空间。</span><br><span class="line">A.查找散列（哈希）表 B 广度优先搜索图</span><br><span class="line">C．前序（根）遍历二叉树 D.深度优先搜索图</span><br><span class="line"></span><br><span class="line">解析：</span><br><span class="line">B：图的广度优先遍历：以广度为优先考虑，使用队列</span><br><span class="line">C：前中后序遍历二叉树，在递归方法中都隐含 递归栈。 那么非递归方法中必然是使用栈来进行这些  </span><br><span class="line">   相关操作的。</span><br><span class="line"></span><br><span class="line">3.下列说法中正确的是（A）。</span><br><span class="line">A.消除递归不一定需要使用栈</span><br><span class="line">B。对同一输入序列进行两组不同的合法入栈和出栈组合操作，所得的输出序列也一定相同</span><br><span class="line">C.通常使用队列来处理函数或过程调用</span><br><span class="line">D.队列和栈都是运算受限的线性表，只允许在表的两端进行运算</span><br><span class="line"></span><br><span class="line">解析：A本来没必要使用递归的算法，使用递归，那么消除递归就不一定需要使用栈替代</span><br><span class="line"></span><br><span class="line">4.为解决计算包主机省打印机之间速度不匹配问题，通常设置一个打印数缓冲区，庄机将要输出的数据依次写入该缓冲，而打机则依次从该缓冲区中取出数据。该缓冲区的逻辑结应该是(A)</span><br><span class="line">A.栈</span><br><span class="line">B.队列</span><br><span class="line">C.树</span><br><span class="line">D.图</span><br><span class="line"></span><br><span class="line">5.某汽车轮渡口，过江渡船每次能载10辆车过江。过江车辆分为客车类和货车类，上渡船有如下规定：同类车先到先上船；客车先于货车上渡船，且每上4辆客车，才允许放上一辆货车；若等待客车不足4辆，则以货车代替；若无货车等待，允许客车都上船。试设计一个算法模拟渡口管理。</span><br><span class="line"></span><br><span class="line">“同类车先到先上船’一一队列。一个队列负责一种车。</span><br><span class="line">接下来是按照条件进行按顺序上车。</span><br><span class="line">每次上限是10，也就是4客车+1货车，4客车+1货车。</span><br><span class="line">最后两个条件，其实就是“没客车的话货车可以替代客车”和“没货车的话客车可以替代货车”。</span><br><span class="line">写两个函数，用于上客车和上货车，每一个内部再进行判断是否够用。</span><br><span class="line">经过上面的过程，整个算法的思路就明确下来了。</span><br><span class="line"></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-4"><p><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305061647514.png" alt="image.png"><br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> MaxSize 100  </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line"><span class="type">int</span> n;        <span class="comment">//保存n</span></span><br><span class="line"><span class="type">double</span> val;   <span class="comment">//保存Pn的值</span></span><br><span class="line">&#125;Stack[MaxSize];</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">comculate</span><span class="params">(<span class="type">int</span> n,<span class="type">int</span> x)</span>&#123;</span><br><span class="line">Stack a; <span class="comment">//结构体数组，最大限制100</span></span><br><span class="line"><span class="type">int</span> top=<span class="number">-1</span>,i;</span><br><span class="line"><span class="keyword">for</span>(i=n;i&gt;=<span class="number">2</span>;i--)&#123;</span><br><span class="line">top++;</span><br><span class="line">a[top].n=i;  </span><br><span class="line">&#125;</span><br><span class="line"><span class="type">double</span> fv1=<span class="number">1</span>,fv2=<span class="number">2</span>*x;</span><br><span class="line"><span class="keyword">while</span>(top&gt;=<span class="number">0</span>)&#123;</span><br><span class="line">a.[top].val=<span class="number">2</span>*x*fv2<span class="number">-2</span>*(a.[top].n)*fv1;</span><br><span class="line">fv1=fv2;</span><br><span class="line">fv2=a.[top].val;</span><br><span class="line">top--;     <span class="comment">//出栈</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(n==<span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> fv1;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">return</span> fv2;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="树与二叉树"><a href="#树与二叉树" class="headerlink" title="树与二叉树"></a>树与二叉树</h1><h2 id="基本术语"><a href="#基本术语" class="headerlink" title="基本术语"></a>基本术语</h2><hr><ul><li><code>分支结点</code>：有左孩子或右孩子或都有的结点</li><li><code>叶子结点</code>：没有左右孩子的结点</li><li><code>结点之间的路径</code>：结点与结点之间的边的数量，只能单方向从上往下</li><li><code>结点的层次(深度)</code>：从上往下数，<code>默认从1开始</code></li><li><code>结点的高度</code>：从下往上数</li><li><code>树的高度(深度)</code></li><li><code>结点的度</code>：结点有多少个分支</li><li><code>树的度</code>：各结点的度的最大值</li><li><code>森林</code>：m个(m&gt;=0)互不相交的树组成</li><li><code>前驱</code>：<code>遍历后的顺序</code>，当前节点的前一个节点为该节点的前驱节点</li><li><code>后继</code>：<code>遍历后的顺序</code>，当前节点的后一个节点为该节点的前驱节点</li></ul><h2 id="树的常考性质"><a href="#树的常考性质" class="headerlink" title="树的常考性质"></a>树的常考性质</h2><hr><ul><li><p>1.结点数=总度数+1<br><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304112248228.png" alt="image.png"></p></li><li><p>2.度为m的树第i层最多有<code>m^(i-1)</code>个结点<br><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304112246945.png" alt="image.png"></p></li><li><p>3.高度为h的m叉树最多有<code>(m^h - 1)/(m - 1)</code>个结点<br><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304112252306.png" alt="image.png"></p></li><li><p>4.具有n个结点的m叉树的最小高度为[logm(n(m-1)+1)]<br><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304112303705.png" alt="image.png"></p></li></ul><ul><li>5.具有n个结点的二叉树，总共有n+1个空链域</li></ul><h2 id="几种特殊的二叉树"><a href="#几种特殊的二叉树" class="headerlink" title="几种特殊的二叉树"></a>几种特殊的二叉树</h2><ul><li><code>满二叉树</code>：度全为2或0</li><li><code>完全二叉树</code>:最多只有一个度为1的结点<br><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304131920559.png" alt="image.png">  </li><li><code>二叉排序树</code>：左子树上所有节点均小于根节点，右子树上均大于根节点</li><li><code>平衡二叉树</code>：树上任意结点的左子树和右子树的深度只差不超过1,能有更高的搜索效率<br><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304131922727.png" alt="image.png"></li></ul><h2 id="二叉树的常考性质"><a href="#二叉树的常考性质" class="headerlink" title="二叉树的常考性质"></a>二叉树的常考性质</h2><p><code>1.具有n个结点的完全二叉树的高度</code><br><code>向上取整</code><br><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304131930292.png" alt="image.png"></p><p><code>向下取整</code><br><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304131934037.png" alt="image.png"></p><p><code>2.完全二叉树，度为0、1、2的结点个数</code><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">假设度为0、1、2的结点个数分别为n0、n1、n2</span><br><span class="line">yw 是完全二叉树</span><br><span class="line">sy n0=0或1</span><br><span class="line">yw n0=n2+1</span><br><span class="line">sy n0+n2--&gt;奇数</span><br><span class="line">sy n0+n2+n0的奇偶性看n1</span><br><span class="line">sy 当n1=1时，结点数是偶数；当n1=0时，结点数为奇数</span><br></pre></td></tr></table></figure></p><h2 id="二叉树的存储结构"><a href="#二叉树的存储结构" class="headerlink" title="二叉树的存储结构"></a>二叉树的存储结构</h2><ul><li><code>顺序存储(指的是顺序表的结构实现)</code>：<ul><li><code>完全二叉树</code><ul><li>如果结点从1开始</li><li>i结点的左孩子：2i</li><li>i结点的右孩子：2i+1</li><li>i的父节点：i/2</li><li>i所在层次：参照3.4</li></ul></li><li><code>不完全二叉树</code><ul><li>判断是否有左右孩子就没有规律了</li><li>这样的顺序表的数组没被填满，造成存储空间浪费</li></ul></li><li><code>结论</code><ul><li>顺序存储只适合于存储完全二叉树</li></ul></li></ul></li><li><code>链式存储(链表结点实现)</code>：</li></ul><h2 id="课后习题-5"><a href="#课后习题-5" class="headerlink" title="课后习题"></a>课后习题</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">1.树的路径长度是指树根到每个结点的路径长的总和，根到每个结点的路径长度的最大值应是树的高度-1</span><br><span class="line"></span><br><span class="line">2.[2010统考真题]在一棵度为4的树T中，若有20个度为4的结点，10个度为3的结</span><br><span class="line">点，1个度为2的结，点，10个度为1的结点，则树T的叶结点个数是（82）</span><br><span class="line"></span><br><span class="line">解析：结点总数=20x4+10x3+1x2+10x1+1=123;又因为结点总数=有度结点（20+10+1+10）+无度结点所以</span><br><span class="line">123-41=82;</span><br><span class="line"></span><br><span class="line">3.度为2的有序树不一定是二叉树，因为，二叉树的每个结点都有左右次序，若一个树有两个结点但是没有左右次序，那么就不算是二叉树</span><br><span class="line"></span><br><span class="line">4.重要--&gt;n个结点的完全二叉树的高度为(log2n) + 1  或log2(n+1)</span><br><span class="line"></span><br><span class="line">5.设二叉树有2n个结点，且m&lt;n,则不可能存在（）的结点。</span><br><span class="line">A.n个度为0</span><br><span class="line">B.2m个度为0</span><br><span class="line">C.2m个度为1</span><br><span class="line">D.2m个度为2</span><br><span class="line"></span><br><span class="line">解析：因为2n=n0 + n1 + 2n2，所以n1=2(n-n2)-1是奇数</span><br><span class="line"></span><br><span class="line">5.重要总结：高度为h的满二叉树的结点个数=2^h-1--&gt;类比，二进制位计算</span><br><span class="line"></span><br><span class="line">6.[2009统考真题]已知一棵完全二叉树的第6层(设根为第1层)有8个叶结，点，则该</span><br><span class="line">完全二叉树的结点个数最多是（）</span><br><span class="line">A.39</span><br><span class="line">B.52</span><br><span class="line">C.111</span><br><span class="line">D.119</span><br><span class="line"></span><br><span class="line">解析：第六层有8个叶子结点，说明树有可能6层有可能7层，最多就是7层的时候，计算得到111</span><br><span class="line"></span><br><span class="line">7.[2011统考真题]若一棵完全二叉树有768个结，点，则该二叉树中叶结点的个数是（）。</span><br><span class="line">A.257</span><br><span class="line">B.258</span><br><span class="line">C.384</span><br><span class="line">D.385</span><br><span class="line"></span><br><span class="line">解析：完全二叉树最后一个分支结点的序号是n/2，有小数舍去小数部分</span><br><span class="line"></span><br><span class="line">8.2018统考真题]设一棵非空完全二叉树T的所有叶结点均位于同一层，且每个非叶结</span><br><span class="line">点都有2个子结点。若T有k个叶结点，则T的结点总数是（）。</span><br><span class="line">A.2k-1</span><br><span class="line">B.2k</span><br><span class="line">C.2^k</span><br><span class="line">D.2^k-1</span><br><span class="line"></span><br><span class="line">解析：A</span><br><span class="line"></span><br><span class="line">9.[2020统考真题]对于任意一棵高度为5且有10个结点的二叉树，若采用顺序存储结构</span><br><span class="line">保存，每个结点占1个存储单元（仅存放结点的数据信息），则存放该二叉树需要的存</span><br><span class="line">储单元数量至少是（）。</span><br><span class="line">A.31</span><br><span class="line">B.16</span><br><span class="line">C.15</span><br><span class="line">D.10</span><br><span class="line"></span><br><span class="line">解析：顺序存储，数组存放，又因为逻辑结构的二叉树高5层，却只有10个结点，说明没有放满</span><br><span class="line">想象成一颗5层的满二叉树 A</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="二叉树的遍历"><a href="#二叉树的遍历" class="headerlink" title="二叉树的遍历"></a>二叉树的遍历</h1><h2 id="先序-深度优先遍历"><a href="#先序-深度优先遍历" class="headerlink" title="先序/深度优先遍历"></a>先序/深度优先遍历</h2><p><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304132223361.png" alt="image.png"></p><p><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304132234459.png" alt="image.png"></p><p><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304132236918.png" alt="image.png"></p><h2 id="层序-广度优先遍历-BFS"><a href="#层序-广度优先遍历-BFS" class="headerlink" title="层序/广度优先遍历(BFS)"></a>层序/广度优先遍历(BFS)</h2><p><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304132249885.png" alt="image.png"></p><p><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304132249734.png" alt="image.png"></p><h2 id="中序遍历"><a href="#中序遍历" class="headerlink" title="中序遍历"></a>中序遍历</h2><p><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304132256749.png" alt="image.png"></p><h2 id="确定一颗二叉树"><a href="#确定一颗二叉树" class="headerlink" title="确定一颗二叉树"></a>确定一颗二叉树</h2><ul><li><code>如果只是给定一个二叉树的前\中\后\层序\遍历序列中的一种，那么是无法确定唯一的一颗二叉树的</code></li><li>至少要知道两种不同遍历的序列：<code>前+中</code>、<code>后+中</code>、<code>层序+中</code></li><li>基本思路都是通过<code>前\后\层序遍历</code>确定根节点，再通过<code>中序遍历</code>确定左右子树</li></ul><div class="tabs" id="test1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test1-1">前序+中序</button></li><li class="tab"><button type="button" data-href="#test1-2">后序+中序</button></li><li class="tab"><button type="button" data-href="#test1-3">层序+中序</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test1-1"><p><code>前+中</code><br>前序遍历，可以确定序列<code>第一个是根节点</code><br>—&gt;然后再中序遍历中找到根节点位置，根节点左边就是<code>左子树</code>，右边就是<code>右子树</code><br>—&gt;接着，可以找出前序遍历中左子树的位置，和右子树的位置，分别看做新的独立二叉树<br>—&gt;找出左子树的根节点，和右子树的根结点，再分别在中序遍历中找出对应根结点位置<br>—&gt;重复直到确定一颗二叉树所有结点位置</p><p><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304132312003.png" alt="image.png"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-2"><p><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304132316904.png" alt="image.png"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-3"><p><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304132317162.png" alt="image.png"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="线索二叉树"><a href="#线索二叉树" class="headerlink" title="线索二叉树"></a>线索二叉树</h1><hr><h2 id="线索二叉树定义"><a href="#线索二叉树定义" class="headerlink" title="线索二叉树定义"></a>线索二叉树定义</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">尾部结点的左右指针，由指向NULL转变为指向前驱和后继</span><br><span class="line">这样有利于二叉树寻找前驱和后继</span><br><span class="line">疑问？那如果左右指针不是空的结点该如何指向自己的前驱后继呢？</span><br></pre></td></tr></table></figure><ul><li><code>注意</code>：这里讲的前驱，后继是指的是遍历后<code>序列</code>顺序的前后结点，不是二叉树结构上的前后关系<br><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304151818186.png" alt="image.png"></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//代码如下</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">ThreadNode</span>&#123;</span></span><br><span class="line">ElemType data;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ThreadNode</span> *<span class="title">lchild</span>,<span class="title">rchild</span></span></span><br><span class="line"><span class="class"><span class="title">int</span> <span class="title">ltag</span>,<span class="title">rtag</span>;</span><span class="comment">//左右线索标记</span></span><br><span class="line">&#125;ThreadNode,*ThreadTree;</span><br><span class="line"></span><br><span class="line"><span class="comment">//当线索标记为1时，左右指针才作为线索，指向前驱后继</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304151824867.png" alt="image.png"></p><p><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304151833943.png" alt="image.png"></p><h2 id="线索二叉树的实现"><a href="#线索二叉树的实现" class="headerlink" title="线索二叉树的实现"></a>线索二叉树的实现</h2><ul><li>这里只举例<code>中序遍历线索化</code></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">本质就是二叉树的中序遍历</span><br><span class="line"></span><br><span class="line">只是在参数里多传递了一个前驱指针pre</span><br><span class="line"></span><br><span class="line">主要结构 左、根、右 --&gt;就是一个中序遍历结构</span><br><span class="line"></span><br><span class="line">pre指向的是p的前驱</span><br><span class="line">当遍历到最底层时，开始执行访问结点操作，也就是中间黄色代码操作</span><br><span class="line">如果p左节点为空，那么可以转为线索指向前驱pre,标记变为1</span><br><span class="line">接着如果pre的右结点有空位，也可以指向前驱p</span><br><span class="line">接着，pre后移为后继p</span><br><span class="line">p后移为后继</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">InThread</span><span class="params">(ThreadTree &amp;p,ThreadTree spre)</span><span class="params">(</span></span><br><span class="line"><span class="params"><span class="keyword">if</span>(p!=<span class="literal">NULL</span>)&#123;</span></span><br><span class="line"><span class="params">InThread(p-&gt;<span class="number">1</span>child,pre); <span class="comment">//递归，线索化左子树</span></span></span><br><span class="line"><span class="params"><span class="keyword">if</span>(p-&gt;lchild==<span class="literal">NULL</span>)(  <span class="comment">//左子树为空，建立前驱线索</span></span></span><br><span class="line"><span class="params">p-&gt;lchild=pre;</span></span><br><span class="line"><span class="params">p-&gt;<span class="number">1</span>tag=<span class="number">1</span>:</span></span><br><span class="line"><span class="params">&#125;</span></span><br><span class="line"><span class="params"><span class="keyword">if</span>(pre!=<span class="literal">NULL</span>&amp;<span class="number">6</span>pre-&gt;rchild==<span class="literal">NULL</span>)&#123;</span></span><br><span class="line"><span class="params">pre-&gt;rchild=p;           <span class="comment">//建立前驱结点的后继线索</span></span></span><br><span class="line"><span class="params">pre-&gt;rtag=<span class="number">1</span>;</span></span><br><span class="line"><span class="params">&#125;</span></span><br><span class="line"><span class="params">pre=p;                                <span class="comment">//标记当前结点成为刚刚访问过的结点</span></span></span><br><span class="line"><span class="params">InThread(p-&gt;rchild,pre); <span class="comment">//递归，线索化右子树</span></span></span><br><span class="line"><span class="params">&#125;<span class="comment">//if (p!=NULL)</span></span></span><br><span class="line"><span class="params">&#125;</span></span><br><span class="line"><span class="params"></span></span><br><span class="line"><span class="params"><span class="type">void</span> CreateInThread(ThreadTree T)&#123;</span></span><br><span class="line"><span class="params">ThreadTree pre=<span class="literal">NULL</span>; <span class="comment">//pre传入的是NULL,因为递归遍历到最低部结点(序列第一个结点)，没有前驱</span></span></span><br><span class="line"><span class="params"><span class="keyword">if</span>(T!=<span class="literal">NULL</span>)&#123;</span></span><br><span class="line"><span class="params"><span class="comment">//非空二叉树，线索化</span></span></span><br><span class="line"><span class="params">InThread(T,pre);</span></span><br><span class="line"><span class="params"><span class="comment">//线索化二叉树</span></span></span><br><span class="line"><span class="params">pre-&gt;rchild=<span class="literal">NULL</span>;</span></span><br><span class="line"><span class="params"><span class="comment">//处理遍历的最后一个结点</span></span></span><br><span class="line"><span class="params">pre-&gt;rtag=<span class="number">1</span>;</span></span><br><span class="line"><span class="params">&#125;</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304152226551.png" alt="image.png"></p><h2 id="线索二叉树的遍历"><a href="#线索二叉树的遍历" class="headerlink" title="线索二叉树的遍历"></a>线索二叉树的遍历</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这里只举例中序线索二叉树的遍历</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//求中序线索二叉树中中序序列下的第一个结点</span></span><br><span class="line">ThreadNode *<span class="title function_">Firstnode</span><span class="params">(ThreadNode *p)</span>&#123;</span><br><span class="line"><span class="keyword">while</span>(p-&gt;ltag==<span class="number">0</span>)&#123;</span><br><span class="line">p=p-&gt;lchi1d;<span class="comment">//最左下结点（不一定是叶结点）</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//求中序线索二叉树中结点p的后继</span></span><br><span class="line">TreadNode *<span class="title function_">Nextnode</span><span class="params">(TreadNode *p)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(p-&gt;rtag==<span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> Firstnode(p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">return</span> p-&gt;right;<span class="comment">//rtsg==1直接返回线索</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//综合上述两个方法，能够写出遍历中序线索二叉树的方法</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Inorder</span><span class="params">(TreadNode *T)</span>&#123;</span><br><span class="line">TreadNode *p;</span><br><span class="line"><span class="keyword">for</span>(p=Firstnode(T);p!=<span class="literal">NULL</span>;p=Nextnode(p))&#123;</span><br><span class="line">visit(p);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="课后习题-6"><a href="#课后习题-6" class="headerlink" title="课后习题"></a>课后习题</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">1.引入线索二叉树的目的是（）</span><br><span class="line">A,加快查找结点的前驱或后继的速度</span><br><span class="line">B.为了能在二叉树中方便插入和删除</span><br><span class="line">C.为了能方便找到双亲</span><br><span class="line">D.使二叉树的遍历结果唯一</span><br><span class="line"></span><br><span class="line">解析：线索是结点的前驱和后继结点的指针，可以加快遍历</span><br><span class="line"></span><br><span class="line">2.线索二叉树是一种（）结构。</span><br><span class="line">A.逻辑</span><br><span class="line">B.逻辑和存储</span><br><span class="line">C.物理</span><br><span class="line">D.线性</span><br><span class="line"></span><br><span class="line">解析：二叉树是一种逻辑结构，但是线索二叉树是加上线索后的链表结构，即是一种物理结构，存储结构</span><br><span class="line"></span><br><span class="line">3.n个结点的线索二叉树上含有的线索数为(B)</span><br><span class="line">A.2n</span><br><span class="line">B.n-1</span><br><span class="line">C.n+l</span><br><span class="line">D.n.</span><br><span class="line"></span><br><span class="line">解析：每个结点有两条链域指针，总共2n条，每个结点被一条指针指向，剩余的构成线索，2n-(n-1)</span><br><span class="line"></span><br><span class="line">4.二叉树在线索化后，仍不能有效求解的问题是（D）。</span><br><span class="line">A.先序线索二叉树中求先序后继</span><br><span class="line">B.中序线索二叉树中求中序后继</span><br><span class="line">C.中序线索二叉树中求中序前驱</span><br><span class="line">D.后序线索二叉树中求后序后继</span><br><span class="line"></span><br><span class="line">4.注意，前序、中序线索树的遍历不需要通过弹栈的方式来遍历后继结点，因为后继都可以通过线索来指向</span><br><span class="line">但是，后序线索二叉树的遍历必须通过弹栈的方式，返回上一层及的后继结点，如下图所示，结点3既没有左右孩子指针指向4结点，又没有后继线索指向4结点(左右子树占用了线索)</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304202347155.png" alt="image.png"><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">5.[2011统考真题]一棵二叉树的前序遍历序列和后序遍历序列分别为1,2,3,4和4,3,2,1,</span><br><span class="line">该二叉树的中序遍历序列不会是（C）。</span><br><span class="line">A.1,2,3,4</span><br><span class="line">B.2,3,4,1</span><br><span class="line">C.3,2,4,1</span><br><span class="line">D.4,3,2,1</span><br><span class="line"></span><br><span class="line">解析：前后序遍历序列相反，说明每个结点只能有左孩子或只能有右孩子,不会同时存在两个子树</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">6.编写后序遍历二叉树的非递归算法</span><br><span class="line"></span><br></pre></td></tr></table></figure><br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//思路先将左子树遍历到底，再遍历右子树，最后根</span></span><br><span class="line"><span class="comment">//1.沿着根的左孩子，依次入栈，直到左孩子为空</span></span><br><span class="line"><span class="comment">//2.读栈顶元素：若其右孩子不空且未被访问过，将右子树转执行1;否则，栈顶元素出栈并访问。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Stack S; 指针访问标记r ; 当前指针p; </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(p||!isEmpty(S))&#123;</span><br><span class="line"><span class="keyword">if</span>(p)&#123;</span><br><span class="line">push(S,p);</span><br><span class="line">p=p-&gt;lift;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">Getop(S,p);</span><br><span class="line"><span class="keyword">if</span>(p-&gt;right&amp;&amp;p-&gt;right!=r)&#123;</span><br><span class="line">p=p-&gt;right;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">pop(S,p);</span><br><span class="line">visit(p-&gt;data);</span><br><span class="line">r=p;</span><br><span class="line">p=<span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></p><h1 id="森林"><a href="#森林" class="headerlink" title="森林"></a>森林</h1><h2 id="什么是森林？"><a href="#什么是森林？" class="headerlink" title="什么是森林？"></a>什么是森林？</h2><hr><p><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305062345931.png" alt="image.png"></p><h2 id="树、森林转化为二叉树"><a href="#树、森林转化为二叉树" class="headerlink" title="树、森林转化为二叉树"></a>树、森林转化为二叉树</h2><hr><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">首先将树转化为二叉树</span><br><span class="line">将树转化为二叉树</span><br><span class="line">1.给兄弟加线</span><br><span class="line">2.将除长子外的与父节点的线去掉</span><br><span class="line">3.最后层次调整</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305070951715.png" alt="image.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">将森林转化为二叉树</span><br><span class="line">1.先将所有树先转化为二叉树</span><br><span class="line">2.将第一课树的根节点，将自己的子树森林转化为左子树，右子树指向下一棵树的根节点</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305071001666.png" alt="image.png"><br><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305071002020.png" alt="image.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">树、森林、二叉树遍历序列等价问题</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305071103398.png" alt="image.png"></p><h2 id="课后习题-7"><a href="#课后习题-7" class="headerlink" title="课后习题"></a>课后习题</h2><hr><div class="tabs" id="test1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test1-1">1</button></li><li class="tab"><button type="button" data-href="#test1-2">2</button></li><li class="tab"><button type="button" data-href="#test1-3">3</button></li><li class="tab"><button type="button" data-href="#test1-4">4</button></li><li class="tab"><button type="button" data-href="#test1-5">5</button></li><li class="tab"><button type="button" data-href="#test1-6">6</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test1-1"><p><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305062357926.png" alt="image.png"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-2"><p><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305070943205.png" alt="image.png"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-3"><p><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305071004393.png" alt="image.png"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-4"><p><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305071008954.png" alt="image.png"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-5"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">假设树原始分支只有一条</span><br><span class="line">想象树每多一条分支，就会出现一个叶子结点，且多一组兄弟结点</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305071021560.png" alt="image.png"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-6"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">1.若森林F有15条边、25个结点，则F包含树的个数是</span><br><span class="line">A.8</span><br><span class="line">B.9</span><br><span class="line">C.10</span><br><span class="line">D.11</span><br><span class="line"></span><br><span class="line">解析：对于一棵树而言，除了根节点，其他每个结点都由一条边指向，也就是说，其他每个结点都对应一条边，所以，一棵树的结点数=边数+1</span><br><span class="line">所以，结点数-边数=25-15=10，所以有10棵树</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="哈夫曼树"><a href="#哈夫曼树" class="headerlink" title="哈夫曼树"></a>哈夫曼树</h1><h2 id="带权路径长度"><a href="#带权路径长度" class="headerlink" title="带权路径长度"></a>带权路径长度</h2><hr><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">结点的带权路径长度：从树的根节点到该结点的路径长度(经过的边数)与该结点上值得乘积</span><br><span class="line">树的带权路径长度：树种所有叶子结点的带权路径之和(WPL,Weight Path Length)</span><br><span class="line">带权路径长度最小的二叉树被称为哈夫曼树，也称最优二叉树</span><br></pre></td></tr></table></figure><h2 id="哈夫曼树定义"><a href="#哈夫曼树定义" class="headerlink" title="哈夫曼树定义"></a>哈夫曼树定义</h2><hr><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">哈夫曼树是为了达到 使编码串变短的目的</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>编码问题</code></p><div class="table-container"><table><thead><tr><th style="text-align:center">A</th><th style="text-align:center">B</th><th style="text-align:center">C</th><th style="text-align:center">D</th><th style="text-align:center">E</th></tr></thead><tbody><tr><td style="text-align:center">000</td><td style="text-align:center">001</td><td style="text-align:center">010</td><td style="text-align:center">011</td><td style="text-align:center">100</td></tr></tbody></table></div><p>S=AAABBACCCDEEA<br>T(S)=000000000001001000010010010011100100000</p><p><code>S中出现次数</code></p><div class="table-container"><table><thead><tr><th style="text-align:center">A</th><th style="text-align:center">B</th><th style="text-align:center">C</th><th style="text-align:center">D</th><th style="text-align:center">E</th></tr></thead><tbody><tr><td style="text-align:center">5</td><td style="text-align:center">2</td><td style="text-align:center">3</td><td style="text-align:center">1</td><td style="text-align:center">2</td></tr></tbody></table></div><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">为了使得编码变短，尽量将出现次数较多的编码缩短</span><br><span class="line">于是建立如下哈夫曼树</span><br><span class="line"></span><br><span class="line">1.将字符按出现次数从多到少排列</span><br><span class="line">2.从最少的两个次数相加组成 次数结点</span><br><span class="line">3.同样的过程完全建立一颗抽象的树状结构</span><br><span class="line">4.在树上左分支0,右分支1</span><br><span class="line">5.向右寻找一位,编码1，向左寻找一位编码0</span><br><span class="line">6.例如 B --&gt; 110</span><br><span class="line">7.A次数最多5--&gt;编码最短0  ；D次数最少1--&gt;编码最长1110</span><br><span class="line">8.达到了编码串缩短的目的</span><br><span class="line"></span><br><span class="line">如何解码呢？</span><br><span class="line">从左到右逐个扫描编码串字符，0向左走，1向右走，如果走到叶子结点（字符位置），就读取</span><br><span class="line">然后再次回到根节点，没有就继续扫描</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304152307750.png" alt="image.png"></p><p><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304152308298.png" alt="image.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1.权值越大的字符，离根节点越近(权值看做字符的次数)</span><br><span class="line">2.哈夫曼树中，没有度为1的结点，这类树叫做&quot;正则二叉树&quot;(严格二叉树)</span><br><span class="line">3.哈夫曼树的带权路径长度最短(也称最优二叉树)</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304152335386.png" alt="image.png"></p><h2 id="二叉树的估计"><a href="#二叉树的估计" class="headerlink" title="二叉树的估计"></a>二叉树的估计</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">右侧的分别是表示遍历后的顺序 黑色表示要删除的</span><br><span class="line">注意：前后结果相反，有两种情况，没有左(L)或没有右(R)都满足</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304160027135.png" alt="image.png"></p><p><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304160024070.png" alt="image.png"></p><p><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304161123505.png" alt="image.png"></p><h2 id="二叉存储表达式"><a href="#二叉存储表达式" class="headerlink" title="二叉存储表达式"></a>二叉存储表达式</h2><hr><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">根据二叉存储表达式建立二叉树：3+4*5*(2+3)</span><br><span class="line">手工方法：1.加括号明确运算次序(3+((4*5)*(2+3)))</span><br><span class="line">         2.列出数字元素 3  4  5  2  3 作为叶子结点</span><br><span class="line">         3.按运算次序 用运算符作为分支节点 建立二叉树</span><br><span class="line">栈方法：不介绍</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304161138392.png" alt="image.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">利用树，来求表达式的值 </span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304161203203.png" alt="image.png"></p><h2 id="课后习题-8"><a href="#课后习题-8" class="headerlink" title="课后习题"></a>课后习题</h2><hr><div class="tabs" id="test1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test1-1">1</button></li><li class="tab"><button type="button" data-href="#test1-2">2</button></li><li class="tab"><button type="button" data-href="#test1-3">3</button></li><li class="tab"><button type="button" data-href="#test1-4">4</button></li><li class="tab"><button type="button" data-href="#test1-5">5</button></li><li class="tab"><button type="button" data-href="#test1-6">6</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test1-1"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1.前缀码是一种编码系统，通常是可变长度码，在其中的每个码字，都具备「前缀性质」(prefix property)，也就说，在编码中的每个码字，都不能被其他码字当成前置部位。例如，编码字&#123;9,55&#125;具备了前缀性质，但编码字&#123;9,5,59,55&#125;就不具备，因为其中的&quot;5”，是59&quot;及&quot;55&quot;的前缀</span><br><span class="line"></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-2"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">题目已对两个字符编码1和01，因为哈夫曼树只对叶子结点进行编码，所以1和01两个结点就是叶子结点，不能继续延伸。故只能往左下继续寻找，最终如图，注意要数的是叶子结点的个数</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305061929244.png" alt="image.png"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-3"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">哈夫曼树如果有n个叶子结点，那么总共有2n-1个结点</span><br><span class="line">因为n个叶子结点，经过n-1次整合，构建出n-1个非叶子结点，总共2n-1个结点</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305061936631.png" alt="image.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">第一次整合需要m个，之后整合只需m-1个叶子结点，每次整合有一个非叶子结点，所以n-1/m-1</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305061956033.png" alt="image.png"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-4"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">1对于哈夫曼树的说法错误的是（D）</span><br><span class="line">A.对应一组权值构造出来的哈夫曼树一能不是唯一的</span><br><span class="line">B.哈夫曼树具有最小的带权路径长度</span><br><span class="line">C.哈夫曼树中没有度为1的结点</span><br><span class="line">D.哈夫曼树中除了度为1的结点外，还有度为2的结点和叶结点</span><br><span class="line"></span><br><span class="line">解析：</span><br><span class="line">A:确实不唯一。仅思考两个结点的情况：1和2，就有两种：1在左子树2在右子树和反过来。</span><br><span class="line">B:正确。正是我们使用哈夫曼树进行编码的意义所在。</span><br><span class="line">C:正确。任意非叶子结点都是由两个树（数据元素）构成的，因此不存在度为1的结点。</span><br><span class="line">D:解析同C,因此错误。</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-5"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">所谓定长编码集，就是所有字符编码位数都一样，0001 1100 1010 ..</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305062100296.png" alt="image.png"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-6"><p><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305062127393.png" alt="image.png"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="图"><a href="#图" class="headerlink" title="图"></a>图</h1><h2 id="课后习题-9"><a href="#课后习题-9" class="headerlink" title="课后习题"></a>课后习题</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">1.图中有关路径的定义是(A).</span><br><span class="line">A.由顶点和相邻顶点序偶构成的边所形成的序列</span><br><span class="line">B.由不同顶，点所形成的序列</span><br><span class="line">C.由不同边所形成的序列</span><br><span class="line">D.上述定义都不是</span><br><span class="line"></span><br><span class="line">解析：本题是北交大考研真题，不同教材对路径的定义可能略有不同，顶点之间关联的边也可理解</span><br><span class="line">为路径的构成要素。对于B选项，路径的定义中并没有要求是不同顶点，比如简单回路的第一个</span><br><span class="line">顶点和最后一个顶点是可以相同的，此外B选项也没有说明这些顶点之间有边相联。</span><br><span class="line"></span><br><span class="line">2.[2017统考真题]已知无向图G含有16条边，其中度为4的顶点个数为3，度为3的顶</span><br><span class="line">点个数为4，其他顶点的度均小于3。图G所含的顶点个数至少是（11）</span><br><span class="line"></span><br><span class="line">解析：无向图边数的2倍等于各顶点度数的总和。为求至少的顶点数，应使每个顶点的度取最大，由</span><br><span class="line">于其他顶点的度均小于3，可以设它们的度都为2，设它们的数量是x,列出方程4×3+3×4+2x=16×2,</span><br><span class="line">解得x=4。因此至少包含4+4+3=11个顶点。</span><br><span class="line"></span><br><span class="line">3.图G是一个非连通无向图，共有28条边，该图至少有多少个项点？</span><br><span class="line"></span><br><span class="line">解析：由于图G是一个非连通无向图，在边数固定时，顶点数最少的情况是该图由两个连通子图构</span><br><span class="line">成，且其中之一只含一个顶点，另一个为完全图。其中只含一个顶点的子图没有边，另一个完全</span><br><span class="line">图的边数为n(n-1)2=28,得n=8。所以该图至少有1+8=9个顶点。</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="图的逻辑结构"><a href="#图的逻辑结构" class="headerlink" title="图的逻辑结构"></a>图的逻辑结构</h2><hr><ul><li>图由<code>顶点</code>和<code>边</code>构成</li><li><code>无向图</code>：边没有指向方向 (A1,A3)   没有指向 </li><li><code>有向图</code>：边有箭头方向    <A1,A3> 表示A1—&gt;A3 ,不能反过来</li><li><code>顶点的度</code>：<ul><li>无向图：A1的度为3</li><li>有向图：A1入度为1，出度为2，度为3</li></ul></li><li><code>简单图</code>：不存在重复的边，并且没有指向自身的边</li><li><p><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202304302311509.png" alt="image.png"></p></li><li><p><code>无向完全图</code>：任意两个顶点之间，都存在边，总共<code>n(n-1)/2</code>条边</p></li><li><p>有向完全图：任意两个顶点之间，都存在两条方向相反的边，总共<code>n(n-1)</code>条边<img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202304302312402.png" alt="image.png"></p></li><li><p>若边含有权值则称为网<img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202304302342083.png" alt="image.png"></p></li><li><p><code>路径</code>：一个顶点到另一个顶点的序列,例如：A1 A2 A3 A5 A6</p></li><li><code>简单路径</code>：序列中顶点不重复出现的路径 例如：A1 A2 A3 A2 A4就不是简单路径，其中A2重复了</li><li><code>环</code>：第一个顶点和最后一个顶点相同 例如：A1 A4 A3 A1</li><li><code>简单环</code>：除了第一个顶点和最后顶点，中间没有重复出现顶点</li><li><p><code>连通图</code>：针对<code>无向图</code>不一定要闭合，只要任意顶点间有路径即可<img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202304302342495.png" alt="image.png"></p></li><li><p><code>非连通图</code>：<img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202304302342005.png" alt="image.png"></p></li><li><p><code>极大连通子图</code>：无法在子图基础上扩展得到更大的图(连通分量)</p></li><li><code>强连通图</code>：针对有向图，<code>Vi</code>到<code>Vj</code>有路径，且<code>Vj</code>到<code>vi</code>也有路径</li></ul><h2 id="图的存储结构"><a href="#图的存储结构" class="headerlink" title="图的存储结构"></a>图的存储结构</h2><hr><h3 id="顺序存储结构"><a href="#顺序存储结构" class="headerlink" title="顺序存储结构"></a>顺序存储结构</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">用一个二维数组，形成的一个矩阵表示顶点之间的关系</span><br><span class="line">这里演示的是带权的路径</span><br><span class="line">用行标、列标组合表示两个顶点之间路径</span><br><span class="line">按行列找到的数值就是路径权值，例如(1,0)=2,表示1--&gt;0的路径权值为2</span><br><span class="line">这里规定对角线上的值为无穷，也就是顶点到自身的路径为无穷(有的地方也规定为0)</span><br><span class="line"></span><br><span class="line">注意：当二位数组对称，说明是无向图，互相指向；当二维数组不对称，说明是有向图</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202304302342024.png" alt="image.png"></p><p><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202304302343325.png" alt="image.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">0行 X 3列</span><br><span class="line">只有0行与3列对应相乘都不为0时才有值</span><br><span class="line">结果=3，说明有3个点，与0和3都存在路径</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202304302343697.png" alt="image.png"></p><h3 id="链式存储结构"><a href="#链式存储结构" class="headerlink" title="链式存储结构"></a>链式存储结构</h3><h4 id="邻接表"><a href="#邻接表" class="headerlink" title="邻接表"></a>邻接表</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">只能表示出边，或只能表示入边</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//适用于稀疏图，避免矩阵造成大量空间的浪费</span></span><br><span class="line"><span class="comment">//采用了顺序存储+链式存储</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//边结构体</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">ArcNode</span>&#123;</span></span><br><span class="line"><span class="type">int</span> adjvex;            <span class="comment">//边指向顶点位置(下标)</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ArcNode</span> *<span class="title">next</span>;</span>  <span class="comment">//指向下一条边的指针</span></span><br><span class="line">&#125;ArcNode;</span><br><span class="line"></span><br><span class="line"><span class="comment">//顶点结构体</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">VNode</span>&#123;</span></span><br><span class="line">VertexType data;       <span class="comment">//顶点信息</span></span><br><span class="line">ArcNode *first;        <span class="comment">//第一条边</span></span><br><span class="line">&#125; VNode,AdjList[MaxSize]   <span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//邻接表存储的图</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span> </span><br><span class="line">AdjList vertice;       <span class="comment">//顶点数组指针(也可以说顶点数组)</span></span><br><span class="line"><span class="type">int</span> n,e                <span class="comment">//顶点的数量，边得数量 </span></span><br><span class="line">&#125;ALGraph</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//下图邻接表由两部分构成，左边的顶点数组(存着下标信息)+右边的边结点链表(1.数字是顶点下标，2.右侧是相接该顶点的另一条边的指针)~~这就好理解了嘛</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//各个边在边组成链表中出现的先后顺序不是固定的，所以图邻接表的表示方式并不唯一，</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305011638260.png" alt="image.png"></p><h4 id="十字链表"><a href="#十字链表" class="headerlink" title="十字链表"></a>十字链表</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">针对有向图</span><br><span class="line">只能用于存储有向图</span><br><span class="line">由于邻接表无法表示入边，与出边，所以改进为十字链表</span><br><span class="line">左结构体--&gt;顶点   右结构体--&gt;边</span><br><span class="line">in表示入边，out表示出边，由first引出第一条，由next引出下一条，01、14、20...表示边(有方向)</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305011639953.png" alt="image.png"></p><h4 id="邻接多重表"><a href="#邻接多重表" class="headerlink" title="邻接多重表"></a>邻接多重表</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">针对无向图</span><br><span class="line">左结构体--&gt;顶点  右结构体--&gt;边</span><br><span class="line">由于边是双向</span><br><span class="line">接下来有点抽象自己看^o^</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305011639673.png" alt="image.png"></p><h4 id="课后习题-10"><a href="#课后习题-10" class="headerlink" title="课后习题"></a>课后习题</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">1.邻接表可以用于存储无向图，，只是把每条边都视为两条方向相反的有向边，因此需要存储两次</span><br><span class="line"></span><br><span class="line">2.在有向图的邻接表存储结构中，顶，点v在边表中出现的次数是（C）。</span><br><span class="line">A顶点v的度</span><br><span class="line">B.顶点v的出度</span><br><span class="line">C:顶点v的入度</span><br><span class="line">D.依附于顶，点v的边数</span><br><span class="line"></span><br><span class="line">3.n个顶点的无向图的邻接表最多有(B)个边表结点。</span><br><span class="line">A.n2</span><br><span class="line">B.n(n-1)</span><br><span class="line">C.n(n+1)·</span><br><span class="line">D.n(n-1)/2</span><br><span class="line"></span><br><span class="line">解析：n个顶点的无向图最多有(n-1)/2条边，每条边在邻接表中存储两次，所以边表结点最多为</span><br><span class="line">n(n-l)个。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">5.带权有向图G用邻接矩阵存储，则的入度等于邻接矩阵中(D).</span><br><span class="line">A.第i行非∞的元素个数</span><br><span class="line">B.第i列非∞的元素个数：</span><br><span class="line">C.第i行非∞且非0的元素个数</span><br><span class="line">D.第i列非∞且非0的元素个数</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//6.写出从图的邻接表表示转换成邻接矩阵表示的算法。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//思路：通过普通的遍历，依次序的遍历所有的顶点，并修改邻接矩阵的值</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Convert</span><span class="params">(AlGraph *G,<span class="type">int</span> [M][N])</span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i =<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">ArcNode *p = G-&gt;v[i].first;</span><br><span class="line"><span class="keyword">while</span>(p)&#123;</span><br><span class="line"><span class="type">int</span>[i][p-&gt;adjv]=<span class="number">1</span>;</span><br><span class="line">p=p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="图的遍历"><a href="#图的遍历" class="headerlink" title="图的遍历"></a>图的遍历</h2><h3 id="深度优先遍历-DFS"><a href="#深度优先遍历-DFS" class="headerlink" title="深度优先遍历(DFS)"></a>深度优先遍历(DFS)</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">讨论的是邻接表的遍历犯法</span><br><span class="line"></span><br><span class="line">为了防止出现图遍历的时候的死循环问题需要，将遍历过得结点进行标记，防止再次遍历</span><br><span class="line">于是</span><br><span class="line">1.设置一个与顶点数组相对应的标记数组(设为全局变量)，数组初始=0；</span><br><span class="line">2.遍历过后标记为1，visit[v]=1;</span><br><span class="line">3.然后ArcNode*q=G-&gt;adjList [v].first 找到第一条与该顶点相连的边</span><br><span class="line">4.找到第二条与该顶点相连的边，访问下一个顶点(往深处找)，先判断是否访问过</span><br><span class="line">5.如果没有访问过进行递归</span><br><span class="line">6.如果访问过就找与之相连的下一条边，直到与该顶点相连的边遍历完</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//边结构体</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">ArcNode</span>&#123;</span></span><br><span class="line"><span class="type">int</span> adjV;            <span class="comment">//边指向顶点位置(下标)</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ArcNode</span> *<span class="title">next</span>;</span>  <span class="comment">//指向下一条边的指针</span></span><br><span class="line">&#125;ArcNode;</span><br><span class="line"></span><br><span class="line"><span class="comment">//顶点结构体</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">VNode</span>&#123;</span></span><br><span class="line">VertexType data;       <span class="comment">//顶点信息</span></span><br><span class="line">ArcNode *first;        <span class="comment">//第一条边</span></span><br><span class="line">&#125; VNode,AdjList[MaxSize]   <span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//邻接表存储的图</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span> </span><br><span class="line">AdjList vertice;       <span class="comment">//顶点数组指针(也可以说顶点数组)</span></span><br><span class="line"><span class="type">int</span> n,e                <span class="comment">//顶点的数量，边得数量 </span></span><br><span class="line">&#125;ALGraph</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305011639135.png" alt="image.png"></p><h3 id="广度优先遍历-BFS"><a href="#广度优先遍历-BFS" class="headerlink" title="广度优先遍历(BFS)"></a>广度优先遍历(BFS)</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">讨论的是邻接表的遍历</span><br><span class="line">要点：</span><br><span class="line">1.找到与一个顶点相邻的所有顶点</span><br><span class="line">2.标记哪些顶点被访问过</span><br><span class="line">3.需要一个辅助队列，这里采用循环队列</span><br><span class="line"></span><br><span class="line">采用循环的队列作为辅助队列</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">typedeof <span class="type">int</span> maxSize</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">BFS</span><span class="params">(AGraph *G,<span class="type">int</span> v,<span class="type">int</span> visited[maxSize])</span>&#123;</span><br><span class="line">ArcNode *p;</span><br><span class="line"><span class="type">int</span> que[maxSize],front=<span class="number">0</span>,rear=<span class="number">0</span>;  <span class="comment">//辅助队列</span></span><br><span class="line"><span class="type">int</span> j;</span><br><span class="line">visit(v);                         <span class="comment">//访问出队顶点；</span></span><br><span class="line">vistted[v]=<span class="number">1</span>;</span><br><span class="line">rear = (rear+<span class="number">1</span>)%maxSize;  </span><br><span class="line">que[rear]=v;                      <span class="comment">//顶点入队,入队的其实是位置下标</span></span><br><span class="line"><span class="keyword">while</span>(front!=rear)&#123;</span><br><span class="line">front = (front+<span class="number">1</span>)%maxSize;     <span class="comment">//出队一个顶点，赋值给j</span></span><br><span class="line">j=que[front];</span><br><span class="line">p=G-&gt;AdjList[j].first;         <span class="comment">//找到与这个顶点相邻的顶点</span></span><br><span class="line"><span class="keyword">while</span>(p!=<span class="literal">NULL</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(visited[p-&gt;adjV]==<span class="number">0</span>)&#123;   <span class="comment">//判断是否访问过</span></span><br><span class="line">visit(p-&gt;adjV);</span><br><span class="line">visited[p-&gt;adjV]==<span class="number">1</span>;</span><br><span class="line">rear=(rear+<span class="number">1</span>)%maxSize; </span><br><span class="line">que[rear]=p-&gt;adjV      <span class="comment">//入队</span></span><br><span class="line">&#125;</span><br><span class="line">p = p-&gt;next;               <span class="comment">//寻找下一条边(找与之相连的下一个)</span></span><br><span class="line">&#125;                  </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305011640748.png" alt="image.png"></p><p><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305011640524.png" alt="image.png"></p><h2 id="最小生成树-Prim算法"><a href="#最小生成树-Prim算法" class="headerlink" title="最小生成树(Prim算法)"></a>最小生成树(Prim算法)</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">生成树：由一个图按照某一种规则，导出里面包含的一颗树(就是由图所有顶点，与部分边，构成的一颗树)</span><br><span class="line"></span><br><span class="line">最小生成树：构成的这颗生成树的所有分支的权值和最小(所以讨论的是带权图)</span><br><span class="line"></span><br><span class="line">实现思路：</span><br><span class="line">1.先确定一个根节点A0</span><br><span class="line">2.找到与根节点相邻的所有的边，选择权值最小的并入树中，此时A0  A1两个结点</span><br><span class="line">3.继续，找到与A0 A1相邻的所有的边，3,2,7,8 --&gt;将权值为2的边并入树，此时结点A0 A1 A2</span><br><span class="line">4.重复...</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305011640486.png" alt="image.png"></p><p><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305011641608.png" alt="image.png"></p><h2 id="最小生成树-Kruskal算法"><a href="#最小生成树-Kruskal算法" class="headerlink" title="最小生成树(Kruskal算法)"></a>最小生成树(Kruskal算法)</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">大致思想是</span><br><span class="line">1.将每条边都列举出来，按照权值从小到大排列</span><br><span class="line">2.从最小的边开始，如果边两边的顶点并未&quot;连通&quot;，则连通这条边</span><br><span class="line">3.如果两边顶点处于同一个&quot;并查集&quot;，即连通，则遍历下一条边</span><br><span class="line">4.直到所有顶点处于同一个&quot;并查集&quot;中，即生成了最小生产树</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305011641841.png" alt="image.png"></p><h2 id="最短路径-DIjkstra"><a href="#最短路径-DIjkstra" class="headerlink" title="最短路径(DIjkstra)"></a>最短路径(DIjkstra)</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">求某一个顶点(确定某一点)到其余各顶点之间的最短路径</span><br><span class="line"></span><br><span class="line">设置3个数组</span><br><span class="line">dist[] --&gt;树中，min[从起点经过新增顶点与上述顶点间的距离,原本距离] ，初始=无穷</span><br><span class="line">path[] --&gt; 表示，上述顶点的起始顶点 ,初始=-1</span><br><span class="line">set[] --&gt; 0表示未并入树中，1表示已在树中 ，初始=0</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305011641285.png" alt="image.png"></p><p><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305011641565.png" alt="image.png"></p><h2 id="最短路径-Floyd"><a href="#最短路径-Floyd" class="headerlink" title="最短路径(Floyd)"></a>最短路径(Floyd)</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">任意两个顶点间，最短路径</span><br></pre></td></tr></table></figure><h2 id="有向无环图"><a href="#有向无环图" class="headerlink" title="有向无环图"></a>有向无环图</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">不存在环路的有向图，也称DAG图</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305011642453.png" alt="image.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DAG表达式，将重复部分，只保留一个(可以节省空间)，由两个指针指向同一个</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305011642293.png" alt="image.png"></p><p><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305011642866.png" alt="image.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">DAG表达式的构建</span><br><span class="line">1.将出现的元素罗列出来</span><br><span class="line">2.按照运算次序，按顺序加入运算符结点，并且将运算符号分层</span><br><span class="line">3.最后从最底层检查是否有重复部分，并合并</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305011643679.png" alt="image.png"></p><h2 id="拓扑排序"><a href="#拓扑排序" class="headerlink" title="拓扑排序"></a>拓扑排序</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AOV网</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305011643547.png" alt="image.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">拓扑排序，实现的是，将AOV网中依次的输出具有传递性的活动(顶点),找到做事的先后顺序</span><br><span class="line"></span><br><span class="line">AOV网允许有多个入度为0的顶点活动</span><br><span class="line"></span><br><span class="line">实现思路：</span><br><span class="line">1.找到入度为0的顶点，先输出</span><br><span class="line">2.删除顶点，与顶点有关的边（出边）</span><br><span class="line">3.重复1 2 直到为空</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305011643410.png" alt="image.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">代码实现需要定义两个数组，一个栈</span><br><span class="line">indegree[] 记录当前所有顶点的入度</span><br><span class="line">print[] 记录拓扑排好的的顶点序列</span><br><span class="line">Stack S 保存度为0的顶点(也可以用队列代替)</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">bool</span> <span class="title function_">TopoSort</span><span class="params">(Graph G)</span>&#123;</span><br><span class="line">InitStack(S);  <span class="comment">//初始化栈</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;G.n;i++)&#123; <span class="comment">//遍历找出所有入度为0的顶点</span></span><br><span class="line"><span class="keyword">if</span>(indegree[i]==<span class="number">0</span>)&#123;</span><br><span class="line">push(S,i);      <span class="comment">//将入度为0的顶点进栈</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> count=<span class="number">0</span>;<span class="comment">//记录当前已经输出的顶点数目</span></span><br><span class="line"><span class="keyword">while</span>(!IsEmpty(S))&#123;</span><br><span class="line">Pop(S,i); <span class="comment">//栈顶元素出栈</span></span><br><span class="line">print[count]=i;</span><br><span class="line">count++;</span><br><span class="line"><span class="keyword">for</span>(p=G.vertices[i].first;p!=<span class="literal">NULL</span>;p=p-&gt;next)&#123;<span class="comment">//将所有由i指向的顶点入度-1</span></span><br><span class="line"><span class="type">int</span> v=p-&gt;adjV;</span><br><span class="line"><span class="keyword">if</span>(!(--indegree[v]))&#123;</span><br><span class="line">push(S,v); <span class="comment">//入度为0，入栈</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(count&lt;G.n)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;<span class="comment">//说明有回路，排序失败</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>; <span class="comment">//拓扑排序成功</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">该算法。每一个顶点要被处理一次，每一条边也要遍历一次，所以时间复杂度O(|V|+|E|) </span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305011643741.png" alt="image.png"></p><h2 id="DFS实现逆拓扑排序"><a href="#DFS实现逆拓扑排序" class="headerlink" title="DFS实现逆拓扑排序"></a>DFS实现逆拓扑排序</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">这里和深度优先遍历几乎一样</span><br><span class="line">只是将Visit(v)放到最后</span><br><span class="line">实现了，只有递归结束之后访问本节点(在这之前已经先访问了递归里面的结点，也就是深处结点)</span><br><span class="line">这样就实现了逆拓扑排序</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305011643774.png" alt="image.png"></p><h2 id="DFS算法实现拓扑排序"><a href="#DFS算法实现拓扑排序" class="headerlink" title="DFS算法实现拓扑排序"></a>DFS算法实现拓扑排序</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">1)假设结点u是结点v的祖先，则在调用DFS访问u的过程中，必然会在这个过程结束之</span><br><span class="line">前递归地对y调用DFS访问，即v的DFS函数结束时间先于u的DFS结束时间。从而</span><br><span class="line">可以考虑在DFS调用过程中设定一个时间标记，在DFS调用结束时，对各结点计时。因</span><br><span class="line">此，祖先的结束时间必然大于子孙的结束时间。</span><br><span class="line"></span><br><span class="line">2)若u是结点v的子孙，则v为u的祖先，按上述思路，v的结束时间大于u的结束时间。</span><br><span class="line">3)若u和v没有关系，则u和v在拓扑序列的关系任意。</span><br><span class="line">从而按结束时间从大到小，可以得到一个拓扑序列。</span><br><span class="line"></span><br><span class="line">实际上和深度优先遍历算法完全相同，只不过加入了变量time</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">DFS</span><span class="params">(<span class="type">int</span> v,ALGraph *G,<span class="type">int</span> time,<span class="type">int</span> Time[])</span>&#123;</span><br><span class="line">vistit[v]=<span class="number">1</span>;</span><br><span class="line">ArcNOde *p=G-&gt;AdjList[v].first;</span><br><span class="line"><span class="keyword">while</span>(p)&#123;</span><br><span class="line"><span class="keyword">if</span>(visit[q-&gt;AdjV]==<span class="number">0</span>)&#123;</span><br><span class="line">DFS(q-&gt;AdjV,G);</span><br><span class="line">&#125;</span><br><span class="line">p=p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">time++;</span><br><span class="line">Time[v]=time;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//然后再按照time从多到少的顺序，输出，就得到了拓扑排序结果</span></span><br></pre></td></tr></table></figure><h2 id="关键路径"><a href="#关键路径" class="headerlink" title="关键路径"></a>关键路径</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">AOE网，边表示活动，顶点表示事件</span><br><span class="line"></span><br><span class="line">1.只有顶点事件发生后，各条边活动才能开始</span><br><span class="line">2.顶点的所有入边活动都结束时，顶点事件才能发生</span><br><span class="line">3.有些活动是能并行进行的</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305011644288.png" alt="image.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">AOE网只有1个入度为0的顶点，开始顶点(源点)，他表示整个工程的开始</span><br><span class="line">也只有1个出度为0的顶点，结束顶点(汇点)，他表示整个工程的结束</span><br><span class="line"></span><br><span class="line">从源点到汇点的所有路径中，具有最大路径长度(总权值)的路径称为关键路径，关键路径上的活动称为，关键活动</span><br><span class="line"></span><br><span class="line">在这里关键路径的总长度就是整个工程完成所需最短时间</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305011644443.png" alt="image.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">vk--&gt;顶点(事件)  ai--&gt;活动(边)</span><br><span class="line"></span><br><span class="line">1.事件vk的最早完成时间ve(k)</span><br><span class="line">2.事件vk的最晚完成时间vl(k)</span><br><span class="line">3.边ai的最早完成时间e(i)</span><br><span class="line">4.边ai的最晚完成时间l(i)</span><br><span class="line"></span><br><span class="line">规定将发生时间最长的路线定为汇点的 最晚发生时间=最早发生时间(如果不规定一下最晚发生时间，那么没有意义，因为，前面的事件可以一直拖下去永远不执行)</span><br><span class="line"></span><br><span class="line">可以通过逆拓扑排序先从后往前的倒推每个事件的最迟发生时间(由汇点来反推)</span><br><span class="line"></span><br><span class="line">关键活动是，活动最迟发生时间=活动最早发生时间 的活动</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305011644091.png" alt="image.png"></p><p><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305011644666.png" alt="image.png"></p><h2 id="课后习题-11"><a href="#课后习题-11" class="headerlink" title="课后习题"></a>课后习题</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">1.以下叙述中，正确的是（A）。</span><br><span class="line">A.只要无向连通图中没有权值相同的边，则其最小生成树唯一</span><br><span class="line">B.只要无向图中有权值相同的边，则其最小生成树一定不唯一</span><br><span class="line">C.从n个顶，点的连通图中选取n-1条权值最小的边，即可构成最小生成树</span><br><span class="line">D.设连通图G含有n个顶点，则含有n个顶点、n-1条边的子图一定是G的生成树</span><br><span class="line"></span><br><span class="line">解析：选项A最小生成树的算法是基于贪心策略的，每次从事选取权值最小的，且满足条件的边，如果各边权值不同，则每次选择的新的顶点也是唯一的，因此最小生成树是唯一的</span><br><span class="line">选项B,若无向图本身就是一棵树，则最小生成树就是它本身，这时就是唯一的。选项C,选取的一1条边可</span><br><span class="line">能构成回路。选项D,含有n个顶点、n-1条边的子图可能构成回路，也可能不连通。</span><br><span class="line"></span><br><span class="line">2.最短路径一定是简单路劲</span><br><span class="line"></span><br><span class="line">3.下面的（A）方法可以判断出一个有向图是否有环（回路）。</span><br><span class="line">I.深度优先遍历Ⅱ.拓扑排序Ⅱ.求最短路径V.求关键路径</span><br><span class="line">A.I、Ⅱ、IV</span><br><span class="line">B.I、II、V,</span><br><span class="line">C.:I、IⅡ、IⅢ</span><br><span class="line">D.全部可以</span><br><span class="line"></span><br><span class="line">解析：深度优先遍历，深度优先遍历是逐层遍历的,通过栈等数据结构可以记录已经访问过的顶点。一旦发现重复顶点,立即结束遍历,返回最终结果。</span><br></pre></td></tr></table></figure><h1 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h1><blockquote><p>基本概念<br><code>查找长度</code>：查找运算中，需要对比关键字的次数<br><code>平均查找长度</code>：（ASL  Average Search Length），所有查找过程中进行关键字比较次数的平均值</p></blockquote><h2 id="顺序查找"><a href="#顺序查找" class="headerlink" title="顺序查找"></a>顺序查找</h2><hr><p>时间复杂度 无论如何优化，始终为<code>O(n)</code></p><h2 id="折半查找"><a href="#折半查找" class="headerlink" title="折半查找"></a>折半查找</h2><hr><p>&gt;<br><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305041349757.png" alt="image.png"></p><ul><li>针对<code>有序的顺序表</code><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">ElemType *data;</span><br><span class="line"><span class="type">int</span> len;</span><br><span class="line">&#125;SSTable;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">Binary_Search</span><span class="params">(SSTable T,ElemType key)</span>&#123;</span><br><span class="line"><span class="type">int</span> low=<span class="number">0</span>,high=T.len,mid;</span><br><span class="line"><span class="keyword">while</span>(low&lt;=high)&#123;</span><br><span class="line">mid=(low+high)/<span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span>(T.data[mid]==key)&#123;</span><br><span class="line"><span class="keyword">return</span> mid;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(T.data[mid]&lt;key)&#123;</span><br><span class="line">high=mid<span class="number">-1</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">low=mid+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;  <span class="comment">//查找失败</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305041428775.png" alt="image.png"><br><code>折半查找判定树</code><br><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305041435628.png" alt="image.png"><br><code>折半查找判定树的性质</code><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">- mid=(low+high)/2 采用的是向下取整方式</span><br><span class="line">- 结点数n为奇数，右子树结点数-左子树结点数=1</span><br><span class="line">- 结点数n为偶数，右子树结点数=左子树结点速</span><br><span class="line"></span><br><span class="line">- 折半查找判定树一定是平衡二叉树</span><br><span class="line">- 折半查找判定树，只有最下面一层不是满的，因此求树高h于完全二叉树公式一致</span><br><span class="line">- 失败结点：n+1个也就是查找成功结点的空链域数量</span><br><span class="line">- 每个元素所在层数表示查找次数，所以查找成功，失败的时间复杂度不会超过树高(树高不包括失败</span><br><span class="line">  结点)log2(n+1),时间复杂度O(log2n)</span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305041446033.png" alt="image.png"><br><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305041448619.png" alt="image.png"><br><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305041453663.png" alt="image.png"></li></ul><h2 id="分块查找"><a href="#分块查找" class="headerlink" title="分块查找"></a>分块查找</h2><blockquote><p><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305041501254.png" alt="image.png"><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">- 考察选择，不要求代码</span><br><span class="line"></span><br><span class="line">索引表中保存的是每个区块中最大的关键字</span><br><span class="line"></span><br><span class="line">分块查找</span><br><span class="line">- 对分块的索引表采用顺序查找</span><br><span class="line"></span><br><span class="line">- 对分块的索引表采用折半查找</span><br><span class="line">分两种情况：</span><br><span class="line">1.查找元素正好是索引表的元素,例如30</span><br><span class="line">2.查找元素不是索引表的元素此时，折半查找，最终low&gt;high，low指向的就是目标元素</span><br><span class="line"> 所在区块</span><br></pre></td></tr></table></figure><br><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305041711226.png" alt="image.png"></p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">顺序查找方式</span><br><span class="line">ASL=查索引表的平均查找长度+查分块的平均查找长度</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305041723622.png" alt="image.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">折半查找方式</span><br><span class="line">ASl分析，不太重要，就不讨论了...</span><br></pre></td></tr></table></figure><h2 id="二叉查找-排序-树-BST"><a href="#二叉查找-排序-树-BST" class="headerlink" title="二叉查找(排序)树(BST)"></a>二叉查找(排序)树(BST)</h2><p><code>查找-插入-构造树</code><br><div class="tabs" id="test1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test1-1">二叉查找(非递归)</button></li><li class="tab"><button type="button" data-href="#test1-2">二叉查找(递归)</button></li><li class="tab"><button type="button" data-href="#test1-3">二叉排序树插入(递归)</button></li><li class="tab"><button type="button" data-href="#test1-4">二叉排序树插入(非递归)</button></li><li class="tab"><button type="button" data-href="#test1-5">二叉排序树的建立</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test1-1"><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">BSTNode *<span class="title function_">BST_Search</span><span class="params">(BSTree T,<span class="type">int</span> key)</span>&#123;</span><br><span class="line"><span class="keyword">while</span>(T!=<span class="literal">NULL</span>&amp;&amp;key!=T-&gt;key)&#123;</span><br><span class="line"><span class="keyword">if</span>(key&lt;T-&gt;key)&#123;</span><br><span class="line">T=T-&gt;left;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">T=t-&gt;right;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> T;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-2"><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">BSTNode *<span class="title function_">BST_Search</span><span class="params">(BSTree T,<span class="type">int</span> key)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(T==<span class="literal">NULL</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(key==T-&gt;key)&#123;</span><br><span class="line"><span class="keyword">return</span> T;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(key&lt;T-&gt;key)&#123;</span><br><span class="line"><span class="keyword">return</span> BST_Search(T-&gt;left,key);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(key&gt;T-&gt;key,key)&#123;</span><br><span class="line"><span class="keyword">return</span> BST_Search(T-&gt;right,key);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-3"><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//若原二叉树为空，则直接插入结点，否则关键字k小于根节点值，则插入到左子树，若关键字k大于根节点值，则插入到右子树</span></span><br><span class="line"><span class="type">bool</span> <span class="title function_">BST_Insert</span><span class="params">(BSTree &amp;T,<span class="type">int</span> k)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(T==<span class="literal">NULL</span>)&#123;</span><br><span class="line">T=(BSTree)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(BSTNode));</span><br><span class="line">T-&gt;key=key;</span><br><span class="line">T-&gt;left=<span class="literal">NULL</span>;</span><br><span class="line">T-&gt;right=<span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(k==T-&gt;key)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(k&lt;T-&gt;key)&#123;</span><br><span class="line"><span class="keyword">return</span> BST_Insert(T-&gt;left,k);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">return</span> BST_Insert(T-&gt;right,k);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-4"><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">bool</span> <span class="title function_">BST_Search</span><span class="params">(BSTree &amp;T,<span class="type">int</span> k)</span>&#123;</span><br><span class="line"><span class="keyword">while</span>(T!=<span class="literal">NULL</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(k=T-&gt;key)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(k&lt;T-&gt;key)&#123;</span><br><span class="line">T=T-&gt;left;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">T=T-&gt;right;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">T=(BSTree)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(BSTNode));</span><br><span class="line">T-&gt;key=k;</span><br><span class="line">T-&gt;left=<span class="literal">NULL</span>;</span><br><span class="line">T-&gt;right=<span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-5"><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">Creat_BST</span><span class="params">(BSTree &amp;T,<span class="type">int</span> str[],<span class="type">int</span> n)</span>&#123;</span><br><span class="line"><span class="type">int</span> i=<span class="number">0</span>;</span><br><span class="line">T=<span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">while</span>(i&lt;n)&#123;</span><br><span class="line">BST_Insert(T,str[i]); <span class="comment">//插入方法</span></span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div></p><p><code>查找ASL分析</code><br><div class="tabs" id="test1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test1-1">查找成功ASL分析</button></li><li class="tab"><button type="button" data-href="#test1-2">查找失败ASL分析</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test1-1"><p><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305042035408.png" alt="image.png"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-2"><p><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305042036128.png" alt="image.png"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div></p><p><code>二叉排序树删除</code><br><div class="tabs" id="test1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test1-1">情况1-删叶节点</button></li><li class="tab"><button type="button" data-href="#test1-2">情况2-只有左或·右结点-</button></li><li class="tab"><button type="button" data-href="#test1-3">同时有左右结点</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test1-1"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">直接删除，不影响排序树结构</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305042039542.png" alt="image.png"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-2"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">也是可以直接删除</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305042040203.png" alt="image.png"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-3"><p><code>有两种方式</code><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">将删除节点的右子树的最小节点替代删除节点</span><br></pre></td></tr></table></figure><br><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305042048914.png" alt="image.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">将左子树的最大节点替代删除结点</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305042049351.png" alt="image.png"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div></p><p><code>回顾</code><br><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305042051390.png" alt="image.png"></p><h1 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">排序算法分为 交换类排序、插入类排序、选择类排序、归并类排序</span><br><span class="line"></span><br><span class="line">交换类排序</span><br><span class="line"></span><br><span class="line">冒泡排序</span><br><span class="line">初冒泡排序,一般靠选择题，考大题几率小</span><br><span class="line">快速排序</span><br><span class="line">更重要，考大题</span><br><span class="line"></span><br><span class="line">插入类排序</span><br><span class="line"></span><br><span class="line">直接插入</span><br><span class="line"></span><br><span class="line">折半插入</span><br><span class="line"></span><br><span class="line">希尔排序，以上三种插入算法，一般考选择题，考大题概率低</span><br><span class="line">选择排序</span><br><span class="line"></span><br><span class="line">简单选择排序</span><br><span class="line"></span><br><span class="line">堆排序(重要)</span><br><span class="line">很有可能考大题</span><br></pre></td></tr></table></figure><h2 id="课后习题-12"><a href="#课后习题-12" class="headerlink" title="课后习题"></a>课后习题</h2><hr><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1.拓扑排序是将有向图中所有结点排成一个线性序列，虽然也是在内存中进行的，但它不属于</span><br><span class="line">我们这里所提到的内部排序范畴，也不满足前面排序的定义。</span><br><span class="line"></span><br><span class="line">2.排序算法的稳定性是指? 经过排序后，能使关键字相同的元素保持原顺序中的相对位置不变</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h1><h2 id="直接插入排序"><a href="#直接插入排序" class="headerlink" title="直接插入排序"></a>直接插入排序</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">加入需要排序的数组是arr=[1,0,6,3,2,7,5]</span><br><span class="line">需要两个下标指针i、j</span><br><span class="line">初始时，只有第一个元素有序，那i从 1开始，j=i-1</span><br><span class="line"></span><br><span class="line">arr=[  1,  0,  6,  3,  2,  7,  5]</span><br><span class="line">       j   i</span><br><span class="line">先将arr[i]=temp存着</span><br><span class="line">如果arr[j] &gt; arr[i],arr[j]往后移一位，arr[j+1]=arr[j],j--;</span><br><span class="line"></span><br><span class="line">arr[  1,  1,  6,  3,  2,  7,  5]</span><br><span class="line">    j     i </span><br><span class="line">     j+1   </span><br><span class="line">      </span><br><span class="line">arr[j+1]=temp</span><br><span class="line"></span><br><span class="line">arr[  0,  1,  6,  3,  2,  7,  5]</span><br><span class="line">    j     i </span><br><span class="line">     j+1    </span><br><span class="line"> ...</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//插入排序方法  </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">insert_sort</span><span class="params">(ElemType *str,<span class="type">int</span> n)</span>&#123; <span class="comment">//n为数组长度 </span></span><br><span class="line">    <span class="type">int</span> i,j,temp;  </span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;n;i++)&#123;  </span><br><span class="line">        temp=str[i];<span class="comment">//暂时存目标元素  </span></span><br><span class="line">        <span class="keyword">for</span>(j=i<span class="number">-1</span>;j&gt;=<span class="number">0</span>&amp;&amp;str[j]&gt;temp)&#123;<span class="comment">//将比插入的数大的全部往后移一格  </span></span><br><span class="line">            str[j+<span class="number">1</span>]=str[j];  </span><br><span class="line">            j--;</span><br><span class="line">        &#125;  </span><br><span class="line">        str[j+<span class="number">1</span>]=temp;<span class="comment">//j来到了插入位置，将temp插入  </span></span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">时间复杂度：</span><br><span class="line">在最好情况下，表中元素已经有序，此时每插入一个元素，都只需比较一次而不用移动元素，</span><br><span class="line">因而时间复杂度为O（n）.</span><br><span class="line">在最坏情况下，表中元素顺序刚好与排序结果中的元素顺序相反（逆序），总的比较次数达</span><br><span class="line">到最大，总的移动次数也达到最大，总的时间复杂度为O（n^2）.</span><br><span class="line">平均情况下，考虑待排序表中元素是随机的，此时可以取上述最好与最坏情况的平均值作为</span><br><span class="line">平均情况下的时间复杂度，总的比较次数与总的移动次数均约为n^2/4。</span><br><span class="line">稳定性：</span><br><span class="line">由于每次插入元素时总是从后向前先比较再移动，所以不会出现相同元素相对位置</span><br><span class="line">发生变化的情况，即直接插入排序是一个稳定的排序方法</span><br></pre></td></tr></table></figure><h2 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h2><h2 id="课后习题-13"><a href="#课后习题-13" class="headerlink" title="课后习题"></a>课后习题</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1.在待排序的元素序列基本有序的前提下，效率最高的排序方法是（）。</span><br><span class="line">A.直接插入排序B.简单选择排序C.快速排序</span><br><span class="line">D.归并排序</span><br><span class="line"></span><br><span class="line">解析:待排序序列基本有序，只需比较n-1次时间复杂度O(n),达到效率最高</span><br></pre></td></tr></table></figure><h1 id="交换类排序"><a href="#交换类排序" class="headerlink" title="交换类排序"></a>交换类排序</h1><h2 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">从后往前(或从前往后)两两比较相邻元素的值，如果逆序，就交换，直到将最小元素，交换到最上层</span><br><span class="line">第1轮，比较n个元素，比较n-1次，找到最小的，放到第一位</span><br><span class="line">第2轮，比较n-1个元素，比较n-2次，找到剩余中最小，放到第二位</span><br><span class="line">...</span><br><span class="line">比较n-1轮</span><br><span class="line"></span><br><span class="line">n-1 + n-2 + ...+ 3 + 2 + 1</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//冒泡排序算法  </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">bubble_sort</span><span class="params">(ElemType arr[],<span class="type">int</span> n)</span>&#123;  </span><br><span class="line">    <span class="type">int</span> i,j;  </span><br><span class="line">    <span class="type">bool</span> flag;  <span class="comment">//用来标记是否发生了交换</span></span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n<span class="number">-1</span>;i++)&#123;<span class="comment">//外层循环需要比较n-1次  </span></span><br><span class="line">        flag=<span class="literal">false</span>;  </span><br><span class="line">        <span class="keyword">for</span>(j=n<span class="number">-1</span>;j&gt;i;j--)&#123;<span class="comment">//内层循环  </span></span><br><span class="line">            <span class="keyword">if</span>(arr[j]&lt;arr[j<span class="number">-1</span>])&#123;  </span><br><span class="line">                swap(arr[j],arr[j<span class="number">-1</span>]);  </span><br><span class="line">                flag=<span class="literal">true</span>;<span class="comment">//有交换就返回true  </span></span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">if</span>(flag==<span class="literal">false</span>)&#123;<span class="comment">//如果这一趟没有比较，直接结束无须比较  </span></span><br><span class="line">            <span class="keyword">return</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">时间复杂度：</span><br><span class="line">最好情况：数组本身有序，那么比较第一轮比较了n-1次后，标记返回false，退出排序，O(n)</span><br><span class="line">最坏情况：O(n^2)</span><br><span class="line">平均：O(n^2)</span><br><span class="line">空间复杂度：O(1)</span><br><span class="line">稳定性：由于i&gt;j且A[i]=A[j]时，不会发生交换，因此冒泡排序是一种稳定的排序方法。</span><br></pre></td></tr></table></figure><h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">一个顺序表</span><br><span class="line">以第一个数为基数，赋值给pviot存起来，此时，基数的位置看做为空</span><br><span class="line">定义两个指针i j</span><br><span class="line">i从左往右找比3大的数，i停止</span><br><span class="line">j从右往左找比3小的数，j停止</span><br><span class="line">然后i j 对应的数完成一次交换，i j 继续前进</span><br><span class="line">循环..直到ij相遇i==j</span><br><span class="line">arr[i]=pviot</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">Partition</span><span class="params">(ElemTypeA[],intlow，inthigh）&#123; <span class="comment">//一趟划分</span></span></span><br><span class="line"><span class="params">ElemType pivot=A[<span class="number">1</span>ow]：<span class="comment">//将当前表中第一个元素设为枢轴，对表进行划分</span></span></span><br><span class="line"><span class="params"><span class="keyword">while</span>（low&lt;high）&#123; <span class="comment">//循环跳出条件</span></span></span><br><span class="line"><span class="params"><span class="keyword">while</span>（low&lt;high&amp;sA[high]&gt;=pivot)</span></span><br><span class="line">--high；</span><br><span class="line">A[low]=A[high]； <span class="comment">//将比框轴小的元素移动到左端</span></span><br><span class="line"><span class="keyword">while</span>(low&lt;high&amp;sA[low]&lt;=pivot)</span><br><span class="line">++<span class="number">1</span>ow；</span><br><span class="line">A[high]=A[low] <span class="comment">//将比框轴大的元素移动到右端</span></span><br><span class="line">&#125;</span><br><span class="line">A[low]=pivot <span class="comment">//框轴元素存放到最终位置</span></span><br><span class="line"><span class="keyword">return</span> low； <span class="comment">//返回存放枢轴的最终位置</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//快速排序方法  </span></span><br><span class="line"><span class="type">void</span> quick_sort(ElemType *str,<span class="type">int</span> low,<span class="type">int</span> high)&#123;  </span><br><span class="line">    <span class="keyword">if</span>(low&lt;high) &#123;<span class="comment">//low high用来限定分割的范围  </span></span><br><span class="line">        <span class="type">int</span> postion = partition(str, low, high);<span class="comment">//partition方法是核心方法，每一次分割的方法  </span></span><br><span class="line">        quick_sort(str, low, postion - <span class="number">1</span>);<span class="comment">//递归左边的数组  </span></span><br><span class="line">        quick_sort(str, postion + <span class="number">1</span>, high);<span class="comment">//递归数组右边  </span></span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305011645079.png" alt="image.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">时间复杂度</span><br><span class="line">最好情况：每次分割都能平均分成两份则2^x=n; x=log2 n;每轮分割，所有子数组的比较总次数n-1次</span><br><span class="line">所以是(n-1)log2 n,O(n)=nlog2 n</span><br><span class="line">平均状态：接近最好情况O(n)=nlog2 n</span><br><span class="line">最差情况：如果数组本来就有序，那么每次都无法一次切一半，变成从1到n-1都要分割一次,每轮分割依</span><br><span class="line">旧比较n-1次，那么O(n)=n^2</span><br><span class="line">空间复杂度</span><br><span class="line">容量与递归的最大深度一致，最好情况log2 n ;最坏n-1</span><br><span class="line"></span><br><span class="line">稳定性：</span><br><span class="line">在划分算法中，若右端区间有两个关键字相同，且均小于基准值的记录，则在交换</span><br><span class="line">到左端区间后，它们的相对位置会发生变化，即快速排序是一种不稳定的排序方法。例如，表L=</span><br><span class="line">&#123;3,2,2&#125;,经过一趟排序后L=&#123;2,2,3&#125;,最终排序序列也是L=&#123;2,2,3&#125;,显然，2与2的相对次</span><br><span class="line">序已发生了变化。</span><br><span class="line"></span><br><span class="line">快速排序时内部排序算法中平均性能最优的一种算法</span><br></pre></td></tr></table></figure><h1 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h1><h2 id="简单选择排序"><a href="#简单选择排序" class="headerlink" title="简单选择排序"></a>简单选择排序</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">数组设置两个指针</span><br><span class="line">min j</span><br><span class="line">第一轮：</span><br><span class="line">min指向第1个数据，j指向min后一个,j移动寻找比min小的，然后min=j，j遍历到最后，最终交换arr[i]和arr[min]</span><br><span class="line"></span><br><span class="line">第二轮：</span><br><span class="line">min指向第2个数据，重复上述步骤</span><br><span class="line"></span><br><span class="line">...重复n-1趟</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">SelectSort</span><span class="params">(ElemType A[],<span class="type">int</span> n)</span><span class="params">(</span></span><br><span class="line"><span class="params"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n<span class="number">-1</span>;i++)&#123;   <span class="comment">//一共进行n-1趟</span></span></span><br><span class="line"><span class="params"><span class="type">int</span> min=i;        <span class="comment">//记录最小元素位置  </span></span></span><br><span class="line"><span class="params">&#125;</span></span><br><span class="line"><span class="params"><span class="keyword">for</span>(<span class="type">int</span> j=i+l;j&lt;n;j++)      <span class="comment">//在A[i.n-1]中选择最小的元素</span></span></span><br><span class="line"><span class="params"><span class="keyword">if</span> (A[j]&lt;A(min])&#123;  </span></span><br><span class="line"><span class="params">min=j;              <span class="comment">//更新最小元素位置</span></span></span><br><span class="line"><span class="params">&#125;</span></span><br><span class="line"><span class="params"><span class="keyword">if</span> (min!=<span class="number">1</span>)&#123;</span></span><br><span class="line"><span class="params"> swap(A(i],A[min]);  <span class="comment">//封装的swap（）函数共移动元素3次</span></span></span><br><span class="line"><span class="params">&#125; </span></span><br><span class="line"><span class="params">&#125;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305011645595.png" alt="image.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">空间复杂度：第一轮比较n-1次 第二轮比较n-2次 ...最后一次比较1次</span><br><span class="line">n-1 + n-2 + n-3 +...+3 + 2 + 1=(n-1)n/2  所以是O(n^2)</span><br><span class="line">最好最坏都是O(n^2)</span><br><span class="line">稳定性：在第i趟找到最小元素后，和第i个元素交换，可能会导致第i个元素与其含有相同</span><br><span class="line">关键字元素的相对位置发生改变。例如，表L=&#123;2,2,1&#125;,经过一趟排序后L=&#123;1,2,2&#125;,最终排</span><br><span class="line">序序列也是L=&#123;1,2,2&#125;,显然，2与2的相对次序已发生变化。因此，简单选择排序是一种不稳</span><br><span class="line">定的排序方法</span><br></pre></td></tr></table></figure><h2 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h2><hr><p>1.实现逻辑<br> <code>1.整理为大根堆</code> :<br><div class="tabs" id="test1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test1-1">建堆</button></li><li class="tab"><button type="button" data-href="#test1-2">时间复杂度O(n)</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test1-1"><ul><li>把所有非终端结点都检查一遍，是否满足大根堆的要求，如果不满足，则进行调整</li><li>检查当前结点是否满足龈≥左、右若不满足，将当前结点与更大的一个孩子互换</li><li>若元素互换破坏了下一级的堆，则采用相同的方法继续往下调整(<code>小元素不断下坠</code>)</li><li>一般从<code>最底层的分支结点开始调整</code><br><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305011645508.png" alt="image.png"></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-2"><p><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305011646852.png" alt="image.png"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div></p><p><code>2.交换堆顶元素与最后一个元素.并将小元素下坠,恢复成大根堆</code><br><div class="tabs" id="test1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test1-1">排序过程</button></li><li class="tab"><button type="button" data-href="#test1-2">时间复杂度O(nlog2n)</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test1-1"><ul><li>交换顶部元素和末尾元素</li><li>小元素下坠</li><li>排除末尾最大元素，<code>len-1</code><br><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305011646651.png" alt="image.png"></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-2"><ul><li>根节点最多才下坠<code>h-1</code>次，且没下坠一次最多比较2次，根结点最多比较2(h-1)次 时间复杂度 <code>O(h)</code></li><li>时间复杂度,其他结点<code>&lt;</code>根节点 , 假设每个都是 O(h),公有n个结点<code>O(nh)</code></li><li>h高度=log2n ，总时间复杂度<code>O(nh)=O(nlog2n)</code><br><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305011646722.png" alt="image.png"></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div></p><p>2.算法稳定性</p><ul><li>堆排序<code>不稳定</code></li><li>假设只有<code>1、a1、a2</code>当左右子节点相同时a1=a2，会优先考虑左结点和根结点交换</li><li>排序时，交换根结点与最后结点，使得位序在前的a1跑到a2后面，—&gt;<code>1、a2、a1</code> 因此是不稳定的 </li></ul><h1 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h1><h1 id="基数排序"><a href="#基数排序" class="headerlink" title="基数排序"></a>基数排序</h1><h1 id="外部排序"><a href="#外部排序" class="headerlink" title="外部排序"></a>外部排序</h1><h1 id="新增"><a href="#新增" class="headerlink" title="新增"></a>新增</h1><h2 id="卡特兰数"><a href="#卡特兰数" class="headerlink" title="卡特兰数"></a>卡特兰数</h2><hr><p><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305041049305.png" alt="image.png"></p><p><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305041048131.png" alt="image.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">题目转化--&gt;4个结点的二叉树有多少种形状，然后可以将a b c d按照先序遍历填进二叉树里(填法唯一)</span><br><span class="line">(每种形状必定能按照一定顺序填 a b c d 使得先序遍历出来次序符合要求)</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305041051053.png" alt="image.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">因为1入栈马上出栈，接着2入栈马上出栈，所以只看后面三个数的出栈序列</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305041058998.png" alt="image.png"></p><h2 id="并查集-2022新增考点"><a href="#并查集-2022新增考点" class="headerlink" title="并查集(2022新增考点)"></a>并查集(2022新增考点)</h2><hr><p><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305062008040.png" alt="image.png"></p><p><code>Find查操作</code>：如何查到一个元素到底属于哪个集合？</p><ul><li>从指定元素出发，一路向北，找到根节点，判断根节点是否相同 <img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305062008041.png" alt="image.png"></li></ul><p><code>Union并操作</code>：如何把两个集合合并为一个集合？</p><ul><li>让一棵树成为另一棵树的子树即可<br><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305062008042.png" alt="image.png"></li></ul><p><code>双亲表示法</code>：便于找到父节点(查)，便于合并两棵树(并)<br><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305062008043.png" alt="image.png"></p><blockquote><p><code>代码实现</code><br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> Size 20</span></span><br><span class="line"><span class="type">int</span> UFSets[Size]; <span class="comment">//集合元素数组</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化并查集</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Init</span><span class="params">(<span class="type">int</span> S[])</span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;Size;i++)&#123;</span><br><span class="line">S[i]=<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305062008044.png" alt="image.png"><br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//find查操作，找到x所属集合</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">Find</span><span class="params">(<span class="type">int</span> S[],<span class="type">int</span> x)</span>&#123;</span><br><span class="line"><span class="keyword">while</span>(S[x]&gt;=<span class="number">0</span>)&#123;</span><br><span class="line">x=S[x]; <span class="comment">//找父节点</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//最坏：O(n)，树高=n,find时间复杂度与树高相关</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">//Union并操作，将两个集合合并为一个</span></span><br><span class="line"><span class="comment">void Union(int S[],int root1,int root2)&#123;</span></span><br><span class="line"><span class="comment">if(root2==root1)&#123;</span></span><br><span class="line"><span class="comment">return;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">S[root2]=root1;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">//O(1)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//`Union优化`：小树合并到大树上(用树结点绝对值表示)，避免高度增加</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Union</span><span class="params">(<span class="type">int</span> S[],<span class="type">int</span> root1,<span class="type">int</span> root2)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(root2==root1)&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(S[root1]&gt;S[root2])&#123; </span><br><span class="line">S[root1] += S[root2];</span><br><span class="line">S[root2]=root1;  <span class="comment">//小树合并到大树</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">S[root2] += S[root1];</span><br><span class="line">S[root1] = root2;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//优化后，树高&lt;=log2n ,find最坏时间复杂度O(log2n)</span></span><br></pre></td></tr></table></figure><br><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305062008045.png" alt="image.png"><br><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305062008046.png" alt="image.png"><br><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305062008047.png" alt="image.png"></p></blockquote><p><code>总结</code><br><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305062008048.png" alt="image.png"></p><p><code>find优化+Union优化</code><br><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305062008049.png" alt="image.png"></p><p><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305062008050.png" alt="image.png"></p><h2 id="课后习题-14"><a href="#课后习题-14" class="headerlink" title="课后习题"></a>课后习题</h2><hr><div class="tabs" id="test1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test1-1">1</button></li><li class="tab"><button type="button" data-href="#test1-2">栏目2</button></li><li class="tab"><button type="button" data-href="#test1-3">栏目3</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test1-1"><p><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305062010458.png" alt="image.png"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-2"><p><strong>This is Tab 2.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-3"><p><strong>This is Tab 3.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>]]></content>
      
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>高数</title>
      <link href="/undefined/95b2ede4.html"/>
      <url>/undefined/95b2ede4.html</url>
      
        <content type="html"><![CDATA[<h1 id="基础扫盲"><a href="#基础扫盲" class="headerlink" title="基础扫盲"></a>基础扫盲</h1><h2 id="偏导数存在-连续-可微-偏导数连续关系"><a href="#偏导数存在-连续-可微-偏导数连续关系" class="headerlink" title="偏导数存在-连续-可微-偏导数连续关系"></a>偏导数存在-连续-可微-偏导数连续关系</h2><details>  <summary>点击展开</summary>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">偏导数连续(x.y)</span><br><span class="line">一阶偏导数连续的意思是，该函数的图像是一条连续的线，无论从哪个方向接近某一点，偏导数的</span><br><span class="line">极限都存在且相等。也就是说，偏导数函数在每一点都满足连续性的定义。如果一个函数在某个区</span><br><span class="line">域内的所有点都有一阶连续偏导数，那么这个函数就是可微的(x、y方向的偏导数都连续)</span><br><span class="line">可微(x.y其他任意方向)</span><br><span class="line">是指曲面某一个点处存在一个切面，该点的各个方向的偏导数都存在(x、y和其他任意方向)</span><br><span class="line">偏导数存在(x.y)</span><br><span class="line">偏导数存在的意思是，一个多变量函数的偏导数，就是它关于其中一个变量的导数而保持其他变量</span><br><span class="line">恒定。也就是说，如果一个多元函数在某一点沿着某个方向的偏增量与该方向的增量之比当增量趋</span><br><span class="line">于零时的极限存在，那么这个极限值就是该函数在该点沿着该方向的偏导数(对于二元函数来说</span><br><span class="line">变量只有x.y那么要xy方向都存在偏导数，那么偏导数存在，要考虑两个变量)</span><br><span class="line">函数连续</span><br><span class="line">就是说二元函数所形成的的曲面是连续的没有断口，判断方法--&gt;该点函数值是否等于函数极限值</span><br><span class="line">等于就是连续</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">综上可以得到</span><br><span class="line"></span><br><span class="line">偏导数连续</span><br><span class="line">=&gt;可微</span><br><span class="line">=&gt;连续</span><br><span class="line">=&gt;偏导数存在</span><br></pre></td></tr></table></figure></details><div class="row">    <embed src="/pdf/基础扫盲题.pdf" width="100%" height="550" type="application/pdf"></div><h1 id="三大核心计算"><a href="#三大核心计算" class="headerlink" title="三大核心计算"></a>三大核心计算</h1><h2 id="函数求极限"><a href="#函数求极限" class="headerlink" title="函数求极限"></a>函数求极限</h2><h3 id="无穷小的比较-泰勒公式-极限"><a href="#无穷小的比较-泰勒公式-极限" class="headerlink" title="无穷小的比较-泰勒公式-极限"></a>无穷小的比较-泰勒公式-极限</h3><div class="row">    <embed src="/pdf/无穷小的比较-泰勒公式-极限.pdf" width="100%" height="550" type="application/pdf"></div><h3 id="课后习题"><a href="#课后习题" class="headerlink" title="课后习题"></a>课后习题</h3><div class="row">    <embed src="/pdf/习题.pdf" width="100%" height="550" type="application/pdf"></div><h2 id="函数与求导"><a href="#函数与求导" class="headerlink" title="函数与求导"></a>函数与求导</h2><h3 id="导数的定义"><a href="#导数的定义" class="headerlink" title="导数的定义"></a>导数的定义</h3><p><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304051135693.png" alt="image.png"><br><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304051135205.png" alt="image.png"></p><p><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304051139974.png" alt="image.png"></p><p><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304051146278.png" alt="image.png"></p><h3 id="导数的几何意义"><a href="#导数的几何意义" class="headerlink" title="导数的几何意义"></a>导数的几何意义</h3><p><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304051150223.png" alt="image.png"></p><p><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304051229079.png" alt="image.png"></p><h3 id="各类函数求导"><a href="#各类函数求导" class="headerlink" title="各类函数求导"></a>各类函数求导</h3><h4 id="基本求导公式与四则运算"><a href="#基本求导公式与四则运算" class="headerlink" title="基本求导公式与四则运算"></a>基本求导公式与四则运算</h4><p><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304051700546.png" alt="image.png"></p><h4 id="复合函数求导"><a href="#复合函数求导" class="headerlink" title="复合函数求导"></a>复合函数求导</h4><p><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304051701696.png" alt="image.png"></p><p><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304051708912.png" alt="image.png"></p><h4 id="隐函数求导"><a href="#隐函数求导" class="headerlink" title="隐函数求导"></a>隐函数求导</h4><p><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304051708838.png" alt="image.png"></p><h4 id="参数方程求导"><a href="#参数方程求导" class="headerlink" title="参数方程求导"></a>参数方程求导</h4><p><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304051747241.png" alt="image.png"></p><p><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304051757501.png" alt="image.png"></p><h4 id="反函数求导"><a href="#反函数求导" class="headerlink" title="反函数求导"></a>反函数求导</h4><p><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304051804246.png" alt="image.png"></p><p><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304051810310.png" alt="image.png"></p><h4 id="高阶导数求导"><a href="#高阶导数求导" class="headerlink" title="高阶导数求导"></a>高阶导数求导</h4><h5 id="找规律"><a href="#找规律" class="headerlink" title="找规律"></a>找规律</h5><p><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304051821928.png" alt="image.png"></p><h5 id="莱布尼茨公式"><a href="#莱布尼茨公式" class="headerlink" title="莱布尼茨公式"></a>莱布尼茨公式</h5><p><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304051821393.png" alt="image.png"></p><h5 id="泰勒展开"><a href="#泰勒展开" class="headerlink" title="泰勒展开"></a>泰勒展开</h5><p><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304052214444.png" alt="image.png"></p><h2 id="不定积分的计算"><a href="#不定积分的计算" class="headerlink" title="不定积分的计算"></a>不定积分的计算</h2><h3 id="四大积分方法"><a href="#四大积分方法" class="headerlink" title="四大积分方法"></a>四大积分方法</h3><hr><h4 id="基本积分公式"><a href="#基本积分公式" class="headerlink" title="基本积分公式"></a>基本积分公式</h4><p><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304081717182.png" alt="image.png"></p><h4 id="第一类换元法-凑微分"><a href="#第一类换元法-凑微分" class="headerlink" title="第一类换元法(凑微分)"></a>第一类换元法(凑微分)</h4><hr><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1.两部分相乘，其中一项的导数是否与另外一项有关</span><br><span class="line">2.提到dx里面</span><br><span class="line">3.换元整体求积分</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304081709362.png" alt="image.png"></p><p><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304081727642.png" alt="image.png"></p><h4 id="第二类换元法-去根号"><a href="#第二类换元法-去根号" class="headerlink" title="第二类换元法(去根号)"></a>第二类换元法(去根号)</h4><hr><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">根号下x是一次，整体换成t</span><br><span class="line">根号下x是二次，三角换元</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304082024835.png" alt="image.png"></p><p><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304082211375.png" alt="image.png"></p><p><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304082333064.png" alt="image.png"></p><h4 id="第三类分部积分法"><a href="#第三类分部积分法" class="headerlink" title="第三类分部积分法"></a>第三类分部积分法</h4><hr><p><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304091242072.png" alt="image.png"></p><p><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304091447042.png" alt="image.png"></p><p><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304091457248.png" alt="image.png"></p><h4 id="第四类有理函数积分"><a href="#第四类有理函数积分" class="headerlink" title="第四类有理函数积分"></a>第四类有理函数积分</h4><hr><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">假分式：分子幂次比分母幂次高--&gt;一定可以写成`多项式+真分式`</span><br><span class="line">真分式：分子的幂次比分母低--&gt;例如 </span><br><span class="line">?/(1)(2) --&gt; a/(1) + b/(2)</span><br><span class="line">?/(1)(2)(3)--&gt;a/(1) + b/(2) + c/(3); </span><br><span class="line">?/(1)(2)^2 --&gt; a/(1) + b/(2) + c/(2)^2</span><br><span class="line">其中(1)(2)(3)都是x的一次多项式</span><br><span class="line">多项式的除法如下：</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304091523975.png" alt="image.png"><br><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304091533686.png" alt="image.png"><br><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304091544726.png" alt="image.png"></p><p><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304091550885.png" alt="image.png"></p><h3 id="三角有理式积分"><a href="#三角有理式积分" class="headerlink" title="三角有理式积分"></a>三角有理式积分</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">奇数次凑微分</span><br><span class="line">偶数次降幂</span><br><span class="line">化为同倍角</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304091623849.png" alt="image.png"></p><p><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304091632455.png" alt="image.png"></p><p><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304091637269.png" alt="image.png"></p><p><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304091639418.png" alt="image.png"></p><h2 id="定积分的计算"><a href="#定积分的计算" class="headerlink" title="定积分的计算"></a>定积分的计算</h2><h3 id="定积分的性质"><a href="#定积分的性质" class="headerlink" title="定积分的性质"></a>定积分的性质</h3><h4 id="线性性质"><a href="#线性性质" class="headerlink" title="线性性质"></a>线性性质</h4><p><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304092231993.png" alt="image.png"></p><h4 id="不等式性质"><a href="#不等式性质" class="headerlink" title="不等式性质"></a>不等式性质</h4><p><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304092232647.png" alt="image.png"></p><h4 id="对称性"><a href="#对称性" class="headerlink" title="对称性"></a>对称性</h4><p><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304092239776.png" alt="image.png"></p><h3 id="定积分的计算-1"><a href="#定积分的计算-1" class="headerlink" title="定积分的计算"></a>定积分的计算</h3><h4 id="牛顿莱布尼茨公式"><a href="#牛顿莱布尼茨公式" class="headerlink" title="牛顿莱布尼茨公式"></a>牛顿莱布尼茨公式</h4><p><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304101351992.png" alt="image.png"></p><p><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304101357337.png" alt="image.png"></p><h4 id="定积分的换元法"><a href="#定积分的换元法" class="headerlink" title="定积分的换元法"></a>定积分的换元法</h4><p><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304101404616.png" alt="image.png"></p><p><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304101410502.png" alt="image.png"></p><p><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304101413007.png" alt="image.png"></p><p><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304101426085.png" alt="image.png"></p><h4 id="华里士公式"><a href="#华里士公式" class="headerlink" title="华里士公式"></a>华里士公式</h4><p><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304102132472.png" alt="image.png"></p><p><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304102132831.png" alt="image.png"></p><h4 id="定积分的分部积分法"><a href="#定积分的分部积分法" class="headerlink" title="定积分的分部积分法"></a>定积分的分部积分法</h4><p><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304102038875.png" alt="image.png"></p><p><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304102038203.png" alt="image.png"></p><h4 id="区间在线公式"><a href="#区间在线公式" class="headerlink" title="区间在线公式"></a>区间在线公式</h4><p><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304102102944.png" alt="image.png"></p><p><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304102102751.png" alt="image.png"></p><h2 id="变限积分与反常积分"><a href="#变限积分与反常积分" class="headerlink" title="变限积分与反常积分"></a>变限积分与反常积分</h2><h1 id="高数1-函数-极限-连续"><a href="#高数1-函数-极限-连续" class="headerlink" title="高数1-函数-极限-连续"></a>高数1-函数-极限-连续</h1><hr><h2 id="极限"><a href="#极限" class="headerlink" title="极限"></a>极限</h2><h3 id="8种求极限方法"><a href="#8种求极限方法" class="headerlink" title="8种求极限方法"></a>8种求极限方法</h3><h4 id="method1-基本极限求极限"><a href="#method1-基本极限求极限" class="headerlink" title="method1-基本极限求极限"></a>method1-基本极限求极限</h4><p><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305012219540.png" alt="image.png"></p><p><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305012220359.png" alt="image.png"></p><h4 id="method2-等价无穷小求极限"><a href="#method2-等价无穷小求极限" class="headerlink" title="method2-等价无穷小求极限"></a>method2-等价无穷小求极限</h4><ul><li><code>等价无穷小</code>才能代换<br><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305012221508.png" alt="image.png"></li></ul><p><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305012221512.png" alt="image.png"></p><h4 id="method3-有理运算法则求极限"><a href="#method3-有理运算法则求极限" class="headerlink" title="method3-有理运算法则求极限"></a>method3-有理运算法则求极限</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">相加的极限=极限相加，前提是,两部分的极限都存在</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305012222899.png" alt="image.png"></p><h4 id="method4-洛必达法则求极限"><a href="#method4-洛必达法则求极限" class="headerlink" title="method4-洛必达法则求极限"></a>method4-洛必达法则求极限</h4><p><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305012222158.png" alt="image.png"></p><p><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305012222786.png" alt="image.png"></p><p><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305012222908.png" alt="image.png"></p><p><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305012222445.png" alt="image.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">总结：f(x) n阶可导，最多用洛必达到n-1阶</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305012223174.png" alt="image.png"></p><h4 id="method5-泰勒公式求极限"><a href="#method5-泰勒公式求极限" class="headerlink" title="method5-泰勒公式求极限"></a>method5-泰勒公式求极限</h4><p><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305012224169.png" alt="image.png"></p><p><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305012224130.png" alt="image.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1.传统方法</span><br><span class="line">2.各个击破</span><br><span class="line">3.代入选项</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305012224551.png" alt="image.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">注意，不能拆分成两部分，因为有理运算前提是两部分函数，极限都存在</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305012225514.png" alt="image.png"></p><p><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305012225840.png" alt="image.png"></p><h4 id="method6-夹逼定理求极限"><a href="#method6-夹逼定理求极限" class="headerlink" title="method6-夹逼定理求极限"></a>method6-夹逼定理求极限</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">n项和的极限</span><br><span class="line">放缩法，分母放大，缩小，求一个范围</span><br><span class="line">然后用夹逼定理</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305012225906.png" alt="image.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这种形式开n方，放大时--&gt;全部换成最大项；缩小时--&gt;只保留最大项</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305012225588.png" alt="image.png"></p><p><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305012226412.png" alt="image.png"></p><p><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305012226541.png" alt="image.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">假如，根号里常数是2,可以写成1+1,最终还是可以舍去分成3段函数求最大</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305012226674.png" alt="image.png"></p><h4 id="method7-单调有界准则求极限"><a href="#method7-单调有界准则求极限" class="headerlink" title="method7-单调有界准则求极限"></a>method7-单调有界准则求极限</h4><p><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305012226920.png" alt="image.png"></p><h4 id="定积分定义求极限"><a href="#定积分定义求极限" class="headerlink" title="定积分定义求极限"></a>定积分定义求极限</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">这题用夹逼定则做不出来，基本思路是，看做求定积分，将函数平均划分为n部分，每部分1/n</span><br><span class="line">底x高</span><br><span class="line">看做f(x)求0~n的积分,主要是要抽提出f(x)</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305012226489.png" alt="image.png"></p><h3 id="无穷小量阶的比较"><a href="#无穷小量阶的比较" class="headerlink" title="无穷小量阶的比较"></a>无穷小量阶的比较</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">方法1.</span><br><span class="line">有理化--&gt;分母极限先求</span><br><span class="line">等价代换</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305012227140.png" alt="image.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">方法2.</span><br><span class="line">由于x-&gt;0, 两个根式都趋向于1</span><br><span class="line">构建f(x)=x^(1/2)的拉格朗日中值定理 x2&lt;ζ&lt;x1 </span><br><span class="line">f(x1)-f(x2)=f&#x27;(ζ)(x1-x2)</span><br><span class="line"></span><br><span class="line">方法3.</span><br><span class="line">等价代换</span><br><span class="line">1-cosx~x^2/2 --&gt; 1-(cosx)^α=(α/2)x^2</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305012227233.png" alt="image.png"></p><p><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304231623122.png" alt="image.png"></p><p><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304231627897.png" alt="image.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">方法1.构成等价代换</span><br><span class="line">方法2.拉格朗日中值定理</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305012230880.png" alt="image.png"></p><p><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305012231913.png" alt="image.png"></p><h2 id="连续"><a href="#连续" class="headerlink" title="连续"></a>连续</h2><h3 id="连续性概念"><a href="#连续性概念" class="headerlink" title="连续性概念"></a>连续性概念</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">连续需要满足，该点极限=该点函数值</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305012231169.png" alt="image.png"></p><h3 id="间断点定义及分类"><a href="#间断点定义及分类" class="headerlink" title="间断点定义及分类"></a>间断点定义及分类</h3><p><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305012231532.png" alt="image.png"></p><p><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305012231662.png" alt="image.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">只要有一个极限是无穷,就是无穷间断点</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305012232300.png" alt="image.png"></p><h3 id="连续性的运算与性质"><a href="#连续性的运算与性质" class="headerlink" title="连续性的运算与性质"></a>连续性的运算与性质</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">基本初等函数是指最基本的函数：例如sinx cosx ...，在定义域内连续</span><br><span class="line"></span><br><span class="line">初等函数是指，最基本初等函数经过有限加减乘除运算后得到的例如√cosx-1 ,只在定义区间是定义域内连续的区间，所以只有存在连续区间，才能在区间内连续</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305012232062.png" alt="image.png"></p><p><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305012232410.png" alt="image.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">由于f(x)是初等函数，所以，除x=0,1外处处连续</span><br><span class="line"></span><br><span class="line">x-&gt;0 左右极限没有区别 ，算出极限=-1 ，是第一类可去间断点</span><br><span class="line">x-&gt;1 左右极限不同 ，要分开讨论左右极限，左极限=0，右极限=1 ，是跳跃间断点</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305012233337.png" alt="image.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x^n，n趋于无穷，讨论4种情况：|x|&lt;1 、|x|&gt;1 、x=1、x=-1</span><br><span class="line">e^nx ,n趋于无穷，讨论3种情况：x&lt;0 、x&gt;0 、x=0</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305012233122.png" alt="image.png"></p><h1 id="高数2-导数-微分"><a href="#高数2-导数-微分" class="headerlink" title="高数2-导数-微分"></a>高数2-导数-微分</h1><h2 id="导数概念"><a href="#导数概念" class="headerlink" title="导数概念"></a>导数概念</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">导数：函数在哪一点的变化率</span><br><span class="line">导数定义是△x-&gt;0 的极限</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305012233290.png" alt="image.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">该点左函数的极限值=该点函数值，所以左连续，可以直接求导</span><br><span class="line">该点右函数的极限值!=该点函数值，右不连续，右导数不存在</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305012234982.png" alt="image.png"></p><p><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305012234642.png" alt="image.png"></p><h2 id="微分概念"><a href="#微分概念" class="headerlink" title="微分概念"></a>微分概念</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">微分：函数改变量的近似值，忽略了高阶无穷小</span><br><span class="line"></span><br><span class="line">eg.A△x--&gt;是一个关于x的线性函数--&gt;也称为线性主部分(微分)</span><br><span class="line"></span><br><span class="line">一元函数里面：可微等价于可导</span><br><span class="line">多元函数里面：可微=&gt;可导 ，可导不能推出可微</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305012234144.png" alt="image.png"></p><p><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305012235565.png" alt="image.png"></p><h2 id="导数几何意义"><a href="#导数几何意义" class="headerlink" title="导数几何意义"></a>导数几何意义</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">可导=&gt;切线存在</span><br><span class="line">切线存在 不一定 可导 (切线斜率为∞，导数不存在)</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305012235642.png" alt="image.png"></p><h2 id="微分几何意义"><a href="#微分几何意义" class="headerlink" title="微分几何意义"></a>微分几何意义</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">微分几何意义=切线上的增量dy=A△x</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305012235182.png" alt="image.png"></p><h2 id="连续-可微-可导关系"><a href="#连续-可微-可导关系" class="headerlink" title="连续-可微-可导关系"></a>连续-可微-可导关系</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">一元函数 </span><br><span class="line"></span><br><span class="line">可导：是指，f(x)在x0点处导数存在</span><br><span class="line">连续：f(x)在点x0处连续</span><br><span class="line"></span><br><span class="line">可微&lt;=&gt;可导 </span><br><span class="line">连续不一定可导(尖点)，所以连续不一定可微；</span><br><span class="line">可导/可微=&gt;连续 </span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305012236684.png" alt="image.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">f(x)在x0的邻域内一阶可导，推不出，导函数在x0连续，也推不出，导函数在x0的极限存在</span><br><span class="line"></span><br><span class="line">所以总结：</span><br><span class="line">f(x)n阶可导 ,洛必达中中最多出现n-1阶导数</span><br><span class="line">f(x)n阶导数连续，洛必达可以出现n阶导数</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305012236777.png" alt="image.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x趋于0的函数极限,与x=0的值毫无关系</span><br><span class="line">排除AB</span><br><span class="line">C:x=0处可导，说明函数在x=0处连续，既然连续，那么x=0处的极限存在即lim x-&gt;0 (f(x)/x)存在</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305012237415.png" alt="image.png"></p><h2 id="导数公式及求导法则"><a href="#导数公式及求导法则" class="headerlink" title="导数公式及求导法则"></a>导数公式及求导法则</h2><h3 id="基本初等函数求导公式"><a href="#基本初等函数求导公式" class="headerlink" title="基本初等函数求导公式"></a>基本初等函数求导公式</h3><p><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305012237303.png" alt="image.png"></p><h3 id="复合函数求导法则"><a href="#复合函数求导法则" class="headerlink" title="复合函数求导法则"></a>复合函数求导法则</h3><p><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305012237240.png" alt="image.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">奇函数的导数是偶函数</span><br><span class="line">偶函数的导数是奇函数  </span><br><span class="line"></span><br><span class="line">周期函数的导数任然是周期函数</span><br><span class="line"></span><br><span class="line">运用了奇函数过(0,0)</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305012237438.png" alt="image.png"></p><h3 id="隐函数求导法则"><a href="#隐函数求导法则" class="headerlink" title="隐函数求导法则"></a>隐函数求导法则</h3><p><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305012238267.png" alt="image.png"></p><h3 id="反函数求导法则"><a href="#反函数求导法则" class="headerlink" title="反函数求导法则"></a>反函数求导法则</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">看到反函数，先写出原函数</span><br><span class="line">反函数对y求导数=原函数对x求导数的倒数</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305012238483.png" alt="image.png"></p><h3 id="参数方程求导法则"><a href="#参数方程求导法则" class="headerlink" title="参数方程求导法则"></a>参数方程求导法则</h3><p><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305012238001.png" alt="image.png"></p><p><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305012238200.png" alt="image.png"></p><h3 id="对数求导法则"><a href="#对数求导法则" class="headerlink" title="对数求导法则"></a>对数求导法则</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">两边ln</span><br><span class="line">两边求导。左边对y求，右边对x求</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305012238662.png" alt="image.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">取对数，把连乘连除变成加减</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305012239343.png" alt="image.png"></p><h2 id="高阶导数"><a href="#高阶导数" class="headerlink" title="高阶导数"></a>高阶导数</h2><h3 id="高阶导数定义"><a href="#高阶导数定义" class="headerlink" title="高阶导数定义"></a>高阶导数定义</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">n阶可导，那么就具有&lt;n阶的一切导数的存在</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305012239942.png" alt="image.png"></p><h3 id="常用高阶导数"><a href="#常用高阶导数" class="headerlink" title="常用高阶导数"></a>常用高阶导数</h3><p><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305012239042.png" alt="image.png"></p><p><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305012240996.png" alt="image.png"></p><h2 id="具体应用"><a href="#具体应用" class="headerlink" title="具体应用"></a>具体应用</h2><h3 id="导数定义应用"><a href="#导数定义应用" class="headerlink" title="导数定义应用"></a>导数定义应用</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">这种题，基本思路，认为凑成f(x)导数的定义式</span><br><span class="line"></span><br><span class="line">填空题，直接代入一个具体函数，秒杀</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305012240723.png" alt="image.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">代入具体函数，秒杀</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305012240649.png" alt="image.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">实际要化为导数的定义式，转变化为求x=0的导数问题</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305012241229.png" alt="image.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">常用结论：如下</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305012241771.png" alt="image.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">由定义式推出导数存在，要求左右极限都存在</span><br><span class="line">A.  h-&gt;+∞ ，1/h-&gt;0+  不行</span><br><span class="line">B.  n-&gt;∞，默认n-&gt;+∞,1/n-&gt;0+ ,不行</span><br><span class="line">C.  定义式求导数要求两个点,一定一动，两个点都动，不行</span><br><span class="line">D.  h-&gt;0，默认h-&gt;0+ &amp;&amp; h-&gt;0- ,可以</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305012241531.png" alt="image.png"></p><h3 id="复合-隐函-参数求导应用"><a href="#复合-隐函-参数求导应用" class="headerlink" title="复合-隐函-参数求导应用"></a>复合-隐函-参数求导应用</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">要求二阶导数</span><br><span class="line">根据方程</span><br><span class="line">分别求出x=1时</span><br><span class="line">y=?</span><br><span class="line">y&#x27;=?</span><br><span class="line">最后</span><br><span class="line">y&#x27;&#x27;=?</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305012242326.png" alt="image.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305012242620.png" alt="image.png"></p><h3 id="高阶导数应用"><a href="#高阶导数应用" class="headerlink" title="高阶导数应用"></a>高阶导数应用</h3><p><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305012242698.png" alt="image.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">方法1.高阶导数公式</span><br><span class="line">方法2.泰勒公式</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305012242415.png" alt="image.png"></p><h3 id="导数应用"><a href="#导数应用" class="headerlink" title="导数应用"></a>导数应用</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">对方程求导</span><br><span class="line">求出y&#x27;-&gt;斜率</span><br><span class="line">继而求出切线方程</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305012242257.png" alt="image.png"></p><p><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305012243534.png" alt="image.png"></p><p><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305012243968.png" alt="image.png"></p><h1 id="高数3-微分中值定理及导数应用"><a href="#高数3-微分中值定理及导数应用" class="headerlink" title="高数3-微分中值定理及导数应用"></a>高数3-微分中值定理及导数应用</h1><h2 id="内容概要"><a href="#内容概要" class="headerlink" title="内容概要"></a>内容概要</h2><h3 id="微分中值定理"><a href="#微分中值定理" class="headerlink" title="微分中值定理"></a>微分中值定理</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">微分中值定理目的是为了</span><br><span class="line">建立函数与导数之间的关系</span><br></pre></td></tr></table></figure><ul><li><code>费马定理</code></li><li><code>罗尔定理</code></li><li><code>拉格朗日中值定理</code></li><li><code>柯西中值定理</code><br><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305011611443.png" alt="image.png"></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">实际上就是 x-&gt;0 处的泰勒展开</span><br><span class="line"></span><br><span class="line">建立了 函数 与 高阶导数 之间的关系</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305011612549.png" alt="image.png"></p><h3 id="导数应用-1"><a href="#导数应用-1" class="headerlink" title="导数应用"></a>导数应用</h3><h4 id="函数极值"><a href="#函数极值" class="headerlink" title="函数极值"></a>函数极值</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">驻点：导数为0的点</span><br><span class="line">极值点不一定驻点 |x|</span><br><span class="line">驻点不一定是极值点 x^3</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305011612417.png" alt="image.png"></p><p><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305011612184.png" alt="image.png"></p><p><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305011612620.png" alt="image.png"></p><h4 id="函数最值"><a href="#函数最值" class="headerlink" title="函数最值"></a>函数最值</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">极值点是函数内部领域内的“凸点或尖点”，可以有多个，不一定是最大最小</span><br><span class="line">最值点，可以是某一个极值点，也可以是端点</span><br></pre></td></tr></table></figure><ul><li><code>连续函数f(x)</code>在（a,b）内有<code>多个极值点</code>，那么最值点要么是极值点，要么是端点</li><li><code>连续函数f(x)</code>在（a,b）内有`唯一极值点·，那么这个极值点就是(a,b)内的最大值或最小值点</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">求最值3部曲：</span><br><span class="line">- 求出函数f(x)的所有驻点、不可导点</span><br><span class="line">- 分别求出各自函数值</span><br><span class="line">- 比较函数值大小</span><br></pre></td></tr></table></figure><h4 id="函数凹凸性"><a href="#函数凹凸性" class="headerlink" title="函数凹凸性"></a>函数凹凸性</h4><ul><li>若在区间 <code>I</code>上，<code>f&#39;&#39;(x)&gt;0</code>,函数就是<code>凹的</code></li><li>若在区间 <code>I</code>上，<code>f&#39;&#39;(x)&lt;0</code>,函数就是<code>凸的</code></li><li>若在区间 <code>I</code>上，<code>f&#39;&#39;(x)=0</code>,该点就是函数<code>拐点</code>，左右凹凸性变化</li></ul><h4 id="函数的渐近线"><a href="#函数的渐近线" class="headerlink" title="函数的渐近线"></a>函数的渐近线</h4><ul><li><code>水平渐近线</code></li><li><code>垂直渐进线</code></li><li><code>斜渐近线</code><br><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305011613369.png" alt="image.png"></li></ul><h4 id="弧微分与曲率"><a href="#弧微分与曲率" class="headerlink" title="弧微分与曲率"></a>弧微分与曲率</h4><p><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305011613748.png" alt="image.png"></p><h2 id="常考题型"><a href="#常考题型" class="headerlink" title="常考题型"></a>常考题型</h2><h3 id="求函数极值最值及确定函数凹向与拐点"><a href="#求函数极值最值及确定函数凹向与拐点" class="headerlink" title="求函数极值最值及确定函数凹向与拐点"></a>求函数极值最值及确定函数凹向与拐点</h3><p><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305011613878.png" alt="image.png"></p><p><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305011613028.png" alt="image.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">这种分段函数，求导数和极值问题</span><br><span class="line"></span><br><span class="line">求f&#x27;(x)</span><br><span class="line">1.首先要判断断点处，导数是否存在(即左导数是否等于右导数)</span><br><span class="line">2.根据在断点处导数是否存在，再写f&#x27;(x)，以判断是否在断点处要写等号</span><br><span class="line"></span><br><span class="line">求f(x)极值</span><br><span class="line">3.极值点是驻点或不可导点，列出驻点、不可导点</span><br><span class="line">4.在不可导电需要判断函数是否连续(不能跳跃),连续就继续求，不连续就不属于极值点</span><br><span class="line">5.分别求出驻点、不可导点，根据f&#x27;(x)的正负形判断极大极小</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305011614666.png" alt="image.png"></p><p><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305011614341.png" alt="image.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">目标函数选取的重要性</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305011614024.png" alt="image.png"></p><p><code>画图</code><br><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305011614910.png" alt="image.png"></p><h3 id="求渐近线"><a href="#求渐近线" class="headerlink" title="求渐近线"></a>求渐近线</h3><ul><li><code>ln(1+e^x)-x=ln[(1+e^x)/e^x]</code></li><li>或者<code>ln(1+e^x)-x=x+ln(e^-x + 1)-x</code><br><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305011614026.png" alt="image.png"></li></ul><p><code>去绝对值，分别讨论正负</code><br><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305011614805.png" alt="image.png"></p><h3 id="方程的根"><a href="#方程的根" class="headerlink" title="方程的根"></a>方程的根</h3><p><code>证明根的存在性</code></p><ul><li>罗尔定理：两端为零，之间至少存在一个导数为零</li><li>零点定理：左端右端一正一负，之间至少存在一个值为零<br><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305011615914.png" alt="image.png"></li></ul><p><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305011615726.png" alt="image.png"></p><p><code>给定根数量，求范围</code></p><ul><li>画图<br><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305011615579.png" alt="image.png"></li></ul><h3 id="不等式证明"><a href="#不等式证明" class="headerlink" title="不等式证明"></a>不等式证明</h3><p><code>1.利用拉格朗日中值定理</code><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">f(x)=lnx</span><br><span class="line">至少存在一个ζ</span><br><span class="line">f(1+x)-f(1)=f&#x27;(ζ)(1+x-1)</span><br><span class="line">然后放大分母为1+x,--&gt;最小</span><br><span class="line">缩小分母--&gt;最大</span><br></pre></td></tr></table></figure><br><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305011615051.png" alt="image.png"></p><p><code>2.利用单调性证明不等式</code><br><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305011616425.png" alt="image.png"></p><p><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305011616772.png" alt="image.png"></p><h3 id="中值定理的证明"><a href="#中值定理的证明" class="headerlink" title="中值定理的证明"></a>中值定理的证明</h3><p><code>两次罗尔定理</code><br><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305011616005.png" alt="image.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">利用拉格朗日中值定理</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305011616926.png" alt="image.png"></p><p><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305011617692.png" alt="image.png"></p><h1 id="高数4-不定积分"><a href="#高数4-不定积分" class="headerlink" title="高数4-不定积分"></a>高数4-不定积分</h1><h2 id="内容概要-1"><a href="#内容概要-1" class="headerlink" title="内容概要"></a>内容概要</h2><h3 id="不定积分概念性质"><a href="#不定积分概念性质" class="headerlink" title="不定积分概念性质"></a>不定积分概念性质</h3><h4 id="原函数存在定理"><a href="#原函数存在定理" class="headerlink" title="原函数存在定理"></a><code>原函数存在定理</code></h4><ul><li>若f(x)<code>在区间I连续</code>，则f(x)在区间I上一定存在原函数(导函数连续，原函数必定连续)</li><li>若f(x)在区间I上<code>有第一类间断点</code>，则一定没有原函数</li><li>若f(x)在区间I上<code>有第二类间断点</code>，则可能有原函数(有原函数的导数不一定连续)<br><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305011039122.png" alt="image.png"></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">函数连续,所以有原函数</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305011041496.png" alt="image.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">第一类间断点(跳跃)，一定没有原函数</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305011042885.png" alt="image.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">第二类间断点(震荡)，可能有原函数</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305011047495.png" alt="image.png"></p><h4 id="不定积分性质"><a href="#不定积分性质" class="headerlink" title="不定积分性质"></a>不定积分性质</h4><p><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305011053012.png" alt="image.png"></p><h4 id="不定积分基本公式"><a href="#不定积分基本公式" class="headerlink" title="不定积分基本公式"></a>不定积分基本公式</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cscx=1/sinx</span><br><span class="line">secx=1/cosx</span><br><span class="line">cotx=1/tanx</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305011101776.png" alt="image.png"></p><p><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305011110068.png" alt="image.png"></p><h3 id="三大积分方法"><a href="#三大积分方法" class="headerlink" title="三大积分方法"></a>三大积分方法</h3><h4 id="第一类换元-凑微分"><a href="#第一类换元-凑微分" class="headerlink" title="第一类换元(凑微分)"></a>第一类换元(凑微分)</h4><p><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305011121307.png" alt="image.png"></p><p><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305011123543.png" alt="image.png"></p><p><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305011130757.png" alt="image.png"></p><h4 id="第二类换元法-去根号-1"><a href="#第二类换元法-去根号-1" class="headerlink" title="第二类换元法(去根号)"></a>第二类换元法(去根号)</h4><p><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305011134848.png" alt="image.png"></p><p><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305011153689.png" alt="image.png"><br><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305011153143.png" alt="image.png"><br><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305011154683.png" alt="image.png"><br><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305011154305.png" alt="image.png"><br><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305011152947.png" alt="image.png"><br><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305011152136.png" alt="image.png"></p><h4 id="第三类分部积分"><a href="#第三类分部积分" class="headerlink" title="第三类分部积分"></a>第三类分部积分</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">何时用？</span><br><span class="line">出现两类不同函数相乘</span><br><span class="line">如何用？</span><br><span class="line">Pn(x)代表多项式；如下，画圈的代表先凑进去</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305011156648.png" alt="image.png"></p><p><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305011238404.png" alt="image.png"></p><p><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305011238473.png" alt="image.png"></p><p><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305011242946.png" alt="image.png"></p><h3 id="三类常见可积函数积分"><a href="#三类常见可积函数积分" class="headerlink" title="三类常见可积函数积分"></a>三类常见可积函数积分</h3><h4 id="可积函数概念"><a href="#可积函数概念" class="headerlink" title="可积函数概念"></a>可积函数概念</h4><p><code>可积函数</code>，是指积分可以用<code>初等函数</code>的<code>加减乘除表示</code>，下列是三种常见积不出的函数<br><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305011244308.png" alt="image.png"></p><h4 id="常见可积函数"><a href="#常见可积函数" class="headerlink" title="常见可积函数"></a>常见可积函数</h4><h5 id="有理函数积分"><a href="#有理函数积分" class="headerlink" title="有理函数积分"></a>有理函数积分</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">有理函数积分都能积分出来</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305011246229.png" alt="image.png"></p><p><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305011247873.png" alt="image.png"></p><p><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305011256885.png" alt="image.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">回顾之前的有理函数积分方法</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305011259165.png" alt="image.png"></p><h5 id="三角有理式积分-1"><a href="#三角有理式积分-1" class="headerlink" title="三角有理式积分"></a>三角有理式积分</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">三角函数可以代换为有理函数，因为有理函数都能积分出来，所以三角函数一定能积分出来</span><br><span class="line"></span><br><span class="line">左三角函数积分有两类方法</span><br><span class="line">- 万能代换(万不得已不使用)</span><br><span class="line">- 三角变形、换元、分部</span><br><span class="line"></span><br><span class="line">总结的三个简单规律：</span><br><span class="line">下图R(-sinx,cosx)=-R(sinx,cosx)--&gt;意思是原函数用-sinx替换sinx，只需在函数前加-,这种一般换元cosx=u</span><br><span class="line">...</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305011302914.png" alt="image.png"></p><p><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305011305711.png" alt="image.png"></p><p><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305011332411.png" alt="image.png"></p><p><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305011332272.png" alt="image.png"></p><h5 id="简单无理式积分"><a href="#简单无理式积分" class="headerlink" title="简单无理式积分"></a>简单无理式积分</h5><p><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305011353852.png" alt="image.png"><br><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305011353702.png" alt="image.png"></p><h2 id="不定积分常考题"><a href="#不定积分常考题" class="headerlink" title="不定积分常考题"></a>不定积分常考题</h2><p><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305011452143.png" alt="image.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">分段函数，求原函数</span><br><span class="line">- 首先保证原函数F(x)连续(这样才能处处可导)--&gt;断点处，原函数要连续--&gt;趋于断点处左右原函数极限相等</span><br><span class="line">- 可以得到c1 c2关系--&gt; c2 = c1 + 1</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305011503967.png" alt="image.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">分段函数求原函数</span><br><span class="line">- f(x)处处有定义--&gt;原函数F(x)连续</span><br><span class="line">- 原函数要连续--&gt;满足断点处连续--&gt;左右极限相等</span><br><span class="line">- 得到c1 c2关系</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305011509154.png" alt="image.png"></p><p><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305011603033.png" alt="image.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">下方的</span><br><span class="line">有理函数积分，将分子 利用分母有的两种因子 凑成1</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305011623381.png" alt="image.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">两次分部积分</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305011627054.png" alt="image.png"></p><p><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305011634510.png" alt="image.png"></p><h1 id="高数5-定积分"><a href="#高数5-定积分" class="headerlink" title="高数5-定积分"></a>高数5-定积分</h1><h2 id="内容概要-2"><a href="#内容概要-2" class="headerlink" title="内容概要"></a>内容概要</h2><h3 id="定积分的概念"><a href="#定积分的概念" class="headerlink" title="定积分的概念"></a>定积分的概念</h3><h4 id="定积分定义"><a href="#定积分定义" class="headerlink" title="定积分定义"></a>定积分定义</h4><p><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305011722857.png" alt="image.png"></p><h4 id="定积分存在充分条件"><a href="#定积分存在充分条件" class="headerlink" title="定积分存在充分条件"></a>定积分存在充分条件</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">定积分存在就是可积</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305011728280.png" alt="image.png"></p><h4 id="定积分存在必要条件"><a href="#定积分存在必要条件" class="headerlink" title="定积分存在必要条件"></a>定积分存在必要条件</h4><p><code>可积</code>=&gt;<code>有界</code>(反过来不成立)<br><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305011731879.png" alt="image.png"></p><h4 id="定积分几何意义"><a href="#定积分几何意义" class="headerlink" title="定积分几何意义"></a>定积分几何意义</h4><p><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305011733974.png" alt="image.png"></p><h3 id="定积分性质"><a href="#定积分性质" class="headerlink" title="定积分性质"></a>定积分性质</h3><h4 id="不等式性质-1"><a href="#不等式性质-1" class="headerlink" title="不等式性质"></a>不等式性质</h4><p><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305011736842.png" alt="image.png"></p><h4 id="中值定理"><a href="#中值定理" class="headerlink" title="中值定理"></a>中值定理</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(1)的证明</span><br><span class="line">- f(x)在区间[a,b]连续，即导函数连续，必有原函数F(x)，存在F(a)-F(b)=F&#x27;(ζ)(a-b),拉格朗日中值定理</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305011741252.png" alt="image.png"></p><h3 id="积分上限的函数"><a href="#积分上限的函数" class="headerlink" title="积分上限的函数"></a>积分上限的函数</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">对于第二个定理</span><br><span class="line">若f(x)是奇函数，那么0到x对f(t)dt积分是偶函数，积分下限可以是任意常数，相当于偶函数+常数</span><br><span class="line">但是对于f(x)是偶函数，积分下限只能是0，因为奇函数+常数 就不是奇函数了</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305012252269.png" alt="image.png"></p><h3 id="定积分的计算-2"><a href="#定积分的计算-2" class="headerlink" title="定积分的计算"></a>定积分的计算</h3><p><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305012304896.png" alt="image.png"><br><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305012306157.png" alt="image.png"></p><h2 id="常考题型-1"><a href="#常考题型-1" class="headerlink" title="常考题型"></a>常考题型</h2><h3 id="定积分定义、几何性质应用"><a href="#定积分定义、几何性质应用" class="headerlink" title="定积分定义、几何性质应用"></a>定积分定义、几何性质应用</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">这类题型</span><br><span class="line">- 提取1/n</span><br><span class="line">- 写成定积分形式求</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305021020359.png" alt="image.png"></p><p><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305021022319.png" alt="image.png"></p><p><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305021026083.png" alt="image.png"></p><p><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305021028407.png" alt="image.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">解法1.常规根据上下限，算出面积</span><br><span class="line">解法2(快速).根据定积分奇偶性，根据图像,被积函数是奇函数，所以原函数是偶函数</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305021036825.png" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305021042331.png" alt="image.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">解法1.f&#x27;&#x27;(x)&gt;0 ,函数凹的，根据定积分性质</span><br><span class="line">解法2.排除法，找一个满足题目要求的函数，代入即可</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305021050490.png" alt="image.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">积分中值定理+微分中值定理</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305021421295.png" alt="image.png"><br><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305021422494.png" alt="image.png"></p><h3 id="定积分的计算-3"><a href="#定积分的计算-3" class="headerlink" title="定积分的计算"></a>定积分的计算</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">奇偶性判断+点火公式</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305021425241.png" alt="image.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">奇偶性判断+几何意义</span><br><span class="line">常用的几种圆的积分形式</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305021428611.png" alt="image.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">利用公式∫0-&gt;π xf(sinx) dx = π/2 ∫0-&gt;π f(sinx) dx</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305021433961.png" alt="image.png"></p><p><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305021443943.png" alt="image.png"></p><p><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305021445163.png" alt="image.png"></p><h3 id="变上限积分"><a href="#变上限积分" class="headerlink" title="变上限积分"></a>变上限积分</h3><p><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305021510612.png" alt="image.png"></p><p><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305021521763.png" alt="image.png"><br><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305021509396.png" alt="image.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">对于上下限有x的，且被积分函数含有x的因式因子，首先将x当成常数，将x提出到外面</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305021521474.png" alt="image.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">注意x&gt;=0,∫-1-&gt;x  包括了-1-&gt;0 要分两段计算</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305021542735.png" alt="image.png"></p><p><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305021554116.png" alt="image.png"></p><p><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305021613968.png" alt="image.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">解法2.利用积分中值定理</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305021610552.png" alt="image.png"><br><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305021606709.png" alt="image.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305021614121.png" alt="image.png"></p><h1 id="高数5-反常积分"><a href="#高数5-反常积分" class="headerlink" title="高数5-反常积分"></a>高数5-反常积分</h1><p><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305021617496.png" alt="image.png"></p><h2 id="内容概要-3"><a href="#内容概要-3" class="headerlink" title="内容概要"></a>内容概要</h2><h3 id="无穷区间上的反常积分"><a href="#无穷区间上的反常积分" class="headerlink" title="无穷区间上的反常积分"></a>无穷区间上的反常积分</h3><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><p><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305021640001.png" alt="image.png"></p><h4 id="定理"><a href="#定理" class="headerlink" title="定理"></a>定理</h4><p><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305021647869.png" alt="image.png"></p><h4 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">找合适的p函数，p的取值，可以是，分母x的幂次-分子x的幂次</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305021657042.png" alt="image.png"></p><h3 id="无界函数的反常积分"><a href="#无界函数的反常积分" class="headerlink" title="无界函数的反常积分"></a>无界函数的反常积分</h3><h4 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h4><p><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305022201133.png" alt="image.png"></p><h4 id="定理-1"><a href="#定理-1" class="headerlink" title="定理"></a>定理</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">常用结论中：画蓝线的为无界点</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305022207691.png" alt="image.png"></p><h4 id="例题-1"><a href="#例题-1" class="headerlink" title="例题"></a>例题</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">积分上下限都是无界点，需要分别算--&gt;拆成两部分0-&gt;1/2 和1/2-&gt;1</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305022208858.png" alt="image.png"></p><h2 id="常考题型-2"><a href="#常考题型-2" class="headerlink" title="常考题型"></a>常考题型</h2><h3 id="反常积分敛散性"><a href="#反常积分敛散性" class="headerlink" title="反常积分敛散性"></a>反常积分敛散性</h3><p><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305031126385.png" alt="image.png"></p><p><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305031126832.png" alt="image.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">包含无穷区间，和无界点，需要拆成两部分分别计算</span><br><span class="line">0-&gt;1      此时，主要看0点(无界点)，(1+x)^b-&gt;1 ,,所以p积分指数取a  </span><br><span class="line">1-&gt;无穷   此时,主要看无穷区间，1+x--&gt;x ,所以p积分指数取a+b   </span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305031134500.png" alt="image.png"></p><h3 id="反常积分计算"><a href="#反常积分计算" class="headerlink" title="反常积分计算"></a>反常积分计算</h3><p><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305031156742.png" alt="image.png"></p><h1 id="高数6-定积分应用"><a href="#高数6-定积分应用" class="headerlink" title="高数6-定积分应用"></a>高数6-定积分应用</h1><p><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305031157707.png" alt="image.png"></p><h2 id="内容概要-4"><a href="#内容概要-4" class="headerlink" title="内容概要"></a>内容概要</h2><h3 id="几何应用"><a href="#几何应用" class="headerlink" title="几何应用"></a>几何应用</h3><h4 id="平面图形面积"><a href="#平面图形面积" class="headerlink" title="平面图形面积"></a>平面图形面积</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">本质上还是二重积分，利用二重积分更加容易</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305031327184.png" alt="image.png"></p><h4 id="旋转体体积"><a href="#旋转体体积" class="headerlink" title="旋转体体积"></a>旋转体体积</h4><p><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305031344267.png" alt="image.png"></p><h4 id="曲线弧长"><a href="#曲线弧长" class="headerlink" title="曲线弧长"></a>曲线弧长</h4><p><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305031345840.png" alt="image.png"></p><h2 id="常考题型-3"><a href="#常考题型-3" class="headerlink" title="常考题型"></a>常考题型</h2><h3 id="几何应用-1"><a href="#几何应用-1" class="headerlink" title="几何应用"></a>几何应用</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">使用二重积分，先对x求积分，再对y求积分</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305031355804.png" alt="image.png"></p><p><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305031401556.png" alt="image.png"></p><p><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305031427671.png" alt="image.png"><br><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305031427969.png" alt="image.png"></p><h3 id="物理应用"><a href="#物理应用" class="headerlink" title="物理应用"></a>物理应用</h3><p><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305031500543.png" alt="image.png"><br><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305031459946.png" alt="image.png"></p><p><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305031508079.png" alt="image.png"></p><h1 id="高数7-常微分方程"><a href="#高数7-常微分方程" class="headerlink" title="高数7-常微分方程"></a>高数7-常微分方程</h1><p><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305031510341.png" alt="image.png"></p><h2 id="内容概要-5"><a href="#内容概要-5" class="headerlink" title="内容概要"></a>内容概要</h2><h3 id="常微分方程概念"><a href="#常微分方程概念" class="headerlink" title="常微分方程概念"></a>常微分方程概念</h3><hr><p><code>微分方程</code>：含有未知数导数的方程称为微分方程<br><code>微分方程的阶</code>：含有的未知数导数的最高阶导数的阶数<br><code>微分方程的解</code>：例如微分方程<code>y&#39;&#39;=e^x</code>，那么解可以是<code>y=e^x ，e^x + c1x , e^x + c1x + c2</code><br><code>微分方程的通解</code>：上面<code>y=e^x + c1x + c2</code>就是<code>y&#39;&#39;=e^x</code>的通解<br><code>微分方程的特解</code>：<code>y=e^x , e^x + c1x</code>都是特解<br><code>积分曲线</code>：微分方程的解对应的那条曲线就是微分方程的积分曲线</p><h3 id="一阶微分方程"><a href="#一阶微分方程" class="headerlink" title="一阶微分方程"></a>一阶微分方程</h3><hr><h4 id="可分离变量微分方程"><a href="#可分离变量微分方程" class="headerlink" title="可分离变量微分方程"></a>可分离变量微分方程</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">可以将dx,dy分别移到两边，然后求积分</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305031657268.png" alt="image.png"></p><h4 id="齐次方程"><a href="#齐次方程" class="headerlink" title="齐次方程"></a>齐次方程</h4><p><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305031703516.png" alt="image.png"></p><h4 id="线性方程"><a href="#线性方程" class="headerlink" title="线性方程"></a>线性方程</h4><p><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305031751173.png" alt="image.png"></p><h4 id="伯努利方程及全微分方程"><a href="#伯努利方程及全微分方程" class="headerlink" title="伯努利方程及全微分方程"></a>伯努利方程及全微分方程</h4><p><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305031759927.png" alt="image.png"></p><h3 id="可降价方程"><a href="#可降价方程" class="headerlink" title="可降价方程"></a>可降价方程</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1.最简单</span><br><span class="line">2.基本思路，将y&#x27;替换为P,转换为一阶微分方程计算</span><br><span class="line">3.令y&#x27;=P，则y&#x27;&#x27;=(dP/dy)*P   </span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305031811741.png" alt="image.png"><br><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305031815908.png" alt="image.png"></p><p><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305031823129.png" alt="image.png"></p><h3 id="高阶线性微分方程"><a href="#高阶线性微分方程" class="headerlink" title="高阶线性微分方程"></a>高阶线性微分方程</h3><h4 id="变系数线性微分方程"><a href="#变系数线性微分方程" class="headerlink" title="变系数线性微分方程"></a>变系数线性微分方程</h4><hr><p><code>齐次线性微分方程</code><br><code>非齐次线性微分方程</code><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">暂时还停留在理论层面，实际问题不好求特解</span><br></pre></td></tr></table></figure><br><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305031857961.png" alt="image.png"></p><h4 id="常系数齐次线性微分方程"><a href="#常系数齐次线性微分方程" class="headerlink" title="常系数齐次线性微分方程"></a>常系数齐次线性微分方程</h4><hr><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">与线性齐次微分方程对比不同点，实际上就是，y导数的系数是常数</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305031901716.png" alt="image.png"></p><p><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305031905608.png" alt="image.png"></p><p><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305031925959.png" alt="image.png"></p><p><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305031926834.png" alt="image.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">三阶，三解，单独拆开看</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305031944218.png" alt="image.png"></p><h4 id="常系数非齐次线性微分方程"><a href="#常系数非齐次线性微分方程" class="headerlink" title="常系数非齐次线性微分方程"></a>常系数非齐次线性微分方程</h4><hr><p>非齐次线性方程的解=<code>齐次通解</code>+<code>非齐次特解</code><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">找特解</span><br><span class="line">1.k值看 λ 是几重根</span><br><span class="line">2.k值看 α+iβ 是几重根</span><br></pre></td></tr></table></figure><br><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305032048454.png" alt="image.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1.确定非齐次项类型</span><br><span class="line">2.根据特征方程特征根，得出齐次方程的通解</span><br><span class="line">3.设出合适非齐次特解，根据非齐次项得知 λ ,再根据λ比较特征方程的根，看是几重根,本题λ=0 != r,所以</span><br><span class="line">  k=0</span><br><span class="line">4.将假设的y*带回方程，求出系数</span><br><span class="line">5.非齐次线性方程的解=`齐次通解`+`非齐次特解`</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305032101045.png" alt="image.png"></p><p><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305032109778.png" alt="image.png"></p><h4 id="欧拉方程"><a href="#欧拉方程" class="headerlink" title="欧拉方程"></a>欧拉方程</h4><hr><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">D^2--&gt;r^2</span><br><span class="line">D--&gt;r</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305032114735.png" alt="image.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 高数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言（二）</title>
      <link href="/undefined/3c47b44b.html"/>
      <url>/undefined/3c47b44b.html</url>
      
        <content type="html"><![CDATA[<h2 id="单链表的新建查找"><a href="#单链表的新建查找" class="headerlink" title="单链表的新建查找"></a>单链表的新建查找</h2><h3 id="链表的实现"><a href="#链表的实现" class="headerlink" title="链表的实现"></a>链表的实现</h3><p>链表的实现需要定义结点的结构体类型，例如：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    <span class="type">int</span> data; <span class="comment">// 数据域</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">next</span>;</span> <span class="comment">// 指针域</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>然后需要创建一个头指针，用于指向链表的第一个结点，例如：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">head</span> =</span> <span class="literal">NULL</span>; <span class="comment">// 创建一个空链表</span></span><br></pre></td></tr></table></figure><p>接下来，可以通过动态分配内存的方式，创建新的结点，并将它们链接起来，例如：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">p</span> =</span> (<span class="keyword">struct</span> node *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> node)); <span class="comment">// 创建一个新结点</span></span><br><span class="line">p-&gt;data = <span class="number">10</span>; <span class="comment">// 给数据域赋值</span></span><br><span class="line">p-&gt;next = <span class="literal">NULL</span>; <span class="comment">// 给指针域赋值</span></span><br><span class="line">head = p; <span class="comment">// 将头指针指向新结点</span></span><br></pre></td></tr></table></figure><p>这样就实现了一个只有一个结点的链表。如果要添加更多的结点，可以重复上述过程，并将新结点的地址赋给前一个结点的指针域，例如：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">q</span> =</span> (<span class="keyword">struct</span> node *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> node)); <span class="comment">// 创建另一个新结点</span></span><br><span class="line">q-&gt;data = <span class="number">20</span>; <span class="comment">// 给数据域赋值</span></span><br><span class="line">q-&gt;next = <span class="literal">NULL</span>; <span class="comment">// 给指针域赋值</span></span><br><span class="line">p-&gt;next = q; <span class="comment">// 将前一个结点的指针域指向新结点</span></span><br></pre></td></tr></table></figure><h3 id="链表的删除-插入-查找"><a href="#链表的删除-插入-查找" class="headerlink" title="链表的删除-插入-查找"></a>链表的删除-插入-查找</h3><p>例如，如果要删除链表中的第三个结点，可以用以下代码实现：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">temp</span> =</span> head; <span class="comment">// temp 指向头结点</span></span><br><span class="line">temp = temp-&gt;next; <span class="comment">// temp 指向第二个结点</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">del</span> =</span> temp-&gt;next; <span class="comment">// del 指向要删除的第三个结点</span></span><br><span class="line">temp-&gt;next = del-&gt;next; <span class="comment">// 将第二个结点的指针域指向第四个结点</span></span><br><span class="line"><span class="built_in">free</span>(del); <span class="comment">// 释放第三个结点的内存空间</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>例如，如果要在链表中的第三个结点后插入一个新的结点，可以用以下代码实现：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">new</span> =</span> (<span class="keyword">struct</span> node *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> node)); <span class="comment">// 申请一个新的结点</span></span><br><span class="line">new-&gt;data = x; <span class="comment">// 将要插入的数据赋值给新结点的数据域</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">temp</span> =</span> head; <span class="comment">// temp 指向头结点</span></span><br><span class="line">temp = temp-&gt;next-&gt;next; <span class="comment">// temp 指向第三个结点</span></span><br><span class="line">new-&gt;next = temp-&gt;next; <span class="comment">// 将新结点的指针域指向第四个结点</span></span><br><span class="line">temp-&gt;next = new; <span class="comment">// 将第三个结点的指针域指向新结点</span></span><br></pre></td></tr></table></figure><p>例如，如果要在链表中查找第一个值为 x 的结点，可以用以下代码实现：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">p</span> =</span> head-&gt;next; <span class="comment">// p 指向首元结点</span></span><br><span class="line"><span class="type">int</span> i = <span class="number">1</span>; <span class="comment">// i 记录当前结点的位置</span></span><br><span class="line"><span class="keyword">while</span> (p != <span class="literal">NULL</span>) &#123; <span class="comment">// 遍历链表</span></span><br><span class="line">    <span class="keyword">if</span> (p-&gt;data == x) &#123; <span class="comment">// 如果找到值为 x 的结点</span></span><br><span class="line">        <span class="keyword">return</span> i; <span class="comment">// 返回位置</span></span><br><span class="line">    &#125;</span><br><span class="line">    p = p-&gt;next; <span class="comment">// p 指向下一个结点</span></span><br><span class="line">    i++; <span class="comment">// i 加一</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>; <span class="comment">// 如果遍历到尾部，仍未找到，返回 -1</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="实现顺序表-插入-删除"><a href="#实现顺序表-插入-删除" class="headerlink" title="实现顺序表 插入 删除"></a>实现顺序表 插入 删除</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span>  </span></span><br><span class="line">  </span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MaxSize 100  </span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> ElemType;  </span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span>  </span><br><span class="line">    ElemType data[MaxSize];  </span><br><span class="line">    <span class="type">int</span> length;  </span><br><span class="line">&#125;SqList;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//插入到第二个的函数  </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Put_arry</span><span class="params">(SqList &amp;L,ElemType e)</span>&#123;  </span><br><span class="line">    <span class="type">int</span> i = L.data[<span class="number">1</span>];  </span><br><span class="line">    <span class="type">int</span> j;  </span><br><span class="line">    <span class="keyword">for</span>(j=L.length;j&gt;<span class="number">1</span>;j--)&#123;  </span><br><span class="line">        L.data[j]=L.data[j<span class="number">-1</span>];  </span><br><span class="line">    &#125;  </span><br><span class="line">    L.data[<span class="number">1</span>]=e;  </span><br><span class="line">    L.length++;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//打印顺序表的方法  </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">print_arr</span><span class="params">(SqList L)</span>&#123;  </span><br><span class="line">    <span class="type">int</span> i;  </span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;L.length;i++)&#123;  </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%3d &quot;</span>,L.data[i]);<span class="comment">//&quot;%3表示打印的数字占3个空格  </span></span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//删除元素方法  </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Delet_arry</span><span class="params">(SqList &amp;L,ElemType e)</span>&#123;  </span><br><span class="line">    <span class="type">int</span> i;  </span><br><span class="line">    <span class="keyword">for</span>(i=e;i&lt;L.length;i++)&#123;  </span><br><span class="line">        L.data[i<span class="number">-1</span>]=L.data[i];  </span><br><span class="line">    &#125;  </span><br><span class="line">    L.length--;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;  </span><br><span class="line">    SqList L;  </span><br><span class="line">    L.data[<span class="number">0</span>]=<span class="number">1</span>;  </span><br><span class="line">    L.data[<span class="number">1</span>]=<span class="number">2</span>;  </span><br><span class="line">    L.data[<span class="number">2</span>]=<span class="number">3</span>;  </span><br><span class="line">    L.length=<span class="number">3</span>;  </span><br><span class="line">    ElemType e;  </span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;e);  </span><br><span class="line">    Put_arry(L,e);  </span><br><span class="line">    print_arr(L);  </span><br><span class="line">  </span><br><span class="line">    ElemType del;  </span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;del);  </span><br><span class="line">    Delet_arry(L,del);  </span><br><span class="line">    print_arr(L);  </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="头插法新建链表"><a href="#头插法新建链表" class="headerlink" title="头插法新建链表"></a>头插法新建链表</h3><p>这段代码，实现头插法新建一个链表，每次新建一个结点，都是放到第一个结点（注意头结点不是第一个结点，头结点指向第一个结点），该链表存储int类型数据，通过scanf输入建立对应的存储结点，直到输入9999,结束创建，并且不会包含9999</p><p><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304032033156.png" alt="Snipaste_2023-03-07_17-01-14.png"></p><p><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304032032806.png" alt="Snipaste_2023-03-07_17-07-51.png"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span>  </span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> ElemType;  </span><br><span class="line"><span class="comment">//定义结点结构体  </span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">LNode</span>&#123;</span>  </span><br><span class="line">    ElemType data;<span class="comment">//数据域  </span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">LNode</span> *<span class="title">next</span>;</span><span class="comment">//指针域  </span></span><br><span class="line">&#125;LNode,*LinkList;  </span><br><span class="line"></span><br><span class="line"><span class="comment">//头插法新建链表</span></span><br><span class="line"><span class="comment">//定义一个方法，申请头结点的空间  </span></span><br><span class="line"><span class="comment">//LNode*是结构体指针，与LinkList是完全等价的  </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">list_head_insert</span><span class="params">(LNode* &amp;L)</span>&#123;  </span><br><span class="line">    L= (LinkList)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));<span class="comment">//给L申请一个头结点结点空间  </span></span><br><span class="line">    L-&gt;next=<span class="literal">NULL</span>;  </span><br><span class="line">    ElemType x;<span class="comment">//读取的第一个元素  </span></span><br><span class="line">    LinkList s;<span class="comment">//用来指向新节点  </span></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x);  </span><br><span class="line">    <span class="keyword">while</span> (x!=<span class="number">9999</span>)&#123;  </span><br><span class="line">        s=(LinkList) <span class="built_in">malloc</span>(<span class="keyword">sizeof</span> (LNode));<span class="comment">//给s申请一个新的空间  </span></span><br><span class="line">        s-&gt;data=x;  </span><br><span class="line">        s-&gt;next=L-&gt;next;<span class="comment">//实现头插法，s成为第一个结点  </span></span><br><span class="line">        L-&gt;next=s;<span class="comment">//L作为头结点，任然指向第一个结点  </span></span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x);<span class="comment">//读取x的值  </span></span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="type">void</span> <span class="title function_">print_LinKlist</span><span class="params">(LinkList L)</span>&#123;  </span><br><span class="line">    L=L-&gt;next;  </span><br><span class="line">    <span class="keyword">while</span>(L!=<span class="literal">NULL</span>)&#123;  </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%3d&quot;</span>,L-&gt;data);  </span><br><span class="line">        L=L-&gt;next;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;  </span><br><span class="line">    LinkList L;<span class="comment">//定义链表的头指针  </span></span><br><span class="line">    list_head_insert(L);  </span><br><span class="line">    print_LinKlist(L);  </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="尾插法新建链表"><a href="#尾插法新建链表" class="headerlink" title="尾插法新建链表"></a>尾插法新建链表</h3><p><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304032042218.png" alt="Snipaste_2023-03-07_17-20-00.png"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span>  </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> ElemType;  </span><br><span class="line"><span class="comment">//定义结点结构体  </span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">LNode</span>&#123;</span>  </span><br><span class="line">    ElemType data;<span class="comment">//数据域  </span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">LNode</span> *<span class="title">next</span>;</span><span class="comment">//指针域  </span></span><br><span class="line">&#125;LNode,*LinkList;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//尾插法新建链表  </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">list_tail_insert</span><span class="params">(LinkList &amp;L)</span>&#123;  </span><br><span class="line">    L=(LinkList) <span class="built_in">malloc</span>(<span class="keyword">sizeof</span> (LNode));  </span><br><span class="line">    L-&gt;next=<span class="literal">NULL</span>;  </span><br><span class="line">    ElemType x;  </span><br><span class="line">    LNode *s,*r=L;<span class="comment">//s指向新节点，r指向尾结点 ,将L赋给s,r ,相当于s,r,L都是头结点</span></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x);  </span><br><span class="line">    <span class="keyword">while</span>(x!=<span class="number">9999</span>)&#123;  </span><br><span class="line">        s=(LinkList) <span class="built_in">malloc</span>(<span class="keyword">sizeof</span> (LNode));  </span><br><span class="line">        s-&gt;data=x;  </span><br><span class="line">        r-&gt;next=s;  </span><br><span class="line">        r=s;  <span class="comment">//将s赋给r,r重新指向尾结点</span></span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x);  </span><br><span class="line">    &#125;  </span><br><span class="line">    r-&gt;next=<span class="literal">NULL</span>;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="type">void</span> <span class="title function_">print_LinKlist</span><span class="params">(LinkList L)</span>&#123;  </span><br><span class="line">    L=L-&gt;next;  </span><br><span class="line">    <span class="keyword">while</span>(L!=<span class="literal">NULL</span>)&#123;  </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%3d&quot;</span>,L-&gt;data);  </span><br><span class="line">        L=L-&gt;next;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;  </span><br><span class="line">    LinkList L;<span class="comment">//定义链表的头指针  </span></span><br><span class="line">    list_tail_insert(L);  </span><br><span class="line">    print_LinKlist(L);  </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="链表-按值查找-按位置查找"><a href="#链表-按值查找-按位置查找" class="headerlink" title="链表-按值查找-按位置查找"></a>链表-按值查找-按位置查找</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span>  </span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> ElemType;  </span><br><span class="line"><span class="comment">//定义结点结构体  </span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">LNode</span>&#123;</span>  </span><br><span class="line">    ElemType data;<span class="comment">//数据域  </span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">LNode</span> *<span class="title">next</span>;</span><span class="comment">//指针域  </span></span><br><span class="line">&#125;LNode,*LinkList;  </span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment">//尾插法新建链表  </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">list_tail_insert</span><span class="params">(LinkList &amp;L)</span>&#123;  </span><br><span class="line">    L=(LinkList) <span class="built_in">malloc</span>(<span class="keyword">sizeof</span> (LNode));  </span><br><span class="line">    L-&gt;next=<span class="literal">NULL</span>;  </span><br><span class="line">    ElemType x;  </span><br><span class="line">    LNode *s,*r=L;<span class="comment">//s指向新节点，r指向尾结点  </span></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x);  </span><br><span class="line">    <span class="keyword">while</span>(x!=<span class="number">9999</span>)&#123;  </span><br><span class="line">        s=(LinkList) <span class="built_in">malloc</span>(<span class="keyword">sizeof</span> (LNode));  </span><br><span class="line">        s-&gt;data=x;  </span><br><span class="line">        r-&gt;next=s;  </span><br><span class="line">        r=s;  </span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x);  </span><br><span class="line">    &#125;  </span><br><span class="line">    r-&gt;next=<span class="literal">NULL</span>;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="type">void</span> <span class="title function_">print_LinKlist</span><span class="params">(LinkList L)</span>&#123;  </span><br><span class="line">    L=L-&gt;next;  </span><br><span class="line">    <span class="keyword">while</span>(L!=<span class="literal">NULL</span>)&#123;  </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%3d&quot;</span>,L-&gt;data);  </span><br><span class="line">        L=L-&gt;next;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//按位置查找  </span></span><br><span class="line"> LinkList <span class="title function_">GetEle_by_pos</span><span class="params">(LinkList L,<span class="type">int</span> pos)</span>&#123;  </span><br><span class="line"> <span class="comment">//说明：L头结点的位置是0</span></span><br><span class="line">    <span class="keyword">if</span>(pos&lt;<span class="number">1</span>)&#123;  </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">if</span>(pos==<span class="number">0</span>)&#123;  </span><br><span class="line">        <span class="keyword">return</span> L;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="type">int</span> i=<span class="number">0</span>;  </span><br><span class="line">    <span class="keyword">while</span>(L&amp;&amp;i&lt;pos)&#123;  </span><br><span class="line">        L=L-&gt;next;  </span><br><span class="line">        i++;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> L;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//按值查找  </span></span><br><span class="line">LinkList <span class="title function_">GetEle_by_value</span><span class="params">(LinkList L,<span class="type">int</span> value)</span>&#123;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">while</span>(L)&#123;<span class="comment">//表示L不为空，循环  </span></span><br><span class="line">        <span class="keyword">if</span>(L-&gt;data!=value)&#123;  </span><br><span class="line">            L=L-&gt;next;  </span><br><span class="line">        &#125;<span class="keyword">if</span>(L-&gt;data==value)&#123;  </span><br><span class="line">            <span class="keyword">return</span> L;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;  </span><br><span class="line">  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;  </span><br><span class="line">    LinkList L;<span class="comment">//定义链表的头指针  </span></span><br><span class="line">    list_tail_insert(L);  </span><br><span class="line">    print_LinKlist(L);  </span><br><span class="line">  </span><br><span class="line">    LinkList pNode1 = GetEle_by_pos(L,<span class="number">3</span>);  </span><br><span class="line">    <span class="keyword">if</span>(pNode1!=<span class="literal">NULL</span>)&#123;  </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\nsearch by postion success\n&quot;</span>);  </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;the value is %d\n&quot;</span>,pNode1-&gt;data);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">    LinkList pNode2 = GetEle_by_value(L, <span class="number">8</span>);  </span><br><span class="line">    <span class="keyword">if</span>(pNode2!=<span class="literal">NULL</span>)&#123;  </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;search by value success\n&quot;</span>);  </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;the value is %d\n&quot;</span>,pNode2-&gt;data);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="链表-往第i-个位置插入元素"><a href="#链表-往第i-个位置插入元素" class="headerlink" title="链表 往第i 个位置插入元素"></a>链表 往第i 个位置插入元素</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span>  </span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> ElemType;  </span><br><span class="line"><span class="comment">//定义结点结构体  </span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">LNode</span>&#123;</span>  </span><br><span class="line">    ElemType data;<span class="comment">//数据域  </span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">LNode</span> *<span class="title">next</span>;</span><span class="comment">//指针域  </span></span><br><span class="line">&#125;LNode,*LinkList;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//尾插法新建链表  </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">list_tail_insert</span><span class="params">(LinkList &amp;L)</span>&#123;  </span><br><span class="line">    L=(LinkList) <span class="built_in">malloc</span>(<span class="keyword">sizeof</span> (LNode));  </span><br><span class="line">    L-&gt;next=<span class="literal">NULL</span>;  </span><br><span class="line">    ElemType x;  </span><br><span class="line">    LNode *s,*r=L;<span class="comment">//s指向新节点，r指向尾结点  </span></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x);  </span><br><span class="line">    <span class="keyword">while</span>(x!=<span class="number">9999</span>)&#123;  </span><br><span class="line">        s=(LinkList) <span class="built_in">malloc</span>(<span class="keyword">sizeof</span> (LNode));  </span><br><span class="line">        s-&gt;data=x;  </span><br><span class="line">        r-&gt;next=s;  </span><br><span class="line">        r=s;  </span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x);  </span><br><span class="line">    &#125;  </span><br><span class="line">    r-&gt;next=<span class="literal">NULL</span>;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="comment">//打印链表的方法</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">print_LinKlist</span><span class="params">(LinkList L)</span>&#123;  </span><br><span class="line">    L=L-&gt;next;  </span><br><span class="line">    <span class="keyword">while</span>(L!=<span class="literal">NULL</span>)&#123;  </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%3d&quot;</span>,L-&gt;data);  </span><br><span class="line">        L=L-&gt;next;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//按位置查找  </span></span><br><span class="line"> LinkList <span class="title function_">GetEle_by_pos</span><span class="params">(LinkList L,<span class="type">int</span> pos)</span>&#123;  </span><br><span class="line">    <span class="keyword">if</span>(pos&lt;<span class="number">1</span>)&#123;  </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">if</span>(pos==<span class="number">0</span>)&#123;  </span><br><span class="line">        <span class="keyword">return</span> L;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="type">int</span> i=<span class="number">0</span>;  </span><br><span class="line">    <span class="keyword">while</span>(i&lt;pos)&#123;  </span><br><span class="line">        L=L-&gt;next;  </span><br><span class="line">        i++;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> L;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//插入方法，往第i个位置插入元素  </span></span><br><span class="line"><span class="type">bool</span> <span class="title function_">ListFrontInsert</span><span class="params">(LinkList L,<span class="type">int</span> i,<span class="type">int</span> insert)</span>&#123;  </span><br><span class="line">    <span class="comment">//先找到链表第i-1个位置，并指向  </span></span><br><span class="line">    LinkList p = GetEle_by_pos(L, i<span class="number">-1</span>);  </span><br><span class="line">    <span class="keyword">if</span>(p==<span class="literal">NULL</span>)&#123;  </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="comment">//定义一个新的结点  </span></span><br><span class="line">    LinkList q;  </span><br><span class="line">    q = (LinkList) <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));  </span><br><span class="line">    q-&gt;next=p-&gt;next;  </span><br><span class="line">    q-&gt;data=insert;  </span><br><span class="line">    p-&gt;next=q;  </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"> &#125;  </span><br><span class="line">  </span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;  </span><br><span class="line">    LinkList L;<span class="comment">//定义链表的头指针  </span></span><br><span class="line"></span><br><span class="line">    list_tail_insert(L);  </span><br><span class="line">    print_LinKlist(L);  </span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);  </span><br><span class="line">    ListFrontInsert(L,<span class="number">2</span>,<span class="number">80</span>);  <span class="comment">//往第二个位置，插入80</span></span><br><span class="line">    print_LinKlist(L);  </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="单链表的删除"><a href="#单链表的删除" class="headerlink" title="单链表的删除"></a>单链表的删除</h2><h3 id="单链表删除实战"><a href="#单链表删除实战" class="headerlink" title="单链表删除实战"></a>单链表删除实战</h3><p><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304032047101.png" alt="Snipaste_2023-03-08_22-06-07.png"></p><p><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304032048552.png" alt="Snipaste_2023-03-08_22-03-33.png"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span>  </span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> ElemType;  </span><br><span class="line"><span class="comment">//定义结点结构体  </span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">LNode</span>&#123;</span>  </span><br><span class="line">    ElemType data;<span class="comment">//数据域  </span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">LNode</span> *<span class="title">next</span>;</span><span class="comment">//指针域  </span></span><br><span class="line">&#125;LNode,*LinkList;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//尾插法新建链表  </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">list_tail_insert</span><span class="params">(LinkList &amp;L)</span>&#123;  </span><br><span class="line">    L=(LinkList) <span class="built_in">malloc</span>(<span class="keyword">sizeof</span> (LNode));  </span><br><span class="line">    L-&gt;next=<span class="literal">NULL</span>;  </span><br><span class="line">    ElemType x;  </span><br><span class="line">    LNode *s,*r=L;<span class="comment">//s指向新节点，r指向尾结点  </span></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x);  </span><br><span class="line">    <span class="keyword">while</span>(x!=<span class="number">9999</span>)&#123;  </span><br><span class="line">        s=(LinkList) <span class="built_in">malloc</span>(<span class="keyword">sizeof</span> (LNode));  </span><br><span class="line">        s-&gt;data=x;  </span><br><span class="line">        r-&gt;next=s;  </span><br><span class="line">        r=s;  </span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x);  </span><br><span class="line">    &#125;  </span><br><span class="line">    r-&gt;next=<span class="literal">NULL</span>;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="comment">//按位置查找  </span></span><br><span class="line">LinkList <span class="title function_">GetEle_by_pos</span><span class="params">(LinkList L,<span class="type">int</span> pos)</span>&#123;  </span><br><span class="line">    <span class="comment">//说明：L头结点的位置是0  </span></span><br><span class="line">    <span class="keyword">if</span>(pos&lt;<span class="number">1</span>)&#123;  </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">if</span>(pos==<span class="number">0</span>)&#123;  </span><br><span class="line">        <span class="keyword">return</span> L;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="type">int</span> i=<span class="number">0</span>;  </span><br><span class="line">    <span class="keyword">while</span>(i&lt;pos)&#123;  </span><br><span class="line">        L=L-&gt;next;  </span><br><span class="line">        i++;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> L;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="comment">//打印链表的方法  </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">print_LinKlist</span><span class="params">(LinkList L)</span>&#123;  </span><br><span class="line">    L=L-&gt;next;  </span><br><span class="line">    <span class="keyword">while</span>(L!=<span class="literal">NULL</span>)&#123;  </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%3d&quot;</span>,L-&gt;data);  </span><br><span class="line">        L=L-&gt;next;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//单链表的删除方法  </span></span><br><span class="line"><span class="type">bool</span> <span class="title function_">delet_list</span><span class="params">(LinkList L,<span class="type">int</span> pos)</span>&#123;  <span class="comment">//删除时，L是不会变得，所以不需要加引用</span></span><br><span class="line">    <span class="keyword">if</span>(pos&gt;<span class="number">1</span>)&#123;  </span><br><span class="line">        LinkList p = GetEle_by_pos(L,pos - <span class="number">1</span>); <span class="comment">//拿到哟啊删除结点的前一个结点指针</span></span><br><span class="line">        LinkList q=p-&gt;next;  <span class="comment">//拿到要删除的结点指针</span></span><br><span class="line">        <span class="keyword">if</span>(q!=<span class="literal">NULL</span>)&#123;  </span><br><span class="line">            p-&gt;next=q-&gt;next;  </span><br><span class="line">            <span class="built_in">free</span>(q);  <span class="comment">//释放被删除元素的空间</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;        </span><br><span class="line">            &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;  </span><br><span class="line">    LinkList L;  </span><br><span class="line">    list_tail_insert(L);  </span><br><span class="line">    print_LinKlist(L);  </span><br><span class="line">    delet_list(L,<span class="number">2</span>);  </span><br><span class="line">    print_LinKlist(L);  </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="真题，链表转置实战"><a href="#真题，链表转置实战" class="headerlink" title="真题，链表转置实战"></a>真题，链表转置实战</h3><p>转置图示<img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304041933031.png" alt="image.png"></p><p>合并图解<br><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304041933379.png" alt="image.png"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span>  </span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> ElemType;  </span><br><span class="line"><span class="comment">//定义结点结构体  </span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">LNode</span>&#123;</span>  </span><br><span class="line">    ElemType data;<span class="comment">//数据域  </span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">LNode</span> *<span class="title">next</span>;</span><span class="comment">//指针域  </span></span><br><span class="line">&#125;LNode,*LinkList;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//尾插法新建链表  </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">list_tail_insert</span><span class="params">(LinkList &amp;L)</span>&#123;  </span><br><span class="line">    L=(LinkList) <span class="built_in">malloc</span>(<span class="keyword">sizeof</span> (LNode));  </span><br><span class="line">    L-&gt;next=<span class="literal">NULL</span>;  </span><br><span class="line">    ElemType x;  </span><br><span class="line">    LNode *s,*r=L;<span class="comment">//s指向新节点，r指向尾结点  </span></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x);  </span><br><span class="line">    <span class="keyword">while</span>(x!=<span class="number">9999</span>)&#123;  </span><br><span class="line">        s=(LinkList) <span class="built_in">malloc</span>(<span class="keyword">sizeof</span> (LNode));  </span><br><span class="line">        s-&gt;data=x;  </span><br><span class="line">        r-&gt;next=s;  </span><br><span class="line">        r=s;  </span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x);  </span><br><span class="line">    &#125;  </span><br><span class="line">    r-&gt;next=<span class="literal">NULL</span>;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="comment">//打印链表的方法  </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">print_LinKlist</span><span class="params">(LinkList L)</span>&#123;  </span><br><span class="line">    L=L-&gt;next;  </span><br><span class="line">    <span class="keyword">while</span>(L!=<span class="literal">NULL</span>)&#123;  </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%3d&quot;</span>,L-&gt;data);  </span><br><span class="line">        L=L-&gt;next;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//找中心结点  </span></span><br><span class="line"><span class="comment">//当链表奇数个结点取中间，偶数个结点取前一个  </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">find_middle</span><span class="params">(LinkList L,LinkList &amp;L2)</span>&#123;<span class="comment">//L表示第一条链表头结点，L2表示第二条链表头结点  </span></span><br><span class="line">    L2=(LinkList) <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));  </span><br><span class="line">    LinkList p,pp;<span class="comment">//双指针  </span></span><br><span class="line">    p=pp=L-&gt;next;  </span><br><span class="line">    <span class="keyword">while</span>(pp)&#123;  </span><br><span class="line">        pp=pp-&gt;next;  </span><br><span class="line">        <span class="keyword">if</span>(pp==<span class="literal">NULL</span>)&#123;<span class="comment">//必须判断每一步是否为空，防止崩溃  </span></span><br><span class="line">            <span class="keyword">break</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">        pp=pp-&gt;next;  </span><br><span class="line">        <span class="keyword">if</span>(pp==<span class="literal">NULL</span>)&#123;  </span><br><span class="line">            <span class="keyword">break</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">        p=p-&gt;next;  </span><br><span class="line">    &#125;  </span><br><span class="line">    L2-&gt;next=p-&gt;next;  </span><br><span class="line">    p-&gt;next=<span class="literal">NULL</span>;<span class="comment">//链表最后一个结点next要为空  </span></span><br><span class="line">&#125;  </span><br><span class="line"><span class="comment">//找中心结点，while循环次数是n/2</span></span><br><span class="line">  </span><br><span class="line"><span class="comment">//逆置方法  </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">reverse</span><span class="params">(LinkList L2)</span>&#123;<span class="comment">//逆转是不改变头指针的  </span></span><br><span class="line">    LinkList r,s,t;  </span><br><span class="line">    r=L2-&gt;next;  </span><br><span class="line">    <span class="keyword">if</span>(r==<span class="literal">NULL</span>)&#123;<span class="comment">//没有结点  </span></span><br><span class="line">        <span class="keyword">return</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">    s=r-&gt;next;  </span><br><span class="line">    <span class="keyword">if</span>(s==<span class="literal">NULL</span>)&#123;<span class="comment">//一个结点  </span></span><br><span class="line">        <span class="keyword">return</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">    t=s-&gt;next;  </span><br><span class="line">    <span class="keyword">while</span>(t)&#123;  </span><br><span class="line">        s-&gt;next=r;<span class="comment">//逆转  </span></span><br><span class="line">        r=s;  </span><br><span class="line">        s=t;  </span><br><span class="line">        t=t-&gt;next;  </span><br><span class="line">    &#125;  </span><br><span class="line">    s-&gt;next=r;  </span><br><span class="line">    L2-&gt;next-&gt;next=<span class="literal">NULL</span>;<span class="comment">//逆置后原链表第一个结点，变成最后一个结点，它的next=NULL;  </span></span><br><span class="line">    L2-&gt;next=s;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="comment">//逆转函数逆转的是L2链表，执行次数是n/2,</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//合并方法</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">merge</span><span class="params">(LinkList L,LinkList L2)</span>&#123;  </span><br><span class="line">    LinkList pcur,p,q;  </span><br><span class="line">    pcur=L-&gt;next;  </span><br><span class="line">    p=pcur-&gt;next;  </span><br><span class="line">    q=L2-&gt;next;  </span><br><span class="line">    <span class="keyword">while</span>(p!=<span class="literal">NULL</span>&amp;&amp;q!=<span class="literal">NULL</span>)&#123;  </span><br><span class="line">        pcur-&gt;next=q;  </span><br><span class="line">        q=q-&gt;next;  </span><br><span class="line">        pcur=pcur-&gt;next;  </span><br><span class="line">        pcur-&gt;next=p;  </span><br><span class="line">        p=p-&gt;next;  </span><br><span class="line">        pcur=pcur-&gt;next;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="comment">//上面merge函数的while循环遍历次数是n/2,所以时间复杂度是O(n)</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;  </span><br><span class="line">    LinkList L;  </span><br><span class="line">    LinkList L2;  </span><br><span class="line">  </span><br><span class="line">    list_tail_insert(L);  </span><br><span class="line">    print_LinKlist(L);  </span><br><span class="line">  </span><br><span class="line">    find_middle(L,L2);  </span><br><span class="line">    print_LinKlist(L);  </span><br><span class="line">    print_LinKlist(L2);  </span><br><span class="line">  </span><br><span class="line">    reverse(L2);  </span><br><span class="line">    print_LinKlist(L2);  </span><br><span class="line">  </span><br><span class="line">    merge(L,L2);  </span><br><span class="line">    <span class="built_in">free</span>(L2);  </span><br><span class="line">    print_LinKlist(L);  </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line"><span class="comment">//综上，merge、find_middle、reverse函数总的时间复杂度是1.5n,忽略首项系数O(n)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="OJ测试"><a href="#OJ测试" class="headerlink" title="OJ测试"></a>OJ测试</h3><p>作业说明<img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304032107529.png" alt=""></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span>  </span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> ElemType;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">LNode</span>&#123;</span>  </span><br><span class="line">    ElemType data;  </span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">LNode</span>* <span class="title">next</span>;</span>  </span><br><span class="line">&#125;LNOde,*Linklist;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//尾插法新建链表  </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">list_tail_insert</span><span class="params">(Linklist &amp;L)</span>&#123;  </span><br><span class="line">    L=(Linklist) <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));  </span><br><span class="line">    L-&gt;next=<span class="literal">NULL</span>;  </span><br><span class="line">    Linklist s,r=L;  </span><br><span class="line">    <span class="type">int</span> x;  </span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x);  </span><br><span class="line">    <span class="keyword">while</span>(x!=<span class="number">9999</span>)&#123;  </span><br><span class="line">        s=(Linklist) <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));  </span><br><span class="line">        s-&gt;data=x;  </span><br><span class="line">        r-&gt;next=s;  </span><br><span class="line">        r=s;  </span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x);  </span><br><span class="line">    &#125;  </span><br><span class="line">    s-&gt;next=<span class="literal">NULL</span>;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//按位置查找的方法  </span></span><br><span class="line">Linklist <span class="title function_">getEle_by_pos</span><span class="params">(Linklist L,<span class="type">int</span> pos)</span>&#123;  </span><br><span class="line">    <span class="keyword">if</span>(pos==<span class="number">0</span>)&#123;  </span><br><span class="line">        <span class="keyword">return</span> L;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">if</span>(pos&lt;<span class="number">1</span>)&#123;  </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="type">int</span> i=<span class="number">0</span>;  </span><br><span class="line">    <span class="keyword">while</span>(L&amp;&amp;i&lt;pos)&#123; <span class="comment">//注意：while(i&lt;pos)&#123;&#125; 忽略了L为空 也不能循环 </span></span><br><span class="line">        L=L-&gt;next;  </span><br><span class="line">        i++;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> L;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//按位置插入的方法  </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">list_insert</span><span class="params">(Linklist L,<span class="type">int</span> i,<span class="type">int</span> insert)</span>&#123;  </span><br><span class="line">    Linklist p = getEle_by_pos(L,i - <span class="number">1</span>);  </span><br><span class="line">    <span class="keyword">if</span>(p==<span class="literal">NULL</span>)&#123;  </span><br><span class="line">        <span class="keyword">return</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">    Linklist s;  </span><br><span class="line">  </span><br><span class="line">    s=(Linklist) <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));  </span><br><span class="line">    s-&gt;next=p-&gt;next;  </span><br><span class="line">    s-&gt;data=insert;  </span><br><span class="line">    p-&gt;next=s;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//打印链表的方法  </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">print_list</span><span class="params">(Linklist L)</span>&#123;  </span><br><span class="line">    <span class="keyword">while</span>(L)&#123;  </span><br><span class="line">        L=L-&gt;next;  </span><br><span class="line">        <span class="keyword">if</span>(L==<span class="literal">NULL</span>)&#123;  </span><br><span class="line">            <span class="keyword">break</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%3d&quot;</span>,L-&gt;data);  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;  </span><br><span class="line">    Linklist L;  </span><br><span class="line">    list_tail_insert(L);  </span><br><span class="line">    print_list(L);  </span><br><span class="line">    list_insert(L,<span class="number">2</span>,<span class="number">99</span>);  </span><br><span class="line">    print_list(L);  </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="栈与队列"><a href="#栈与队列" class="headerlink" title="栈与队列"></a>栈与队列</h2><h3 id="栈原理解析"><a href="#栈原理解析" class="headerlink" title="栈原理解析"></a>栈原理解析</h3><p><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304042113354.png" alt="image.png"></p><p><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304042114958.png" alt="image.png"><br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义一个结构体(栈)</span></span><br><span class="line">typrdef <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">Elemtype data[<span class="number">50</span>];</span><br><span class="line"><span class="type">int</span> top;</span><br><span class="line">&#125;SqStack;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//此时栈为空</span></span><br><span class="line">S.top=<span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//入栈操作</span></span><br><span class="line"><span class="comment">//前加加，先获取栈位置，在加元素</span></span><br><span class="line"><span class="comment">//S.top=S.top+1;</span></span><br><span class="line"><span class="comment">//S.data[S.top]=4;</span></span><br><span class="line">S.data[++S.top]</span><br><span class="line"></span><br><span class="line"><span class="comment">//前加加--&gt;先做加1，后做其他运算；</span></span><br><span class="line"><span class="comment">//后加加--&gt;先做其他运算，在做加1；</span></span><br></pre></td></tr></table></figure></p><p><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304042114934.png" alt="image.png"><br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//出栈操作</span></span><br><span class="line"><span class="comment">//后减减，先拿到取出的元素</span></span><br><span class="line"><span class="comment">//x=S.data[S.top];</span></span><br><span class="line"><span class="comment">//S.top=S.top-1;</span></span><br><span class="line">x=S.data[S.top--]</span><br></pre></td></tr></table></figure></p><h3 id="初始化栈-入栈-出栈"><a href="#初始化栈-入栈-出栈" class="headerlink" title="初始化栈-入栈-出栈"></a>初始化栈-入栈-出栈</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span>  </span></span><br><span class="line">  </span><br><span class="line"><span class="meta">#<span class="keyword">define</span> Maxsize 50  </span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> ElemType;  </span><br><span class="line"><span class="comment">//定义栈结构体  </span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span>  </span><br><span class="line">    ElemType data[Maxsize];<span class="comment">//栈空间  </span></span><br><span class="line">    <span class="type">int</span> top;<span class="comment">//栈针  </span></span><br><span class="line">&#125;SqStack;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//初始化栈方法  </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">innit</span><span class="params">(SqStack &amp;S)</span>&#123;  </span><br><span class="line">    S.top=<span class="number">-1</span>;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//压栈方法  </span></span><br><span class="line"><span class="type">bool</span> <span class="title function_">Push</span><span class="params">(SqStack &amp;S,ElemType e)</span>&#123;  </span><br><span class="line">    <span class="keyword">if</span>(S.top==Maxsize<span class="number">-1</span>)&#123;  </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="comment">//S.data[S.top++]=e; //先赋值，然后+</span></span><br><span class="line">    S.data[++S.top]=e;  <span class="comment">//先+，然后赋值</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//打印栈的方法  </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">print_satck</span><span class="params">(SqStack S)</span>&#123;  </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;S.top+<span class="number">1</span>;i++)&#123;  </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%3d&quot;</span>,S.data[i]);  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//判断栈是否为空  </span></span><br><span class="line"><span class="type">bool</span> <span class="title function_">isEmpty</span><span class="params">(SqStack S)</span>&#123;  </span><br><span class="line">    <span class="keyword">if</span>(S.top==<span class="number">-1</span>)&#123;  </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//弹栈方法  </span></span><br><span class="line"><span class="type">bool</span> <span class="title function_">Pop</span><span class="params">(SqStack &amp;S,ElemType &amp;e)</span>&#123;  </span><br><span class="line">    <span class="keyword">if</span>(isEmpty(S))&#123;  </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">    e=S.data[S.top--];<span class="comment">//拿完栈顶元素后，弹栈  </span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;  </span><br><span class="line">    SqStack S;  </span><br><span class="line">    innit(S);  </span><br><span class="line">      </span><br><span class="line">    Push(S,<span class="number">79</span>);  </span><br><span class="line">    Push(S,<span class="number">2</span>);  </span><br><span class="line">    Push(S,<span class="number">3</span>);  </span><br><span class="line">    print_satck(S);  </span><br><span class="line">  </span><br><span class="line">    ElemType e;  </span><br><span class="line">    <span class="type">bool</span> flag;  </span><br><span class="line">    flag=Pop(S,e);  </span><br><span class="line">    <span class="keyword">if</span>(flag)&#123;  </span><br><span class="line">        print_satck(S);  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="队列循环队列原理解析"><a href="#队列循环队列原理解析" class="headerlink" title="队列循环队列原理解析"></a>队列循环队列原理解析</h3><h4 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h4><p><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304042117893.png" alt="image.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">队列实现有两种常见方式：数组、链表</span><br><span class="line"></span><br><span class="line">特点：允许头部删除，尾部增加</span><br></pre></td></tr></table></figure><h5 id="循环队列"><a href="#循环队列" class="headerlink" title="循环队列"></a>循环队列</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">循环队列实现是通过数组的方式</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304042119873.png" alt="image.png"></p><p><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304042144375.png" alt="image.png"></p><p><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304042119533.png" alt="image.png"></p><p><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304042119792.png" alt="image.png"></p><h5 id="链式队列"><a href="#链式队列" class="headerlink" title="链式队列"></a>链式队列</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">链式队列的实现通过链表</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304042121691.png" alt="image.png"></p><h3 id="循环队列数组实现"><a href="#循环队列数组实现" class="headerlink" title="循环队列数组实现"></a>循环队列数组实现</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span>  </span></span><br><span class="line">  </span><br><span class="line"><span class="meta">#<span class="keyword">define</span> Maxsize 5  </span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> ElemType;  </span><br><span class="line"><span class="comment">//循环队列结构体  </span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span>  </span><br><span class="line">    ElemType data[Maxsize];<span class="comment">//数组，存储Maxsize-1个元素  </span></span><br><span class="line">    <span class="type">int</span> front,rear;<span class="comment">//队列头，队列尾  </span></span><br><span class="line">&#125;SqQueue;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//初始化队列方法  </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Innit</span><span class="params">(SqQueue &amp;Q)</span>&#123;  </span><br><span class="line">    Q.rear=Q.front=<span class="number">0</span>;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//入队列函数  </span></span><br><span class="line"><span class="type">bool</span> <span class="title function_">EnQueue</span><span class="params">(SqQueue &amp;Q,ElemType e)</span>&#123;  </span><br><span class="line">    <span class="keyword">if</span>((Q.rear+<span class="number">1</span>)%Maxsize==Q.front)&#123;<span class="comment">//判断队列是否满了  </span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">    Q.data[Q.rear]=e;<span class="comment">//放入元素  </span></span><br><span class="line">    Q.rear=(Q.rear+<span class="number">1</span>)%Maxsize;<span class="comment">//改变队尾标记  </span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//出队列函数  </span></span><br><span class="line"><span class="type">bool</span> <span class="title function_">OutQueue</span><span class="params">(SqQueue &amp;Q,ElemType &amp;x)</span>&#123;  </span><br><span class="line">    <span class="keyword">if</span>(Q.rear==Q.front)&#123;  </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">    x=Q.data[Q.front];<span class="comment">//拿到删除的元素  </span></span><br><span class="line">    Q.front=(Q.front+<span class="number">1</span>)%Maxsize;  </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//打印队列的方法  </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">print_queue</span><span class="params">(SqQueue Q)</span>&#123;  </span><br><span class="line">    <span class="type">int</span> i;  </span><br><span class="line">    <span class="keyword">for</span>(i=Q.front;i&lt;Q.rear;i++)&#123;  </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%3d&quot;</span>,Q.data[i]);  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;  </span><br><span class="line">    SqQueue Q;  </span><br><span class="line">    <span class="type">bool</span> flag;</span><br><span class="line">    ElemType e; </span><br><span class="line">    </span><br><span class="line">    Innit(Q);  </span><br><span class="line">    EnQueue(Q,<span class="number">29</span>);  </span><br><span class="line">    EnQueue(Q,<span class="number">39</span>);  </span><br><span class="line">    EnQueue(Q,<span class="number">9</span>);  </span><br><span class="line">    print_queue(Q);  </span><br><span class="line">  </span><br><span class="line">   </span><br><span class="line">    flag=OutQueue(Q,e); </span><br><span class="line">    <span class="keyword">if</span>(flag)&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Pop success ,the pop value is %d\n&quot;</span>,e);</span><br><span class="line">    &#125; </span><br><span class="line">    print_queue(Q);  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304042122600.png" alt="image.png"></p><h3 id="队列链表实现-1"><a href="#队列链表实现-1" class="headerlink" title="队列链表实现-1"></a>队列链表实现-1</h3><p>这是 带有头结点 的方式实现<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">一般队列的头结点是否有数据取决于队列的实现方式：</span><br><span class="line"></span><br><span class="line">-   如果队列是用数组实现的，那么头结点就是数组的第一个元素，它有数据；</span><br><span class="line">-   如果队列是用链表实现的，那么头结点可以是一个空结点，也可以是链表的第一个元素，这取决于是否使用带头结点的链表。如果使用带头结点的链表，那么头结点没有数据，只是一个指针；如果使用不带头结点的链表，那么头结点就是链表的第一个元素，它有数据。</span><br><span class="line"></span><br></pre></td></tr></table></figure></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span>  </span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> Elemype;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">LinkNode</span>&#123;</span>  </span><br><span class="line">    Elemype data;  </span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">LinkNode</span>* <span class="title">next</span>;</span>  </span><br><span class="line">&#125;LinkNode,*LinkList;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span>  </span><br><span class="line">    LinkList front,rear;<span class="comment">//链表头，链表尾  </span></span><br><span class="line">&#125;LinkQueue;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//初始化链表的方法  </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">innit</span><span class="params">(LinkQueue &amp;Q)</span>&#123;  </span><br><span class="line">    Q.rear=Q.front=(LinkList) <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LinkNode));  <span class="comment">//这是一种带头结点的实现方式</span></span><br><span class="line">    Q.rear-&gt;next</span><br><span class="line">    =<span class="literal">NULL</span>;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//入队列函数,尾部插入法  </span></span><br><span class="line"><span class="type">bool</span> <span class="title function_">EnQueue</span><span class="params">(LinkQueue &amp;Q,Elemype x)</span>&#123;  </span><br><span class="line">    LinkList s;  </span><br><span class="line">    s=(LinkList) <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LinkNode));  </span><br><span class="line">    s-&gt;data=x;  </span><br><span class="line">    Q.rear-&gt;next=s;  </span><br><span class="line">    Q.rear=s;<span class="comment">//注意这一步容易漏掉  </span></span><br><span class="line">    s-&gt;next=<span class="literal">NULL</span>;  </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//出队列函数  </span></span><br><span class="line"><span class="type">bool</span> <span class="title function_">OutQueue</span><span class="params">(LinkQueue &amp;Q)</span>&#123;  </span><br><span class="line">    <span class="keyword">if</span>(Q.front-&gt;next==<span class="literal">NULL</span>)&#123;<span class="comment">//判断一个元素也没有  </span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">    LinkList s=Q.front-&gt;next;  </span><br><span class="line">    Q.front-&gt;next=s-&gt;next;  </span><br><span class="line">    <span class="keyword">if</span>(Q.rear==s)&#123;<span class="comment">//判断删除的是最后一个元素  </span></span><br><span class="line">        Q.rear=Q.front;<span class="comment">//队列为空  </span></span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="built_in">free</span>(s);  </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;  </span><br><span class="line">    LinkQueue Q;  </span><br><span class="line">    innit(Q);  </span><br><span class="line">  </span><br><span class="line">    EnQueue(Q,<span class="number">20</span>);  </span><br><span class="line">    EnQueue(Q,<span class="number">20</span>);  </span><br><span class="line">    EnQueue(Q,<span class="number">20</span>);  </span><br><span class="line">    EnQueue(Q,<span class="number">20</span>);  </span><br><span class="line">  </span><br><span class="line">    <span class="type">bool</span> ret;  </span><br><span class="line">    ret= OutQueue(Q);  </span><br><span class="line">    <span class="keyword">if</span>(ret)&#123;  </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Pop success&quot;</span>);  </span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;  </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Pop fail&quot;</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="队列链表的实现-2"><a href="#队列链表的实现-2" class="headerlink" title="队列链表的实现-2"></a>队列链表的实现-2</h3><ul><li>带头结点的队列，队列的头指针和尾指针都指向一个空的头结点，头结点的next指针指向第一个元素，尾结点的next指针为NULL。</li><li></li><li>不带头结点的队列，队列的头指针指向第一个元素，尾指针指向最后一个元素，尾结点的<br>不带头结点</li></ul><p><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304042149365.png" alt="image.png"></p><p>不带头结点的链表<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*实现不带头结点的链式队列*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> ElemType;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">bool</span> Status;</span><br><span class="line"><span class="comment">/*0.定义链式队列的基本结构*/</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">LinkNode</span> &#123;</span></span><br><span class="line">    <span class="comment">//链式队列结点</span></span><br><span class="line">    ElemType data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">LinkNode</span>* <span class="title">next</span>;</span></span><br><span class="line">&#125;LinkNode;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="comment">//链式队列</span></span><br><span class="line">    LinkNode* front, * rear; <span class="comment">//队列的队头和队尾指针</span></span><br><span class="line">&#125;LinkQueue;</span><br><span class="line"><span class="comment">/*1.初始化链式队列 (不带头结点)*/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">InitQueue</span><span class="params">(LinkQueue&amp; Q)</span> &#123;<span class="comment">//初始时，front、rear都指向NULL</span></span><br><span class="line">    Q.front = <span class="literal">NULL</span>;</span><br><span class="line">    Q.rear = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*2.判断队列是为空（不带头结点）*/</span></span><br><span class="line">Status <span class="title function_">IsEmpty</span><span class="params">(LinkQueue Q)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (Q.front == <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*3.入队 (不带头结点)*/</span></span><br><span class="line">Status <span class="title function_">EnQueue</span><span class="params">(LinkQueue&amp; Q, ElemType x)</span> &#123;</span><br><span class="line">    LinkNode* s = (LinkNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LinkNode));</span><br><span class="line">    <span class="keyword">if</span> (s == <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    s-&gt;data = x;</span><br><span class="line">    s-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">if</span> (Q.front == <span class="literal">NULL</span>) <span class="comment">//在空的队列中插入第一元素</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//不带头结点的队列，第一个元素入队时需要特别处理</span></span><br><span class="line">        Q.front = s; <span class="comment">//修改队头队尾指针</span></span><br><span class="line">        Q.rear = s;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        Q.rear-&gt;next = s; <span class="comment">//新结点插入到rear之后</span></span><br><span class="line">        Q.rear = s; <span class="comment">//修改表尾指针</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*4.出队（不带头结点）*/</span></span><br><span class="line">Status <span class="title function_">DeQueue</span><span class="params">(LinkQueue&amp; Q, ElemType&amp; x)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (Q.front == <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">//空队</span></span><br><span class="line">    LinkNode* p = Q.front; <span class="comment">//p指向此次出队的结点</span></span><br><span class="line">    x = p-&gt;data; <span class="comment">//用变量x返回队头元素</span></span><br><span class="line">    Q.front = p-&gt;next; <span class="comment">//修改front指针</span></span><br><span class="line">    <span class="keyword">if</span> (Q.rear == p) <span class="comment">//此次是最后一个结点出队</span></span><br><span class="line">    &#123;</span><br><span class="line">        Q.front = <span class="literal">NULL</span>; <span class="comment">//front指向NULL</span></span><br><span class="line">        Q.rear = <span class="literal">NULL</span>; <span class="comment">//rear指向NULL</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">free</span>(p); <span class="comment">//释放结点空间</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    LinkQueue Q;</span><br><span class="line">    ElemType x = <span class="number">-1</span>;</span><br><span class="line">    InitQueue(Q);</span><br><span class="line">    EnQueue(Q, <span class="number">3</span>);</span><br><span class="line">    EnQueue(Q, <span class="number">6</span>);</span><br><span class="line">    EnQueue(Q, <span class="number">8</span>);</span><br><span class="line">    EnQueue(Q, <span class="number">9</span>);</span><br><span class="line">    EnQueue(Q, <span class="number">7</span>);</span><br><span class="line">    EnQueue(Q, <span class="number">5</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; <span class="number">6</span>; i++) &#123;</span><br><span class="line">        DeQueue(Q, x);</span><br></pre></td></tr></table></figure></p><h3 id="OJ测试-1"><a href="#OJ测试-1" class="headerlink" title="OJ测试"></a>OJ测试</h3><p><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304042124302.png" alt="image.png"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span>  </span></span><br><span class="line">  </span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MaxSize 5  </span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> ElemType;  </span><br><span class="line"><span class="comment">//定义一个栈结构体  </span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span>  </span><br><span class="line">    ElemType data[MaxSize];  </span><br><span class="line">    <span class="type">int</span> top;  </span><br><span class="line">&#125;SqStack;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//定义一个循环队列结构体  </span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span>  </span><br><span class="line">    ElemType data[MaxSize];  </span><br><span class="line">    <span class="type">int</span> front,rear;<span class="comment">//队列头，队列尾  </span></span><br><span class="line">&#125;SqQueue;  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//初始化栈方法  </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">initStack</span><span class="params">(SqStack &amp;S)</span>&#123;  </span><br><span class="line">    S.top=<span class="number">-1</span>;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//入栈方法  </span></span><br><span class="line"><span class="type">bool</span> <span class="title function_">Push</span><span class="params">(SqStack &amp;S,ElemType e)</span>&#123;  </span><br><span class="line">    <span class="keyword">if</span>(S.top==MaxSize<span class="number">-1</span>)&#123;  </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">    S.data[++S.top]=e;  </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//出栈方法  </span></span><br><span class="line"><span class="type">bool</span> <span class="title function_">Pop</span><span class="params">(SqStack &amp;S,ElemType &amp;e)</span>&#123;  </span><br><span class="line">    <span class="keyword">if</span>(S.top==<span class="number">-1</span>)&#123;  </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">    e=S.data[S.top--];  </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//打印栈的方法  </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">print_stack</span><span class="params">(SqStack S)</span>&#123;  </span><br><span class="line">    <span class="type">int</span> i;  </span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;S.top+<span class="number">1</span>;i++)&#123;  </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%3d&quot;</span>,S.data[i]);  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//初始化队列的方法  </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">initQueue</span><span class="params">(SqQueue &amp;Q)</span>&#123;  </span><br><span class="line">    Q.front=Q.rear=<span class="number">0</span>;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//入队列方法  </span></span><br><span class="line"><span class="type">bool</span> <span class="title function_">EnQueue</span><span class="params">(SqQueue &amp;Q,ElemType e)</span>&#123;  </span><br><span class="line">    <span class="keyword">if</span>((Q.rear+<span class="number">1</span>)%MaxSize==Q.front)&#123;<span class="comment">//判断队列是否满  </span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">    Q.data[Q.rear]=e;  </span><br><span class="line">    Q.rear=(Q.rear+<span class="number">1</span>)%MaxSize;  </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//出队列方法  </span></span><br><span class="line"><span class="type">bool</span> <span class="title function_">OutQueue</span><span class="params">(SqQueue &amp;Q,ElemType &amp;e)</span>&#123;  </span><br><span class="line">    <span class="keyword">if</span>(Q.rear==Q.front)&#123;  </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">    e=Q.data[Q.front];  </span><br><span class="line">    Q.front=(Q.front+<span class="number">1</span>)%MaxSize;  </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//打印队列的方法  </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">print_queue</span><span class="params">(SqQueue Q)</span>&#123;  </span><br><span class="line">    <span class="type">int</span> i;  </span><br><span class="line">    <span class="keyword">for</span>(i=Q.front;i&lt;Q.rear;i++)&#123;  </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%3d&quot;</span>,Q.data[i]);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;  </span><br><span class="line">    SqStack S;  </span><br><span class="line">    initStack(S);  </span><br><span class="line">  </span><br><span class="line">    <span class="type">int</span> i,num;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++)&#123;  </span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;num);  </span><br><span class="line">        Push(S,num);  </span><br><span class="line">    &#125;  </span><br><span class="line">    print_stack(S);  </span><br><span class="line">  </span><br><span class="line">    ElemType m;<span class="comment">//用来存放拿出来的元素  </span></span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++)&#123;  </span><br><span class="line">        Pop(S,m);  </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;the ride num is %d\n&quot;</span>,m);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">    SqQueue Q;  </span><br><span class="line">    ElemType e;  </span><br><span class="line">    initQueue(Q);  </span><br><span class="line">  </span><br><span class="line">    <span class="type">int</span> i2,num2;  </span><br><span class="line">    <span class="type">bool</span> flag;  </span><br><span class="line">    <span class="keyword">for</span>(i2=<span class="number">0</span>;i2&lt;<span class="number">5</span>;i2++)&#123;  </span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;num2);  </span><br><span class="line">        flag=EnQueue(Q,num2);  </span><br><span class="line">        <span class="keyword">if</span>(!flag)&#123;  </span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;flase Queue is full\n&quot;</span>);  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">for</span>(i2=<span class="number">0</span>;i2&lt;<span class="number">4</span>;i2++)&#123;  </span><br><span class="line">        OutQueue(Q,e);  </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%3d&quot;</span>,e);  </span><br><span class="line">    &#125;  </span><br><span class="line">      </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="二叉树的建树和遍历"><a href="#二叉树的建树和遍历" class="headerlink" title="二叉树的建树和遍历"></a>二叉树的建树和遍历</h2><h3 id="树与二叉树原理解析"><a href="#树与二叉树原理解析" class="headerlink" title="树与二叉树原理解析"></a>树与二叉树原理解析</h3><h4 id="树原理解析"><a href="#树原理解析" class="headerlink" title="树原理解析"></a>树原理解析</h4><p><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304042158536.png" alt="image.png"></p><h4 id="二叉树原理"><a href="#二叉树原理" class="headerlink" title="二叉树原理"></a>二叉树原理</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1、满二叉树:每一层都放满了</span><br><span class="line"></span><br><span class="line">2、完全二叉树:除了最后一层，前面层数全部放满，最后一层从左往右，只能是右侧有空</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304042159720.png" alt="image.png"></p><p><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304042200909.png" alt="image.png"></p><h3 id="二叉树的层次建树"><a href="#二叉树的层次建树" class="headerlink" title="二叉树的层次建树"></a>二叉树的层次建树</h3><p><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304042201927.png" alt="image.png"></p><p><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304042201135.png" alt="image.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">上面层次建树的实现通过辅助队列实现</span><br><span class="line">每加一个元素，辅助队列就往队尾加一个元素</span><br><span class="line">而pcur指针判断结点的左右两侧都放满了时，才往后移动</span><br><span class="line">这样就实现了层次建树</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304042201587.png" alt="image.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">以下代码实现了，输入abcdefgj一串连续字符，然后按层次建树存储</span><br><span class="line"></span><br><span class="line">这里的辅助队列有四个指针：front-rear-listpnew-pcur 起初都赋值为NULL,就是没有头结点得方式创建队列</span><br><span class="line"></span><br><span class="line">front指向第一个结点</span><br><span class="line">rear指向末尾结点</span><br><span class="line">listpnew指向新加元素</span><br><span class="line">pcur指向当前结点</span><br><span class="line"></span><br><span class="line">这里的二叉树有一个指针:pnew指向树的最新结点</span><br></pre></td></tr></table></figure><p>头文件  function.h 代码如下<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span>  </span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">typedef</span> <span class="type">char</span> ElenType;  </span><br><span class="line"></span><br><span class="line"><span class="comment">//二叉树的链表结点</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">TNode</span>&#123;</span>  </span><br><span class="line">    ElenType c;<span class="comment">//数据域  </span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">TNode</span> *<span class="title">lift</span>,*<span class="title">right</span>;</span><span class="comment">//指针域:左指针、右指针  </span></span><br><span class="line">&#125;BiTNode,*BiTree;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//辅助队列的链表结点</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">tag</span>&#123;</span>  </span><br><span class="line">    BiTree p;<span class="comment">//p获取数的结点 </span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">tag</span> *<span class="title">pnext</span>;</span>  </span><br><span class="line">&#125;tag,*ptag;</span><br></pre></td></tr></table></figure></p><p>主文件 main.cpp 代码如下<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;function.h&quot;</span>  </span></span><br><span class="line">  </span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;  </span><br><span class="line">    BiTree pnew;<span class="comment">//用来指向树的新节点  </span></span><br><span class="line">    BiTree root=<span class="literal">NULL</span>;<span class="comment">//赋值为NULL用于下面的if判断  </span></span><br><span class="line">    <span class="comment">//注意，树根不像链表头结点  </span></span><br><span class="line">    <span class="comment">//链表头结点用来指向第一个结点，里面可以不放东西  </span></span><br><span class="line">    <span class="comment">//但是二叉树没有头结点</span></span><br><span class="line">    <span class="comment">//第一个结点就是树根，用来存数据 </span></span><br><span class="line">  </span><br><span class="line">    <span class="type">char</span> c;  </span><br><span class="line">    ptag front=<span class="literal">NULL</span>,rear=<span class="literal">NULL</span>,listpnew=<span class="literal">NULL</span>,pcur=<span class="literal">NULL</span>;<span class="comment">//队列头、队列尾、指向树的新节点、指向当前队列结点  </span></span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">&quot;%c&quot;</span>,&amp;c))&#123;  </span><br><span class="line">        <span class="keyword">if</span>(c==<span class="string">&#x27;\n&#x27;</span>)&#123;  </span><br><span class="line">            <span class="keyword">break</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="comment">//calloc申请的空间大小是两个参数相乘，并且初始化空间，赋值为Null(左右指针赋值为Null)  </span></span><br><span class="line">        pnew=(BiTree) <span class="built_in">calloc</span>(<span class="number">1</span>,<span class="keyword">sizeof</span> (BiTNode));  </span><br><span class="line">        pnew-&gt;c=c;  </span><br><span class="line">        listpnew= (ptag)<span class="built_in">calloc</span>(<span class="number">1</span>,<span class="keyword">sizeof</span>(tag));  </span><br><span class="line">        listpnew-&gt;p=pnew;  </span><br><span class="line">        <span class="comment">//如果是树的第一个结点  </span></span><br><span class="line">        <span class="keyword">if</span>(root==<span class="literal">NULL</span>)&#123;  </span><br><span class="line">            root=pnew;<span class="comment">//root指向根结点  </span></span><br><span class="line">            rear=front=listpnew;  </span><br><span class="line">            pcur=listpnew;<span class="comment">//pcur要指向要进入树的父亲元素(当前元素)  </span></span><br><span class="line">        <span class="comment">//if无论是否满足条件都会向下执行，else if只有在上一个条件不满足的情况下才会执行</span></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;  </span><br><span class="line">            rear-&gt;pnext=listpnew;<span class="comment">//入队列  </span></span><br><span class="line">            rear=listpnew;  </span><br><span class="line">            <span class="keyword">if</span>(pcur-&gt;p-&gt;lift==<span class="literal">NULL</span>)&#123;<span class="comment">//左为空，放入左  </span></span><br><span class="line">                pcur-&gt;p-&gt;lift=pnew;  </span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(pcur-&gt;p-&gt;right==<span class="literal">NULL</span>)&#123;<span class="comment">//右为空，放入右  </span></span><br><span class="line">                pcur-&gt;p-&gt;right=pnew;  </span><br><span class="line">                <span class="comment">//此时结点满了  </span></span><br><span class="line">                <span class="comment">//pcur往后移一位  </span></span><br><span class="line">                pcur=pcur-&gt;pnext;  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="二叉树的-前中后-序遍历"><a href="#二叉树的-前中后-序遍历" class="headerlink" title="二叉树的-前中后-序遍历"></a>二叉树的-前中后-序遍历</h3><p>递归思想</p><pre><code>1前序遍历:PreOrder     前序遍历也叫深度优先遍历2中序遍历：InOrder3后序遍历：PostOrder</code></pre><p>function.h代码如下<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span>  </span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">typedef</span> <span class="type">char</span> ElenType;  </span><br><span class="line"></span><br><span class="line"><span class="comment">//二叉树的链表结点</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">TNode</span>&#123;</span>  </span><br><span class="line">    ElenType c;<span class="comment">//数据域  </span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">TNode</span> *<span class="title">lift</span>,*<span class="title">right</span>;</span><span class="comment">//指针域:左指针、右指针  </span></span><br><span class="line">&#125;BiTNode,*BiTree;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//辅助队列的链表结点</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">tag</span>&#123;</span>  </span><br><span class="line">    BiTree p;<span class="comment">//p获取数的结点 </span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">tag</span> *<span class="title">pnext</span>;</span>  </span><br><span class="line">&#125;tag,*ptag;</span><br></pre></td></tr></table></figure></p><p>main.cpp代码如下<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;function.h&quot;</span>  </span></span><br><span class="line">  </span><br><span class="line"><span class="comment">//前序遍历，先序遍历，也叫深度优先遍历  </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">PreOrder</span><span class="params">(BiTree p)</span>&#123;  </span><br><span class="line">    <span class="keyword">if</span>(p!=<span class="literal">NULL</span>) &#123;  </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, p-&gt;c);  </span><br><span class="line">        PreOrder(p-&gt;lift);<span class="comment">//打印左子树  </span></span><br><span class="line">        PreOrder(p-&gt;right);<span class="comment">//打印又子树  </span></span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//中序遍历  </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">InOrder</span><span class="params">(BiTree p)</span>&#123;  </span><br><span class="line">    <span class="keyword">if</span>(p!=<span class="literal">NULL</span>) &#123;  </span><br><span class="line">        InOrder(p-&gt;lift);  </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, p-&gt;c);  </span><br><span class="line">        InOrder(p-&gt;right);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//后序遍历  </span></span><br><span class="line"><span class="type">void</span>  <span class="title function_">PostOrder</span><span class="params">(BiTree p)</span>&#123;  </span><br><span class="line">    <span class="keyword">if</span>(p!=<span class="literal">NULL</span>)&#123;  </span><br><span class="line">        PostOrder(p-&gt;lift);  </span><br><span class="line">        PostOrder(p-&gt;right);  </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,p-&gt;c);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;  </span><br><span class="line">    BiTree pnew;<span class="comment">//用来指向树的新节点  </span></span><br><span class="line">    BiTree root=<span class="literal">NULL</span>;<span class="comment">//用来指向树根  </span></span><br><span class="line">    <span class="comment">//注意，树根不像链表头结点  </span></span><br><span class="line">    <span class="comment">//链表头结点用来指向第一个结点，里面可以不放东西  </span></span><br><span class="line">    <span class="comment">//根就相当于第一个结点，必须有数据  </span></span><br><span class="line">  </span><br><span class="line">    <span class="type">char</span> c;  </span><br><span class="line">    <span class="comment">//队列头、队列尾、指向树的新节点、指向当前队列结点  </span></span><br><span class="line">    ptag front=<span class="literal">NULL</span>,rear=<span class="literal">NULL</span>,listpnew=<span class="literal">NULL</span>,pcur;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">&quot;%c&quot;</span>,&amp;c))&#123;  </span><br><span class="line">        <span class="keyword">if</span>(c==<span class="string">&#x27;\n&#x27;</span>)&#123;  </span><br><span class="line">            <span class="keyword">break</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">    <span class="comment">//calloc申请的空间大小是两个参数相乘，并且初始化空间，赋值为Null(左右指针赋值为Null)  </span></span><br><span class="line">        pnew=(BiTree) <span class="built_in">calloc</span>(<span class="number">1</span>,<span class="keyword">sizeof</span> (BiTNode));  </span><br><span class="line">        pnew-&gt;c=c;  </span><br><span class="line">        listpnew= (ptag)<span class="built_in">calloc</span>(<span class="number">1</span>,<span class="keyword">sizeof</span>(tag));  </span><br><span class="line">        listpnew-&gt;p=pnew;  </span><br><span class="line">        <span class="comment">//如果是树的第一个结点  </span></span><br><span class="line">        <span class="keyword">if</span>(root==<span class="literal">NULL</span>)&#123;  </span><br><span class="line">            root=pnew;<span class="comment">//root指向根结点  </span></span><br><span class="line">            rear=front=listpnew;  </span><br><span class="line">            pcur=listpnew;<span class="comment">//pcur要指向要进入树的父亲元素(当前元素)  </span></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;  </span><br><span class="line">            rear-&gt;pnext=listpnew;<span class="comment">//入队列  </span></span><br><span class="line">            rear=listpnew;  </span><br><span class="line">            <span class="keyword">if</span>(pcur-&gt;p-&gt;lift==<span class="literal">NULL</span>)&#123;<span class="comment">//左为空，放入左  </span></span><br><span class="line">                pcur-&gt;p-&gt;lift=pnew;  </span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(pcur-&gt;p-&gt;right==<span class="literal">NULL</span>)&#123;<span class="comment">//右为空，放入右  </span></span><br><span class="line">                pcur-&gt;p-&gt;right=pnew;  </span><br><span class="line">                <span class="comment">//此时结点满了  </span></span><br><span class="line">                <span class="comment">//pcur往后移一位  </span></span><br><span class="line">                pcur=pcur-&gt;pnext;  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;=================\n&quot;</span>);  </span><br><span class="line">    PreOrder(root);  </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);  </span><br><span class="line">    InOrder(root);  </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);  </span><br><span class="line">    PreOrder(root);  </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="二叉树的层次遍历"><a href="#二叉树的层次遍历" class="headerlink" title="二叉树的层次遍历"></a>二叉树的层次遍历</h3><p>也称广度优先遍历<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[二叉树的广度优先遍历是一种按层次遍历二叉树的方法，它的顺序是从上到下，从左到右，依次访问每一层的节点][。广度优先遍历的原则就是对每一层的节点依次访问，一层访问结束后，进入下一层，直到最后一个节点，每个节点都只访问一次]</span><br><span class="line">[二叉树的广度优先遍历的实现需要借助队列（Queue）这种数据结构，它的特点是先进先出。首先将根节点入队，然后循环执行以下操作，直到队列为空：从队列中取出一个节点，访问它，然后将它的左右子节点（如果有的话）入队]。</span><br><span class="line"></span><br><span class="line">例如，对于下图的二叉树，广度优先遍历的结果是 &#123;1，2，3，4，5，6，7，8，9，10&#125;，遍历过程如下：</span><br><span class="line"></span><br><span class="line">1.  将根节点1入队，队列为【1】</span><br><span class="line">2.  取出节点1，访问它，将它的左右子节点2和3入队，队列为【2，3】</span><br><span class="line">3.  取出节点2，访问它，将它的左右子节点4和5入队，队列为【3，4，5】</span><br><span class="line">4.  取出节点3，访问它，将它的右子节点6入队，队列为【4，5，6】</span><br><span class="line">5.  取出节点4，访问它，将它的左右子节点8和9入队，队列为【5，6，8，9】</span><br><span class="line">6.  取出节点5，访问它，将它的右子节点10入队，队列为【6，8，9，10】</span><br><span class="line">7.  取出节点6，访问它，没有子节点，队列为【8，9，10】</span><br><span class="line">8.  取出节点8，访问它，没有子节点，队列为【9，10】</span><br><span class="line">9.  取出节点9，访问它，没有子节点，队列为【10】</span><br><span class="line">10.  取出节点10，访问它，没有子节点，队列为空，遍历结束</span><br></pre></td></tr></table></figure></p><p><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304042208835.png" alt="image.png"></p><p>代码采用3给文件</p><p>function.h代码如下<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  </span></span><br><span class="line"><span class="comment">// Created by 123 on 2023/3/11.  </span></span><br><span class="line"><span class="comment">//  </span></span><br><span class="line">  </span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> INC_1_TREE_FUNCTION_H  </span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> INC_1_TREE_FUNCTION_H  </span></span><br><span class="line">  </span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span>  </span></span><br><span class="line">  </span><br><span class="line"><span class="comment">//树相关结构  </span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">char</span> BiElemType;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">BiTNode</span>&#123;</span>  </span><br><span class="line">    BiElemType c;  </span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">BiTNode</span> *<span class="title">lift</span>;</span>  </span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">BiTNode</span> *<span class="title">right</span>;</span>  </span><br><span class="line">&#125;BiTNode,*BiTree;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//层次建树的辅助队列  </span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">tag</span>&#123;</span>  </span><br><span class="line">    BiTree p;<span class="comment">//p获取数的结点  </span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">tag</span> *<span class="title">pnext</span>;</span>  </span><br><span class="line">&#125;tag,*ptag;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//层次遍历的辅助队列相关结构  </span></span><br><span class="line"><span class="keyword">typedef</span> BiTree ElemType;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">LinkNode</span>&#123;</span>  </span><br><span class="line">    ElemType data;  </span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">LinkNode</span>* <span class="title">next</span>;</span>  </span><br><span class="line">&#125;LinkNode,*LinkList;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span>  </span><br><span class="line">    LinkList front,rear;<span class="comment">//链表头，链表尾  </span></span><br><span class="line">&#125;LinkQueue;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//初始化队列  </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">innit</span><span class="params">(LinkQueue &amp;Q)</span>;  </span><br><span class="line"><span class="comment">//入队  </span></span><br><span class="line"><span class="type">bool</span> <span class="title function_">EnQueue</span><span class="params">(LinkQueue &amp;Q,ElemType x)</span>;  </span><br><span class="line"><span class="comment">//出队  </span></span><br><span class="line"><span class="type">bool</span> <span class="title function_">OutQueue</span><span class="params">(LinkQueue &amp;Q,ElemType &amp;x)</span>;  </span><br><span class="line"><span class="comment">//判断是否为空  </span></span><br><span class="line"><span class="type">bool</span> <span class="title function_">IsEmpty</span><span class="params">(LinkQueue Q)</span>;  </span><br><span class="line">  </span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">//INC_1_TREE_FUNCTION_H</span></span></span><br></pre></td></tr></table></figure></p><p>Queue.cpp代码如下<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  </span></span><br><span class="line"><span class="comment">// Created by 123 on 2023/3/11.  </span></span><br><span class="line"><span class="comment">//  </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;function.h&quot;</span>  </span></span><br><span class="line"><span class="comment">//初始化链表的方法  </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">innit</span><span class="params">(LinkQueue &amp;Q)</span>&#123;  </span><br><span class="line">    Q.rear=Q.front=(LinkList) <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LinkNode));  </span><br><span class="line">    Q.rear-&gt;next=<span class="literal">NULL</span>;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//入队列函数,尾部插入法  </span></span><br><span class="line"><span class="type">bool</span> <span class="title function_">EnQueue</span><span class="params">(LinkQueue &amp;Q,ElemType x)</span>&#123;  </span><br><span class="line">    LinkList s;  </span><br><span class="line">    s=(LinkList) <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LinkNode));  </span><br><span class="line">    s-&gt;data=x;  </span><br><span class="line">    Q.rear-&gt;next=s;  </span><br><span class="line">    Q.rear=s;<span class="comment">//注意这一步容易漏掉  </span></span><br><span class="line">    s-&gt;next=<span class="literal">NULL</span>;  </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//出队列函数  </span></span><br><span class="line"><span class="type">bool</span> <span class="title function_">OutQueue</span><span class="params">(LinkQueue &amp;Q,ElemType &amp;x)</span>&#123;  </span><br><span class="line">    <span class="keyword">if</span>(Q.front-&gt;next==<span class="literal">NULL</span>)&#123;<span class="comment">//判断一个元素也没有  </span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">    LinkList s=Q.front-&gt;next;  </span><br><span class="line">    x=s-&gt;data;  </span><br><span class="line">    Q.front-&gt;next=s-&gt;next;  </span><br><span class="line">    <span class="keyword">if</span>(Q.rear==s)&#123;<span class="comment">//判断删除的是最后一个元素  </span></span><br><span class="line">        Q.rear=Q.front;<span class="comment">//队列为空  </span></span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="built_in">free</span>(s);  </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//判断是否为空  </span></span><br><span class="line"><span class="type">bool</span> <span class="title function_">IsEmpty</span><span class="params">(LinkQueue Q)</span>&#123;  </span><br><span class="line">    <span class="keyword">if</span>(Q.rear==Q.front)&#123;  </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>main.cpp代码如下<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;function.h&quot;</span>  </span></span><br><span class="line">  </span><br><span class="line"><span class="comment">//前序遍历，先序遍历，也叫深度优先遍历  </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">PreOrder</span><span class="params">(BiTree p)</span>&#123;  </span><br><span class="line">    <span class="keyword">if</span>(p!=<span class="literal">NULL</span>) &#123;  </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, p-&gt;c);  </span><br><span class="line">        PreOrder(p-&gt;lift);<span class="comment">//打印左子树  </span></span><br><span class="line">        PreOrder(p-&gt;right);<span class="comment">//打印又子树  </span></span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//中序遍历  </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">InOrder</span><span class="params">(BiTree p)</span>&#123;  </span><br><span class="line">    <span class="keyword">if</span>(p!=<span class="literal">NULL</span>) &#123;  </span><br><span class="line">        InOrder(p-&gt;lift);  </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, p-&gt;c);  </span><br><span class="line">        InOrder(p-&gt;right);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//后序遍历  </span></span><br><span class="line"><span class="type">void</span>  <span class="title function_">PostOrder</span><span class="params">(BiTree p)</span>&#123;  </span><br><span class="line">    <span class="keyword">if</span>(p!=<span class="literal">NULL</span>)&#123;  </span><br><span class="line">        PostOrder(p-&gt;lift);  </span><br><span class="line">        PostOrder(p-&gt;right);  </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,p-&gt;c);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//层次遍历（广度优先遍历）  </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">LevelOrder</span><span class="params">(BiTree T)</span>&#123;  </span><br><span class="line">    <span class="comment">//辅助队列  </span></span><br><span class="line">    LinkQueue Q;  </span><br><span class="line">    <span class="comment">//初始化队列  </span></span><br><span class="line">    innit(Q);  </span><br><span class="line">    BiTree p;<span class="comment">//获取出队元素  </span></span><br><span class="line">    <span class="comment">//树根入队  </span></span><br><span class="line">    EnQueue(Q,T);  </span><br><span class="line">    <span class="keyword">while</span>(!IsEmpty(Q))&#123;  </span><br><span class="line">        <span class="comment">//出队列的同时，判断出去的这个元素，左右子树是否存在，存在就入队  </span></span><br><span class="line">        <span class="comment">//循环这个过程，直到队列为空  </span></span><br><span class="line">        OutQueue(Q,p);<span class="comment">//出队函数，能获得出队元素，切将出队元素赋值给p  </span></span><br><span class="line">        <span class="built_in">putchar</span>(p-&gt;c);  </span><br><span class="line">        <span class="keyword">if</span>(p-&gt;lift!=<span class="literal">NULL</span>)&#123;<span class="comment">//入队左子树  </span></span><br><span class="line">            EnQueue(Q,p-&gt;lift);  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">if</span>(p-&gt;right!=<span class="literal">NULL</span>)&#123;<span class="comment">//入队右子树  </span></span><br><span class="line">            EnQueue(Q,p-&gt;right);  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;  </span><br><span class="line"></span><br><span class="line"><span class="comment">//首先层次建树</span></span><br><span class="line">    BiTree pnew;<span class="comment">//用来指向树的新节点  </span></span><br><span class="line">    BiTree root=<span class="literal">NULL</span>;<span class="comment">//用来指向树根  </span></span><br><span class="line">    <span class="comment">//注意，树根不像链表头结点  </span></span><br><span class="line">    <span class="comment">//链表头结点用来指向第一个结点，里面可以不放东西  </span></span><br><span class="line">    <span class="comment">//根就相当于第一个结点，必须有数据  </span></span><br><span class="line">  </span><br><span class="line">    <span class="type">char</span> c;  </span><br><span class="line">    <span class="comment">//队列头、队列尾、指向队列的新节点、指向当前队列结点  </span></span><br><span class="line">    ptag front=<span class="literal">NULL</span>,rear=<span class="literal">NULL</span>,listpnew=<span class="literal">NULL</span>,pcur;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">&quot;%c&quot;</span>,&amp;c))&#123;  </span><br><span class="line">        <span class="keyword">if</span>(c==<span class="string">&#x27;\n&#x27;</span>)&#123;  </span><br><span class="line">            <span class="keyword">break</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="comment">//calloc申请的空间大小是两个参数相乘，并且初始化空间，赋值为Null(左右指针赋值为Null)  </span></span><br><span class="line">        pnew=(BiTree) <span class="built_in">calloc</span>(<span class="number">1</span>,<span class="keyword">sizeof</span> (BiTNode));  </span><br><span class="line">        pnew-&gt;c=c;  </span><br><span class="line">        listpnew= (ptag)<span class="built_in">calloc</span>(<span class="number">1</span>,<span class="keyword">sizeof</span>(tag));  </span><br><span class="line">        listpnew-&gt;p=pnew;  </span><br><span class="line">        <span class="comment">//如果是树的第一个结点  </span></span><br><span class="line">        <span class="keyword">if</span>(root==<span class="literal">NULL</span>)&#123;  </span><br><span class="line">            root=pnew;<span class="comment">//root指向根结点  </span></span><br><span class="line">            rear=front=listpnew;  </span><br><span class="line">            pcur=listpnew;<span class="comment">//pcur要指向要进入树的父亲元素(当前元素)  </span></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;  </span><br><span class="line">            rear-&gt;pnext=listpnew;<span class="comment">//入队列  </span></span><br><span class="line">            rear=listpnew;  </span><br><span class="line">            <span class="keyword">if</span>(pcur-&gt;p-&gt;lift==<span class="literal">NULL</span>)&#123;<span class="comment">//左为空，放入左  </span></span><br><span class="line">                pcur-&gt;p-&gt;lift=pnew;  </span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(pcur-&gt;p-&gt;right==<span class="literal">NULL</span>)&#123;<span class="comment">//右为空，放入右  </span></span><br><span class="line">                pcur-&gt;p-&gt;right=pnew;  </span><br><span class="line">                <span class="comment">//此时结点满了  </span></span><br><span class="line">                <span class="comment">//pcur往后移一位  </span></span><br><span class="line">                pcur=pcur-&gt;pnext;  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;=================\n&quot;</span>);  </span><br><span class="line">    PreOrder(root);   <span class="comment">//前序遍历（深度优先遍历）</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>); </span><br><span class="line">    InOrder(root);    <span class="comment">//中序遍历</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);  </span><br><span class="line">    PreOrder(root);   <span class="comment">//后序遍历</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);  </span><br><span class="line">    LevelOrder(root);  <span class="comment">//广度优先遍历</span></span><br><span class="line">  </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="真题-求带权路径长度"><a href="#真题-求带权路径长度" class="headerlink" title="真题-求带权路径长度"></a>真题-求带权路径长度</h3><p><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304042210307.png" alt="image.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">由于与深度有关，可采用深度优先遍历方式(可以获取深度)，最后返回wpl</span><br></pre></td></tr></table></figure><p>function.h代码如下<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span>  </span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">typedef</span> <span class="type">char</span> ElenType;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//二叉树的链表结点  </span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">TNode</span>&#123;</span>  </span><br><span class="line">    ElenType c;<span class="comment">//数据域  </span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">TNode</span> *<span class="title">lift</span>,*<span class="title">right</span>;</span><span class="comment">//指针域:左指针、右指针  </span></span><br><span class="line">&#125;BiTNode,*BiTree;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//辅助队列的链表结点  </span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">tag</span>&#123;</span>  </span><br><span class="line">    BiTree p;<span class="comment">//p获取数的结点  </span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">tag</span> *<span class="title">pnext</span>;</span>  </span><br><span class="line">&#125;tag,*ptag;</span><br></pre></td></tr></table></figure><br>main.cpp代码如下<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;function.h&quot;</span>  </span></span><br><span class="line">  </span><br><span class="line"><span class="comment">//int wpl=0;  </span></span><br><span class="line"><span class="comment">//全局变量，和静态局部变量都是放在数据段  </span></span><br><span class="line"><span class="comment">//静态局部变量只能局部访问，全局变量全局访问  </span></span><br><span class="line">  </span><br><span class="line"><span class="comment">//前序遍历,参数增加一个深度deep  </span></span><br><span class="line"><span class="type">int</span> <span class="title function_">PreOrder</span><span class="params">(BiTree p,<span class="type">int</span> deep)</span>&#123;  </span><br><span class="line">    <span class="comment">//静态变量，只会初始化一次，递归的时候不会再次执行，直接访问  </span></span><br><span class="line">    <span class="comment">//只能局部访问，所以将其以返回值的形式返回  </span></span><br><span class="line">    <span class="type">static</span> <span class="type">int</span> wpl=<span class="number">0</span>;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">if</span>(p!=<span class="literal">NULL</span>) &#123;  </span><br><span class="line">        <span class="keyword">if</span>(p-&gt;lift==<span class="literal">NULL</span>&amp;&amp;p-&gt;right==<span class="literal">NULL</span>)&#123;  </span><br><span class="line">            wpl+=p-&gt;c*deep;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;ele%c---deep%d\n&quot;</span>, p-&gt;c,deep);  </span><br><span class="line">        PreOrder(p-&gt;lift,deep+<span class="number">1</span>);<span class="comment">//打印左子树  </span></span><br><span class="line">        PreOrder(p-&gt;right,deep+<span class="number">1</span>);<span class="comment">//打印又子树  </span></span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> wpl;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;  </span><br><span class="line">    BiTree pnew;<span class="comment">//用来指向树的新节点  </span></span><br><span class="line">    BiTree root=<span class="literal">NULL</span>;<span class="comment">//这里赋值NULL用于下面的判断  </span></span><br><span class="line">    <span class="comment">//注意，树根不像链表头结点  </span></span><br><span class="line">    <span class="comment">//链表头结点用来指向第一个结点，里面可以不放东西  </span></span><br><span class="line">    <span class="comment">//根就相当于第一个结点，必须有数据  </span></span><br><span class="line">  </span><br><span class="line">    <span class="type">char</span> c;  </span><br><span class="line">    <span class="comment">//队列头、队列尾、指向树的新节点、指向当前队列结点  </span></span><br><span class="line">    ptag front=<span class="literal">NULL</span>,rear=<span class="literal">NULL</span>,listpnew=<span class="literal">NULL</span>,pcur;  </span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">&quot;%c&quot;</span>,&amp;c))&#123;  </span><br><span class="line">        <span class="keyword">if</span>(c==<span class="string">&#x27;\n&#x27;</span>)&#123;  </span><br><span class="line">            <span class="keyword">break</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="comment">//calloc申请的空间大小是两个参数相乘，并且初始化空间，赋值为Null(左右指针赋值为Null)  </span></span><br><span class="line">        pnew=(BiTree) <span class="built_in">calloc</span>(<span class="number">1</span>,<span class="keyword">sizeof</span> (BiTNode));  </span><br><span class="line">        pnew-&gt;c=c;  </span><br><span class="line">        listpnew= (ptag)<span class="built_in">calloc</span>(<span class="number">1</span>,<span class="keyword">sizeof</span>(tag));  </span><br><span class="line">        listpnew-&gt;p=pnew;  </span><br><span class="line">        <span class="comment">//如果是树的第一个结点  </span></span><br><span class="line">        <span class="keyword">if</span>(root==<span class="literal">NULL</span>)&#123;  </span><br><span class="line">            root=pnew;<span class="comment">//root指向根结点  </span></span><br><span class="line">            rear=front=listpnew;  </span><br><span class="line">            pcur=listpnew;<span class="comment">//pcur要指向要进入树的父亲元素(当前元素)  </span></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;  </span><br><span class="line">            rear-&gt;pnext=listpnew;<span class="comment">//入队列  </span></span><br><span class="line">            rear=listpnew;  </span><br><span class="line">            <span class="keyword">if</span>(pcur-&gt;p-&gt;lift==<span class="literal">NULL</span>)&#123;<span class="comment">//左为空，放入左  </span></span><br><span class="line">                pcur-&gt;p-&gt;lift=pnew;  </span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(pcur-&gt;p-&gt;right==<span class="literal">NULL</span>)&#123;<span class="comment">//右为空，放入右  </span></span><br><span class="line">                pcur-&gt;p-&gt;right=pnew;  </span><br><span class="line">                <span class="comment">//此时结点满了  </span></span><br><span class="line">                <span class="comment">//pcur往后移一位  </span></span><br><span class="line">                pcur=pcur-&gt;pnext;  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;=================\n&quot;</span>);  </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;wpl=%d&quot;</span>,PreOrder(root,<span class="number">0</span>));  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="OJ测试-2"><a href="#OJ测试-2" class="headerlink" title="OJ测试"></a>OJ测试</h3><p><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304042211919.png" alt="image.png"></p><p>代码实现<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span>  </span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">typedef</span> <span class="type">char</span> ElemType;  </span><br><span class="line"><span class="comment">//二叉树结构体  </span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">TNode</span>&#123;</span>  </span><br><span class="line">    ElemType data;  </span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">TNode</span> *<span class="title">lift</span>;</span>  </span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">TNode</span> *<span class="title">right</span>;</span>  </span><br><span class="line">&#125;TNode,*BiTree;  </span><br><span class="line"><span class="comment">//辅助队列结构体  </span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">QNode</span>&#123;</span>  </span><br><span class="line">    BiTree p;  </span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">QNode</span> *<span class="title">next</span>;</span>  </span><br><span class="line">&#125;QNode,*Queue;  </span><br><span class="line">  </span><br><span class="line"><span class="type">void</span> <span class="title function_">PreOreder</span><span class="params">(BiTree T)</span>&#123;  </span><br><span class="line">    <span class="keyword">if</span>(T!=<span class="literal">NULL</span>)&#123;  </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,T-&gt;data);  </span><br><span class="line">        PreOreder(T-&gt;lift);  </span><br><span class="line">        PreOreder(T-&gt;right);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;  </span><br><span class="line">  </span><br><span class="line">    ElemType c;  </span><br><span class="line">    BiTree root=<span class="literal">NULL</span>;  </span><br><span class="line">    BiTree pnew;  </span><br><span class="line">  </span><br><span class="line">    Queue front=<span class="literal">NULL</span>,rear=<span class="literal">NULL</span>,listpnew=<span class="literal">NULL</span>,pcur=<span class="literal">NULL</span>;  </span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">&quot;%c&quot;</span>,&amp;c))&#123;  </span><br><span class="line">        <span class="keyword">if</span>(c==<span class="string">&#x27;\n&#x27;</span>)&#123;  </span><br><span class="line">            <span class="keyword">break</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">        pnew=(BiTree) <span class="built_in">calloc</span>(<span class="number">1</span>,<span class="keyword">sizeof</span> (TNode));  </span><br><span class="line">        pnew-&gt;data=c;  </span><br><span class="line">        listpnew=(Queue) <span class="built_in">calloc</span>(<span class="number">1</span>, <span class="keyword">sizeof</span>(QNode));  </span><br><span class="line">        listpnew-&gt;p=pnew;  </span><br><span class="line">        <span class="keyword">if</span>(root==<span class="literal">NULL</span>)&#123;  </span><br><span class="line">            root=pnew;  </span><br><span class="line">            front=rear=pcur=listpnew;  </span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;  </span><br><span class="line">            rear-&gt;next=listpnew;  </span><br><span class="line">            rear=listpnew;  </span><br><span class="line">            <span class="keyword">if</span>(pcur-&gt;p-&gt;lift==<span class="literal">NULL</span>)&#123;  </span><br><span class="line">                pcur-&gt;p-&gt;lift=pnew;  </span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(pcur-&gt;p-&gt;right==<span class="literal">NULL</span>)&#123;  </span><br><span class="line">                pcur-&gt;p-&gt;right=pnew;  </span><br><span class="line">                pcur=pcur-&gt;next;  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">    &#125;  </span><br><span class="line">    PreOreder(root);  </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="查找算法"><a href="#查找算法" class="headerlink" title="查找算法"></a>查找算法</h2><h3 id="顺序表查找原理及实战"><a href="#顺序表查找原理及实战" class="headerlink" title="顺序表查找原理及实战"></a>顺序表查找原理及实战</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;time.h&gt;</span>  </span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> ELemType;  </span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span>  </span><br><span class="line">    ELemType* elem;<span class="comment">//整数型指针，申请的对空间起始地址存入elem  </span></span><br><span class="line">    <span class="type">int</span> TableLen;<span class="comment">//存储动态数组里边元素的个数  </span></span><br><span class="line">&#125;SSTable;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//初始化顺序表  </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">st_init</span><span class="params">(SSTable &amp;ST,<span class="type">int</span> len)</span>&#123;  </span><br><span class="line">    <span class="comment">//多申请一个位置，是为了存哨兵的，不用哨兵也可以的  </span></span><br><span class="line">    ST.TableLen=len+<span class="number">1</span>;  </span><br><span class="line">    ST.elem= (ELemType*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span> (ELemType)*ST.TableLen);  </span><br><span class="line">    <span class="type">int</span> i;  </span><br><span class="line">    srand(time(<span class="literal">NULL</span>));<span class="comment">//随机数生成  </span></span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;ST.TableLen;i++)&#123;<span class="comment">//因为第0个放的位置是哨兵，所以从1开始随机  </span></span><br><span class="line">        ST.elem[i]=rand() % <span class="number">100</span>;<span class="comment">//生成1-99之间的随机数  </span></span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="type">void</span> <span class="title function_">st_print</span><span class="params">(SSTable ST)</span>&#123;  </span><br><span class="line">    <span class="type">int</span> i;  </span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;ST.TableLen;i++)&#123;  </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%3d&quot;</span>,ST.elem[i]);  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="type">int</span> <span class="title function_">Search_Seq</span><span class="params">(SSTable ST,ELemType e)</span>&#123;  </span><br><span class="line">    <span class="type">int</span> i;  </span><br><span class="line">    <span class="keyword">for</span>(i=ST.TableLen<span class="number">-1</span>;ST.elem[i]!=e;--i)&#123;  </span><br><span class="line">  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> i;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;  </span><br><span class="line">    SSTable ST;  </span><br><span class="line">    st_init(ST,<span class="number">9</span>);  </span><br><span class="line">    st_print(ST);  </span><br><span class="line">    ELemType key;  </span><br><span class="line">    <span class="type">int</span> pos;  </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;please input search by\n&quot;</span>);  </span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;key);  </span><br><span class="line">    pos=Search_Seq(ST,key);  </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;the postion is %d&quot;</span>,pos);  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二分查找原理及实战"><a href="#二分查找原理及实战" class="headerlink" title="二分查找原理及实战"></a>二分查找原理及实战</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;time.h&gt;</span>  </span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> ELemType;  </span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span>  </span><br><span class="line">    ELemType* elem;  </span><br><span class="line">    <span class="type">int</span> Tablelen;  </span><br><span class="line">&#125;SSTable;  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//初始化的方法  </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">st_init</span><span class="params">(SSTable &amp;ST,<span class="type">int</span> len)</span>&#123;  </span><br><span class="line">    ST.Tablelen=len;  </span><br><span class="line">    ST.elem=(ELemType*) <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(ELemType)*ST.Tablelen);  </span><br><span class="line">    <span class="type">int</span> i;  </span><br><span class="line">    srand(time(<span class="literal">NULL</span>));  </span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;ST.Tablelen;i++)&#123;  </span><br><span class="line">        ST.elem[i]=rand() % <span class="number">100</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//打印的方法  </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">st_print</span><span class="params">(SSTable ST)</span>&#123;  </span><br><span class="line">    <span class="type">int</span> i;  </span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;ST.Tablelen;i++)&#123;  </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%3d&quot;</span>,ST.elem[i]);  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//二分查找方法  </span></span><br><span class="line"><span class="type">int</span> <span class="title function_">binary_search</span><span class="params">(SSTable ST,<span class="type">int</span> key)</span>&#123;  </span><br><span class="line">    <span class="type">int</span> begin=<span class="number">0</span>;  </span><br><span class="line">    <span class="type">int</span> mid;  </span><br><span class="line">    <span class="type">int</span> end=ST.Tablelen<span class="number">-1</span>;  </span><br><span class="line">    <span class="keyword">while</span>(begin&lt;=end)&#123;  </span><br><span class="line">        mid=(begin+end)/<span class="number">2</span>;  </span><br><span class="line">        <span class="comment">//注意：是else if 不能写成if，并且三个判断只能执行一个  </span></span><br><span class="line">        <span class="keyword">if</span>(key&lt;ST.elem[mid])&#123;  </span><br><span class="line">            end=mid<span class="number">-1</span>;  </span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(key&gt;ST.elem[mid])&#123;  </span><br><span class="line">            begin=mid+<span class="number">1</span>;  </span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;  </span><br><span class="line">            <span class="keyword">return</span> mid;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//函数名中存储的是函数入口地址，也是一个指针，是函数指针类型  </span></span><br><span class="line"><span class="comment">//qsort规定如果left指针指向的值，大于right指针指向的值,返回正值  </span></span><br><span class="line"><span class="type">int</span> <span class="title function_">compare</span><span class="params">(<span class="type">const</span> <span class="type">void</span> *left,<span class="type">const</span> <span class="type">void</span> *right)</span>&#123;<span class="comment">//固定形式，照着写就行  </span></span><br><span class="line">    <span class="comment">//要先强转成int类型指针然后取值 比较  </span></span><br><span class="line">    <span class="keyword">return</span> *(<span class="type">int</span>*)left-*(<span class="type">int</span>*)right;<span class="comment">//从小到大排序  </span></span><br><span class="line">    <span class="comment">//return *(int*)right-*(int*)left;//从小到大排序  </span></span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;  </span><br><span class="line">    SSTable ST;  </span><br><span class="line">    <span class="type">int</span> key;  </span><br><span class="line">    st_init(ST,<span class="number">10</span>);<span class="comment">//初始化  </span></span><br><span class="line">    st_print(ST);<span class="comment">//打印  </span></span><br><span class="line">    qsort(ST.elem,ST.Tablelen,<span class="keyword">sizeof</span> (ELemType),compare);<span class="comment">//升序排序  </span></span><br><span class="line">    st_print(ST);<span class="comment">//打印  </span></span><br><span class="line">    <span class="type">int</span> pos;  </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;please input the number that you want to search\n&quot;</span>);  </span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;key);  </span><br><span class="line">    pos=binary_search(ST,key);  </span><br><span class="line">    <span class="keyword">if</span>(pos==<span class="number">-1</span>)&#123;  </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;false,the number is not exit&quot;</span>);  </span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;  </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;the pos is %3d&quot;</span>,pos);  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二叉排序树原理及建树"><a href="#二叉排序树原理及建树" class="headerlink" title="二叉排序树原理及建树"></a>二叉排序树原理及建树</h3><p><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304041946000.png" alt="image.png"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span>  </span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> ElemType;  </span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">BSNode</span>&#123;</span>  </span><br><span class="line">    ElemType key;  </span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">BSNode</span> *<span class="title">lift</span>;</span>  </span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">BSNode</span> *<span class="title">right</span>;</span>  </span><br><span class="line">&#125;BSNode,*BiTree;  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//二叉树元素插入  </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">BST_insert</span><span class="params">(BiTree &amp;T,ElemType k)</span>&#123;  </span><br><span class="line">    <span class="keyword">if</span>(T==<span class="literal">NULL</span>)&#123;  </span><br><span class="line">        T= (BiTree)<span class="built_in">calloc</span>(<span class="number">1</span>,<span class="keyword">sizeof</span> (BSNode));  </span><br><span class="line">        T-&gt;key=k;  </span><br><span class="line">    &#125;  </span><br><span class="line">    BiTree p=T;<span class="comment">//p是用来遍历的  </span></span><br><span class="line">    BiTree parent;  </span><br><span class="line">    <span class="keyword">while</span>(p)&#123;  </span><br><span class="line">        parent=p;<span class="comment">//指向p的父节点，以便追加加点  </span></span><br><span class="line">        <span class="keyword">if</span>(k==p-&gt;key)&#123;  </span><br><span class="line">            <span class="keyword">return</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(k&lt;p-&gt;key)&#123;  </span><br><span class="line">            p=p-&gt;lift;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">else</span>&#123;  </span><br><span class="line">            p=p-&gt;right;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="comment">//开始申请新节点的空间  </span></span><br><span class="line">    BiTree pnew;  </span><br><span class="line">    pnew=(BiTree) <span class="built_in">calloc</span>(<span class="number">1</span>,<span class="keyword">sizeof</span> (BSNode));  </span><br><span class="line">    pnew-&gt;key=k;  </span><br><span class="line">    <span class="comment">//判断是加在parent结点的左子节点还是右子节点  </span></span><br><span class="line">    <span class="keyword">if</span>(k&lt;parent-&gt;key)&#123;  </span><br><span class="line">        parent-&gt;lift=pnew;  </span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;  </span><br><span class="line">        parent-&gt;right=pnew;  </span><br><span class="line">    &#125;<span class="comment">//不用判断等于的情况，因为上面遍历树的时候当结点值相等时，该方法就结束了  </span></span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//创建二叉树  </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">creat_bstree</span><span class="params">(BiTree &amp;T,ElemType str[],<span class="type">int</span> n)</span>&#123;  </span><br><span class="line">    T=<span class="literal">NULL</span>;  </span><br><span class="line">    <span class="type">int</span> i;  </span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)&#123;  </span><br><span class="line">        BST_insert(T,str[i]);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//中序遍历  </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">InOrder</span><span class="params">(BiTree T)</span>&#123;  </span><br><span class="line">    <span class="keyword">if</span>(T!=<span class="literal">NULL</span>) &#123;  </span><br><span class="line">        InOrder(T-&gt;lift);  </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%3d&quot;</span>, T-&gt;key);  </span><br><span class="line">        InOrder(T-&gt;right);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;  </span><br><span class="line">    BiTree T;  </span><br><span class="line">    ElemType str[<span class="number">9</span>]=&#123;<span class="number">12</span>,<span class="number">34</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">9</span>,<span class="number">0</span>,<span class="number">12</span>&#125;;  </span><br><span class="line">    creat_bstree(T,str,<span class="number">9</span>);  </span><br><span class="line">    InOrder(T);  </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二叉查找树的删除实战"><a href="#二叉查找树的删除实战" class="headerlink" title="二叉查找树的删除实战"></a>二叉查找树的删除实战</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span>  <span class="comment">//</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span>  </span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> ElemType;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">BSNode</span>&#123;</span>  </span><br><span class="line">    ElemType key;  </span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">BSNode</span> *<span class="title">left</span>,*<span class="title">righr</span>;</span>  </span><br><span class="line">&#125;BSNode,*BiTree;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//插入元素的方法  </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">BST_insert</span><span class="params">(BiTree &amp;T,ElemType k)</span>&#123;  </span><br><span class="line">    <span class="keyword">if</span>(T==<span class="literal">NULL</span>)&#123;  </span><br><span class="line">        T=(BiTree) <span class="built_in">calloc</span>(<span class="number">1</span>,<span class="keyword">sizeof</span> (BSNode));  </span><br><span class="line">        T-&gt;key=k;  </span><br><span class="line">    &#125;  </span><br><span class="line">    BiTree p=T;  </span><br><span class="line">    BiTree parent;  </span><br><span class="line">    <span class="keyword">while</span>(p)&#123;  </span><br><span class="line">        parent=p;  </span><br><span class="line">        <span class="keyword">if</span>(k==p-&gt;key)&#123;  </span><br><span class="line">            <span class="keyword">return</span>;  </span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(k&lt;p-&gt;key)&#123;  </span><br><span class="line">            p=p-&gt;left;  </span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;  </span><br><span class="line">            p=p-&gt;righr;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="comment">//申请要加入元素的新节点空间  </span></span><br><span class="line">    BiTree pnew;  </span><br><span class="line">    pnew=(BiTree) <span class="built_in">calloc</span>(<span class="number">1</span>,<span class="keyword">sizeof</span> (BSNode));  </span><br><span class="line">    pnew-&gt;key=k;  </span><br><span class="line">    <span class="keyword">if</span>(k&lt;parent-&gt;key)&#123;  </span><br><span class="line">        parent-&gt;left=pnew;  </span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;  </span><br><span class="line">        parent-&gt;righr=pnew;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//创建二叉查找树的方法  </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">creat_BSTree</span><span class="params">(BiTree &amp;T,ElemType str[],<span class="type">int</span> n)</span>&#123;  </span><br><span class="line">    T=<span class="literal">NULL</span>;  </span><br><span class="line">    <span class="type">int</span> i;  </span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)&#123;  </span><br><span class="line">        BST_insert(T,str[i]);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//中序遍历打印二叉树  </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">InOrder</span><span class="params">(BiTree T)</span>&#123;  </span><br><span class="line">    <span class="keyword">if</span>(T!=<span class="literal">NULL</span>)&#123;  </span><br><span class="line">        InOrder(T-&gt;left);  </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%3d&quot;</span>,T-&gt;key);  </span><br><span class="line">        InOrder(T-&gt;righr);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//二叉树的查找方法  </span></span><br><span class="line">BiTree <span class="title function_">BS_Search</span><span class="params">(BiTree T,ElemType key)</span>&#123;  </span><br><span class="line">    <span class="keyword">while</span>(T!=<span class="literal">NULL</span>&amp;&amp;key!=T-&gt;key)&#123;  </span><br><span class="line">        <span class="keyword">if</span>(key&lt;T-&gt;key)&#123;  </span><br><span class="line">            T=T-&gt;left;  </span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;  </span><br><span class="line">            T=T-&gt;righr;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> T;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//删除二叉排序树元素的方法  </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">delete_BSNode</span><span class="params">(BiTree &amp;root,ElemType x)</span>&#123;  </span><br><span class="line">    <span class="keyword">if</span>(root==<span class="literal">NULL</span>)&#123;  </span><br><span class="line">        <span class="keyword">return</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">if</span>(x&lt;root-&gt;key)&#123;  </span><br><span class="line">        delete_BSNode(root-&gt;left,x);  </span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(x&gt;root-&gt;key)&#123;  </span><br><span class="line">        delete_BSNode(root-&gt;righr,x);  </span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;<span class="comment">//查找到了要删的结点  </span></span><br><span class="line">        <span class="comment">//如果左子树为空，右结点顶上去  </span></span><br><span class="line">        <span class="keyword">if</span>(root-&gt;left==<span class="literal">NULL</span>)&#123;  </span><br><span class="line">            BiTree tempNode=root;  </span><br><span class="line">            root=root-&gt;righr;  </span><br><span class="line">            <span class="built_in">free</span>(tempNode);  </span><br><span class="line">            <span class="comment">//如果右子树为空，左节点顶上去  </span></span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(root-&gt;righr==<span class="literal">NULL</span>)&#123;  </span><br><span class="line">            BiTree tempNode=root;  </span><br><span class="line">            root=root-&gt;left;  </span><br><span class="line">            <span class="built_in">free</span>(tempNode);  </span><br><span class="line">            <span class="comment">//如果左右子树都不为空  </span></span><br><span class="line">            <span class="comment">//1-左子树最大顶上去；2-右子树最下顶上去  </span></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;  </span><br><span class="line">            BiTree p=root-&gt;left;<span class="comment">//遍历左子树，寻找左子树最大  </span></span><br><span class="line">            <span class="keyword">while</span>(p-&gt;righr!=<span class="literal">NULL</span>)&#123;  </span><br><span class="line">                p=p-&gt;righr;  </span><br><span class="line">            &#125;  </span><br><span class="line">            root-&gt;key=p-&gt;key;<span class="comment">//将p的值赋给root  </span></span><br><span class="line">            <span class="comment">//然后删除p  </span></span><br><span class="line">            delete_BSNode(root-&gt;left,p-&gt;key);  </span><br><span class="line">                <span class="comment">//这里得从左子树找，因为root的key也是和p一样  </span></span><br><span class="line">                <span class="comment">//这样可以略过根结点  </span></span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;  </span><br><span class="line">  </span><br><span class="line">    BiTree T;  </span><br><span class="line">    ElemType str[<span class="number">8</span>]=&#123;<span class="number">13</span>,<span class="number">4</span>,<span class="number">56</span>,<span class="number">7</span>,<span class="number">23</span>,<span class="number">7</span>,<span class="number">95</span>,<span class="number">48</span>&#125;;  </span><br><span class="line">    ElemType key;  </span><br><span class="line">  </span><br><span class="line">    creat_BSTree(T,str,<span class="number">8</span>);  </span><br><span class="line">    InOrder(T);  </span><br><span class="line">    ElemType x;  </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\ndelet 23\n&quot;</span>);  </span><br><span class="line">  </span><br><span class="line">    delete_BSNode(T,<span class="number">23</span>);  </span><br><span class="line">    InOrder(T);  </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="OJ测试-3"><a href="#OJ测试-3" class="headerlink" title="OJ测试"></a>OJ测试</h3><p><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304041948855.png" alt="image.png"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span>  </span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> ElemType;  </span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">BSNode</span>&#123;</span>  </span><br><span class="line">    ElemType key;  </span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">BSNode</span> *<span class="title">lift</span>,*<span class="title">right</span>;</span>  </span><br><span class="line">&#125;BSNode,*Bitree;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//插入元素的方法  </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">BST_insert</span><span class="params">(Bitree &amp;T,ElemType k)</span>&#123;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">if</span>(T==<span class="literal">NULL</span>)&#123;  </span><br><span class="line">        T=(Bitree) <span class="built_in">calloc</span>(<span class="number">1</span>,<span class="keyword">sizeof</span> (BSNode));  </span><br><span class="line">        T-&gt;key=k;  </span><br><span class="line">    &#125;  </span><br><span class="line">    Bitree p;<span class="comment">//p用来遍历树  </span></span><br><span class="line">    p=T;  </span><br><span class="line">    Bitree parent;  </span><br><span class="line">    <span class="keyword">while</span>(p)&#123;  </span><br><span class="line">        parent=p;<span class="comment">//用来指向p的父节点  </span></span><br><span class="line">        <span class="keyword">if</span>(k==p-&gt;key)&#123;  </span><br><span class="line">            <span class="keyword">return</span>;  </span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(k&lt;p-&gt;key)&#123;  </span><br><span class="line">            p=p-&gt;lift;  </span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;  </span><br><span class="line">            p=p-&gt;right;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    Bitree pnew;  </span><br><span class="line">    pnew=(Bitree) <span class="built_in">calloc</span>(<span class="number">1</span>,<span class="keyword">sizeof</span>(BSNode));  </span><br><span class="line">    pnew-&gt;key=k;  </span><br><span class="line">    <span class="keyword">if</span>(k&lt;parent-&gt;key)&#123;  </span><br><span class="line">        parent-&gt;lift=pnew;  </span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;  </span><br><span class="line">        parent-&gt;right=pnew;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="comment">//创建二叉排序树的方法  </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">creat_bstree</span><span class="params">(Bitree &amp;T,ElemType *str,<span class="type">int</span> n)</span>&#123;  </span><br><span class="line">   T=<span class="literal">NULL</span>;  </span><br><span class="line">   <span class="type">int</span> i;  </span><br><span class="line">   <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)&#123;  </span><br><span class="line">       BST_insert(T,str[i]);  </span><br><span class="line">   &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//中序遍历二叉树  </span></span><br><span class="line">ElemType* <span class="title function_">InOrder</span><span class="params">(Bitree T)</span>&#123;<span class="comment">//无法直接返回数组形式，但是可以返回一个数组形式的指针  </span></span><br><span class="line">    <span class="type">static</span> ElemType str2[<span class="number">10</span>];  </span><br><span class="line">    <span class="type">static</span> <span class="type">int</span> i=<span class="number">0</span>;  </span><br><span class="line">    <span class="keyword">if</span>(T!=<span class="literal">NULL</span>) &#123;  </span><br><span class="line">        InOrder(T-&gt;lift);  </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%3d&quot;</span>, T-&gt;key);  </span><br><span class="line">        str2[i]=T-&gt;key;  </span><br><span class="line">        i++;  </span><br><span class="line">        InOrder(T-&gt;right);  </span><br><span class="line">    &#125;  </span><br><span class="line"><span class="keyword">return</span> str2;<span class="comment">//返回一个指针  </span></span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//二分查找的方法 ，返回元素下标 </span></span><br><span class="line"><span class="type">int</span> <span class="title function_">binary_search</span><span class="params">(ElemType str[],<span class="type">int</span> x)</span>&#123;  </span><br><span class="line">    <span class="type">int</span> begin=<span class="number">0</span>,mid,end=<span class="number">10</span>;  </span><br><span class="line">    <span class="keyword">while</span>(begin&lt;=end)&#123;  </span><br><span class="line">        mid=(begin+end)/<span class="number">2</span>;  </span><br><span class="line">        <span class="keyword">if</span>(x==str[mid])&#123;  </span><br><span class="line">            <span class="keyword">return</span> mid;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(x&gt;str[mid])&#123;  </span><br><span class="line">            begin=mid;  </span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;  </span><br><span class="line">            end=mid;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;  </span><br><span class="line">  </span><br><span class="line">    Bitree root;<span class="comment">//定义一个舒更  </span></span><br><span class="line">    ElemType str[<span class="number">10</span>];  </span><br><span class="line">    <span class="type">int</span> k;<span class="comment">//存放输入的数据  </span></span><br><span class="line">    <span class="type">int</span> i;  </span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;  </span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;k);  </span><br><span class="line">        str[i]=k;  </span><br><span class="line">    &#125;  </span><br><span class="line">    creat_bstree(root,str,<span class="number">10</span>);<span class="comment">//  </span></span><br><span class="line">    ElemType *pInt = InOrder(root);<span class="comment">//打印，并接收返回的排序后的数组指针  </span></span><br><span class="line">  </span><br><span class="line">    <span class="type">int</span> pos;  </span><br><span class="line">    pos=binary_search(pInt,<span class="number">6</span>);  </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n%d&quot;</span>,pos);  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果<br><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304041948552.png" alt="image.png"></p><h2 id="排序算法"><a href="#排序算法" class="headerlink" title="排序算法"></a>排序算法</h2><h3 id="排序算法分类"><a href="#排序算法分类" class="headerlink" title="排序算法分类"></a>排序算法分类</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">排序算法分为 交换类排序、插入类排序、选择类排序、归并类排序</span><br><span class="line"></span><br><span class="line">交换类排序</span><br><span class="line"></span><br><span class="line">冒泡排序</span><br><span class="line">初冒泡排序,一般靠选择题，考大题几率小</span><br><span class="line">快速排序</span><br><span class="line">更重要，考大题</span><br><span class="line"></span><br><span class="line">插入类排序</span><br><span class="line"></span><br><span class="line">直接插入</span><br><span class="line"></span><br><span class="line">折半插入</span><br><span class="line"></span><br><span class="line">希尔排序，以上三种插入算法，一般考选择题，考大题概率低</span><br><span class="line">选择排序</span><br><span class="line"></span><br><span class="line">简单选择排序</span><br><span class="line"></span><br><span class="line">堆排序(重要)</span><br><span class="line">很有可能考大题</span><br></pre></td></tr></table></figure><h3 id="冒泡排序原理及实战"><a href="#冒泡排序原理及实战" class="headerlink" title="冒泡排序原理及实战"></a>冒泡排序原理及实战</h3><p><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304041927093.png" alt="image.png"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;time.h&gt;</span>  </span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> ElemType;  </span><br><span class="line"><span class="comment">//定义顺序表结构体  </span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span>  </span><br><span class="line">    ElemType *str;  </span><br><span class="line">    <span class="type">int</span> len;  </span><br><span class="line">&#125;SSTable;  </span><br><span class="line"><span class="comment">//顺序表初始化，添加随机数  </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">init_table</span><span class="params">(SSTable &amp;SST,<span class="type">int</span> len)</span>&#123;  </span><br><span class="line">    srand(time(<span class="literal">NULL</span>));  </span><br><span class="line">    SST.len=len;  </span><br><span class="line">    SST.str=(ElemType*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span> (ElemType)*SST.len);  </span><br><span class="line">    <span class="type">int</span> i;  </span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;SST.len;i++)&#123;  </span><br><span class="line">        SST.str[i]=rand()%<span class="number">100</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="comment">//打印顺序表  </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">print_table</span><span class="params">(SSTable SST)</span>&#123;  </span><br><span class="line">    <span class="type">int</span> i;  </span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;SST.len;i++)&#123;  </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%3d&quot;</span>,SST.str[i]);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="comment">//交换两个元素的方法  </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">swap</span><span class="params">(ElemType &amp;a,ElemType &amp;b)</span>&#123;  </span><br><span class="line">    ElemType temp;  </span><br><span class="line">    temp=a;  </span><br><span class="line">    a=b;  </span><br><span class="line">    b=temp;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="comment">//冒泡排序算法  </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">bubble_sort</span><span class="params">(ElemType arr[],<span class="type">int</span> n)</span>&#123;  </span><br><span class="line">    <span class="type">int</span> i,j;  </span><br><span class="line">    <span class="type">bool</span> flag;  <span class="comment">//用来标记是否发生了交换</span></span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n<span class="number">-1</span>;i++)&#123;<span class="comment">//外层循环需要比较n-1次  </span></span><br><span class="line">        flag=<span class="literal">false</span>;  </span><br><span class="line">        <span class="keyword">for</span>(j=n<span class="number">-1</span>;j&gt;i;j--)&#123;<span class="comment">//内层循环  </span></span><br><span class="line">            <span class="keyword">if</span>(arr[j]&lt;arr[j<span class="number">-1</span>])&#123;  </span><br><span class="line">                swap(arr[j],arr[j<span class="number">-1</span>]);  </span><br><span class="line">                flag=<span class="literal">true</span>;<span class="comment">//有交换就返回true  </span></span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">if</span>(flag==<span class="literal">false</span>)&#123;<span class="comment">//如果这一趟没有比较，直接结束无须比较  </span></span><br><span class="line">            <span class="keyword">return</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;  </span><br><span class="line">    SSTable T;  </span><br><span class="line">    <span class="type">int</span> len=<span class="number">9</span>;  </span><br><span class="line">    init_table(T,len);  </span><br><span class="line">    print_table(T);  </span><br><span class="line">  </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);  </span><br><span class="line">    bubble_sort(T.str,T.len);  </span><br><span class="line">    print_table(T);  </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304041926485.png" alt="image.png"></p><h3 id="快速排序原理及实战"><a href="#快速排序原理及实战" class="headerlink" title="快速排序原理及实战"></a>快速排序原理及实战</h3><p><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304041930109.png" alt="Snipaste_2023-03-18_15-37-22.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">一个顺序表</span><br><span class="line">以第一个数为基准</span><br><span class="line">定义两个指针i j</span><br><span class="line">i从左往右找比3大的数，i停止</span><br><span class="line">j从右往左找比3小的数，j停止</span><br><span class="line">然后i j 对应的数完成一次交换，i j 继续前进</span><br><span class="line">循环..直到ij相遇</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>代码实战<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;time.h&gt;</span>  </span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> ElemType;  </span><br><span class="line"><span class="comment">//定义顺序表结构体  </span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span>  </span><br><span class="line">    ElemType *str;  </span><br><span class="line">    <span class="type">int</span> len;  </span><br><span class="line">&#125;SSTable;  </span><br><span class="line"><span class="comment">//顺序表添加随机数  </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">init_table</span><span class="params">(SSTable &amp;SST,<span class="type">int</span> len)</span>&#123;  </span><br><span class="line">    srand(time(<span class="literal">NULL</span>));  </span><br><span class="line">    SST.len=len;  </span><br><span class="line">    SST.str=(ElemType*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span> (ElemType)*SST.len);  </span><br><span class="line">    <span class="type">int</span> i;  </span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;SST.len;i++)&#123;  </span><br><span class="line">        SST.str[i]=rand()%<span class="number">100</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="comment">//打印顺序表  </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">print_table</span><span class="params">(SSTable SST)</span>&#123;  </span><br><span class="line">    <span class="type">int</span> i;  </span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;SST.len;i++)&#123;  </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%3d&quot;</span>,SST.str[i]);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//分割方法  </span></span><br><span class="line"><span class="type">int</span> <span class="title function_">partition</span><span class="params">(ElemType *str,<span class="type">int</span> low,<span class="type">int</span> high)</span>&#123;  </span><br><span class="line">    <span class="type">int</span> temp;<span class="comment">//用于存放分割界限数(选取数组第一个数）  </span></span><br><span class="line">    temp=str[low];<span class="comment">//相当于将low位置外一个坑，先让high往前放入元素  </span></span><br><span class="line">    <span class="keyword">while</span>(low&lt;high)&#123;  </span><br><span class="line">        <span class="comment">//右指针用来找比分割数小的数  </span></span><br><span class="line">        <span class="comment">//停了说明找到了  </span></span><br><span class="line">        <span class="keyword">while</span>(low&lt;high&amp;&amp;str[high]&gt;=temp)&#123;  </span><br><span class="line">            high--;<span class="comment">//移动  </span></span><br><span class="line">        &#125;  </span><br><span class="line">        str[low]=str[high];<span class="comment">//将找到的值给str[low],因为这时的str[low]赋给了temp  </span></span><br><span class="line">        <span class="comment">//左指针，用来找比分割数大的数  </span></span><br><span class="line">        <span class="keyword">while</span>(low&lt;high&amp;&amp;str[low]&lt;=temp)&#123;  </span><br><span class="line">            low++;  </span><br><span class="line">        &#125;  </span><br><span class="line">        str[high]=str[low];  </span><br><span class="line">    &#125;  </span><br><span class="line">    str[low]=temp;<span class="comment">//结束时，low位置是空的  </span></span><br><span class="line">    <span class="keyword">return</span> low;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//快速排序方法  </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">quick_sort</span><span class="params">(ElemType *str,<span class="type">int</span> low,<span class="type">int</span> high)</span>&#123;  </span><br><span class="line">    <span class="keyword">if</span>(low&lt;high) &#123;<span class="comment">//low high用来限定分割的范围  </span></span><br><span class="line">        <span class="type">int</span> postion = partition(str, low, high);<span class="comment">//partition方法是核心方法，是每一次分割的方法  </span></span><br><span class="line">        quick_sort(str, low, postion - <span class="number">1</span>);<span class="comment">//递归左边的数组  </span></span><br><span class="line">        quick_sort(str, postion + <span class="number">1</span>, high);<span class="comment">//递归数组右边  </span></span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;  </span><br><span class="line">    SSTable T;  </span><br><span class="line">    <span class="type">int</span> len=<span class="number">9</span>;  </span><br><span class="line">    init_table(T,len);  </span><br><span class="line">    print_table(T);  </span><br><span class="line">  </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);  </span><br><span class="line">    quick_sort(T.str,<span class="number">0</span>,T.len<span class="number">-1</span>);  </span><br><span class="line">    print_table(T);  </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304041930643.png" alt="image.png"></p><h3 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h3><p><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304191541637.png" alt="image.png"><br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//插入排序方法  </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">insert_sort</span><span class="params">(ElemType *str,<span class="type">int</span> n)</span>&#123; <span class="comment">//n为数组长度 </span></span><br><span class="line">    <span class="type">int</span> i,j,temp;  </span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;n;i++)&#123;  </span><br><span class="line">        temp=str[i];<span class="comment">//暂时存目标元素  </span></span><br><span class="line">        <span class="keyword">for</span>(j=i<span class="number">-1</span>;j&gt;=<span class="number">0</span>&amp;&amp;str[j]&gt;temp;j--)&#123;<span class="comment">//将比插入的数大的全部往后移一格  </span></span><br><span class="line">            str[j+<span class="number">1</span>]=str[j];  </span><br><span class="line">        &#125;  </span><br><span class="line">        str[j+<span class="number">1</span>]=temp;<span class="comment">//j来到了插入位置，将temp插入  </span></span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br></pre></td></tr></table></figure><br><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304191608087.png" alt="image.png"></p><h3 id="OJ测试-4"><a href="#OJ测试-4" class="headerlink" title="OJ测试"></a>OJ测试</h3><p><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304041934190.png" alt="image.png"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;time.h&gt;</span>  </span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> ElemType;  </span><br><span class="line"><span class="comment">//定义顺序表结构体  </span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span>  </span><br><span class="line">    ElemType *str;  </span><br><span class="line">    <span class="type">int</span> len;  </span><br><span class="line">&#125;SSTable;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//初始化顺序表，手动输入十个数  </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">init_table</span><span class="params">(SSTable &amp;T)</span>&#123;  </span><br><span class="line">    <span class="type">int</span> i;  </span><br><span class="line">    <span class="type">int</span> x;  </span><br><span class="line">    T.str=(ElemType*) <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(ElemType)*T.len);  </span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;T.len;i++)&#123;  </span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x);  </span><br><span class="line">        T.str[i]=x;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//打印顺序表  </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">print_table</span><span class="params">(SSTable SST)</span>&#123;  </span><br><span class="line">    <span class="type">int</span> i;  </span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;SST.len;i++)&#123;  </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%3d&quot;</span>,SST.str[i]);  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="comment">//================================================================================  </span></span><br><span class="line"><span class="comment">//交换的方法  </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span> &amp;a,<span class="type">int</span> &amp;b)</span>&#123;  </span><br><span class="line">    <span class="type">int</span> temp;  </span><br><span class="line">    temp=a;  </span><br><span class="line">    a=b;  </span><br><span class="line">    b=temp;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//冒泡排序算法  </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">bubble_sort</span><span class="params">(SSTable &amp;T)</span>&#123;  </span><br><span class="line">    <span class="type">int</span> i,j;  </span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;T.len<span class="number">-1</span>;i++)&#123;  </span><br><span class="line">        <span class="keyword">for</span>(j=T.len<span class="number">-1</span>;j&gt;i;j--)&#123;  </span><br><span class="line">            <span class="keyword">if</span>(T.str[j]&gt;T.str[j<span class="number">-1</span>])&#123;  </span><br><span class="line">                swap(T.str[j],T.str[j<span class="number">-1</span>]);  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="comment">//==============================================================================</span></span><br><span class="line"><span class="comment">//分割方法  </span></span><br><span class="line"><span class="type">int</span> <span class="title function_">split</span><span class="params">(SSTable &amp;T,<span class="type">int</span> low,<span class="type">int</span> high)</span>&#123;  </span><br><span class="line">    <span class="type">int</span> temp;  </span><br><span class="line">    temp=T.str[low];  </span><br><span class="line">    <span class="keyword">while</span>(low&lt;high)&#123;  </span><br><span class="line">        <span class="keyword">while</span>(low&lt;high&amp;&amp;T.str[high]&gt;=temp)&#123;  </span><br><span class="line">            high--;  </span><br><span class="line">        &#125;  </span><br><span class="line">        T.str[low]=T.str[high];  </span><br><span class="line">        <span class="keyword">while</span>(low&lt;high&amp;&amp;T.str[low]&lt;=temp)&#123;  </span><br><span class="line">            low++;  </span><br><span class="line">        &#125;  </span><br><span class="line">        T.str[high]=T.str[low];  </span><br><span class="line">    &#125;  </span><br><span class="line">    T.str[low]=temp;  </span><br><span class="line">    <span class="keyword">return</span> low;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//快速排序法  </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">quick_sort</span><span class="params">(SSTable &amp;T,<span class="type">int</span> low,<span class="type">int</span> high)</span>&#123;  </span><br><span class="line">    <span class="keyword">if</span>(low&lt;high)&#123;  </span><br><span class="line">       <span class="type">int</span> pos;  </span><br><span class="line">       pos= split(T,low,high);  </span><br><span class="line">        quick_sort(T,low,pos<span class="number">-1</span>);  </span><br><span class="line">        quick_sort(T,pos+<span class="number">1</span>,high);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//================================================================================ </span></span><br><span class="line"><span class="comment">//插入排序方法  </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">insert_sort</span><span class="params">(SSTable &amp;T)</span>&#123;  </span><br><span class="line">    <span class="type">int</span> i,j,temp;  </span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;T.len;i++)&#123;  </span><br><span class="line">        temp=T.str[i];  </span><br><span class="line">        <span class="keyword">for</span>(j=i<span class="number">-1</span>;j&gt;=<span class="number">0</span>&amp;&amp;T.str[j]&gt;temp;j--)&#123;  </span><br><span class="line">            T.str[j+<span class="number">1</span>]=T.str[j];  </span><br><span class="line">        &#125;  </span><br><span class="line">        T.str[j+<span class="number">1</span>]=temp;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;  </span><br><span class="line">    SSTable SST;  </span><br><span class="line">    SST.len=<span class="number">10</span>;  </span><br><span class="line">    init_table(SST);  </span><br><span class="line">    print_table(SST);  </span><br><span class="line">  </span><br><span class="line"><span class="comment">/*  </span></span><br><span class="line"><span class="comment"> * //冒泡排序  </span></span><br><span class="line"><span class="comment">    bubble_sort(SST);    print_table(SST);*/</span>  </span><br><span class="line">  </span><br><span class="line"><span class="comment">/*  </span></span><br><span class="line"><span class="comment">    //快速排序  </span></span><br><span class="line"><span class="comment">    quick_sort(SST,0,9);    print_table(SST);*/</span>  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">//插入排序  </span></span><br><span class="line">    insert_sort(SST);  </span><br><span class="line">    print_table(SST);  </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="选择排序原理及实战"><a href="#选择排序原理及实战" class="headerlink" title="选择排序原理及实战"></a>选择排序原理及实战</h3><p><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304041935436.png" alt="image.png"></p><p><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304041935724.png" alt="image.png"></p><p>代码<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;time.h&gt;</span>  </span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> ElemType;  </span><br><span class="line"><span class="comment">//定义顺序表结构体  </span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span>  </span><br><span class="line">    ElemType *str;  </span><br><span class="line">    <span class="type">int</span> len;  </span><br><span class="line">&#125;SSTable;  </span><br><span class="line"><span class="comment">//顺序表初始化，添加随机数  </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">init_table</span><span class="params">(SSTable &amp;SST,<span class="type">int</span> len)</span>&#123;  </span><br><span class="line">    srand(time(<span class="literal">NULL</span>));  </span><br><span class="line">    SST.len=len;  </span><br><span class="line">    SST.str=(ElemType*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span> (ElemType)*SST.len);  </span><br><span class="line">    <span class="type">int</span> i;  </span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;SST.len;i++)&#123;  </span><br><span class="line">        SST.str[i]=rand()%<span class="number">100</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="comment">//打印顺序表  </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">print_table</span><span class="params">(SSTable SST)</span>&#123;  </span><br><span class="line">    <span class="type">int</span> i;  </span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;SST.len;i++)&#123;  </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%3d&quot;</span>,SST.str[i]);  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="comment">//交换两个元素的方法  </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">swap</span><span class="params">(ElemType &amp;a,ElemType &amp;b)</span>&#123;  </span><br><span class="line">    ElemType temp;  </span><br><span class="line">    temp=a;  </span><br><span class="line">    a=b;  </span><br><span class="line">    b=temp;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//选择排序方法  </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">select_sort</span><span class="params">(ElemType *A,<span class="type">int</span> n)</span>&#123;  </span><br><span class="line">    <span class="type">int</span> min,i,j;  </span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n<span class="number">-1</span>;i++)&#123;<span class="comment">//外循环,i只需要进行n-1轮就可以了  </span></span><br><span class="line">        min=i;  </span><br><span class="line">        <span class="keyword">for</span>(j=min+<span class="number">1</span>;j&lt;n;j++)&#123;<span class="comment">//内循环，j从左到右遍历最小  </span></span><br><span class="line">            <span class="keyword">if</span>(A[j]&lt;A[min])&#123;<span class="comment">//找到更小的  </span></span><br><span class="line">                min=j;<span class="comment">//交换下标数，意味着j下标表示的数更小，j赋值给min  </span></span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">        swap(A[i],A[min]);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;  </span><br><span class="line">    SSTable T;<span class="comment">//定义顺序表  </span></span><br><span class="line">    init_table(T,<span class="number">10</span>);<span class="comment">//初始化  </span></span><br><span class="line">    print_table(T);<span class="comment">//打印  </span></span><br><span class="line">  </span><br><span class="line">    select_sort(T.str,<span class="number">10</span>);<span class="comment">//选择排序  </span></span><br><span class="line">    print_table(T);<span class="comment">//再次打印，看排序效果  </span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304041936675.png" alt="image.png"></p><h3 id="堆排序原理及实战"><a href="#堆排序原理及实战" class="headerlink" title="堆排序原理及实战"></a>堆排序原理及实战</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">实际上就是一个数组，并不是真正意义的树</span><br><span class="line">就是把数组，想象成一个树</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">若父结点的值恒大于等于子结点的值，则该堆称为最大堆（max heap）。堆中最顶端的那个结点称为根结点（root node），根结点本身没有父结点（parent node）。平时在工作中，我们将最小堆称为小根堆或小顶堆，把最大堆称为大根堆或大顶堆</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304041937290.png" alt="image.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">堆排序步骤：</span><br><span class="line">堆排序的步骤是首先把堆调整为大根堆，然后我们交换根部元素也就是A[0]，和最后一个元素，这</span><br><span class="line">样最大的元素就放到了数组最后，接着我们将剩余 9 个元素继续调整为大根堆，然后交换 A[0]和</span><br><span class="line">9 个元素的最后一个，循环往复，直到有序</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304041938126.png" alt="image.png"></p><p><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304041938535.png" alt="image.png"></p><p><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304041938986.png" alt="image.png"></p><p>代码实现<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;time.h&gt;</span>  </span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> ElemType;  </span><br><span class="line"><span class="comment">//定义顺序表结构体  </span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span>  </span><br><span class="line">    ElemType *str;  </span><br><span class="line">    <span class="type">int</span> len;  </span><br><span class="line">&#125;SSTable;  </span><br><span class="line"><span class="comment">//顺序表初始化，添加随机数  </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">init_table</span><span class="params">(SSTable &amp;SST,<span class="type">int</span> len)</span>&#123;  </span><br><span class="line">    srand(time(<span class="literal">NULL</span>));  </span><br><span class="line">    SST.len=len;  </span><br><span class="line">    SST.str=(ElemType*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span> (ElemType)*SST.len);  </span><br><span class="line">    <span class="type">int</span> i;  </span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;SST.len;i++)&#123;  </span><br><span class="line">        SST.str[i]=rand()%<span class="number">100</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="comment">//打印顺序表  </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">print_table</span><span class="params">(SSTable SST)</span>&#123;  </span><br><span class="line">    <span class="type">int</span> i;  </span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;SST.len;i++)&#123;  </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%3d&quot;</span>,SST.str[i]);  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="comment">//交换两个元素的方法  </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">swap</span><span class="params">(ElemType &amp;a,ElemType &amp;b)</span>&#123;  </span><br><span class="line">    ElemType temp;  </span><br><span class="line">    temp=a;  </span><br><span class="line">    a=b;  </span><br><span class="line">    b=temp;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//调整单个子树为大根堆的方法  </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">adjust_down1</span><span class="params">(ElemType A[],<span class="type">int</span> k,<span class="type">int</span> len)</span>&#123;<span class="comment">//k表示父节点位置，开始调整的位置  </span></span><br><span class="line">    <span class="type">int</span> dad=k;<span class="comment">//父节点的下标  </span></span><br><span class="line">    <span class="type">int</span> son=<span class="number">2</span>*dad+<span class="number">1</span>;<span class="comment">//子节点的下标  </span></span><br><span class="line">    <span class="keyword">while</span>(son&lt;len)&#123;  </span><br><span class="line">        <span class="keyword">if</span>(son+<span class="number">1</span>&lt;len&amp;&amp;A[son]&lt;A[son+<span class="number">1</span>])&#123;<span class="comment">//左节点应该比右结点小,son+1且不能越界  </span></span><br><span class="line">            son++;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">if</span>(A[dad]&lt;A[son])&#123;  </span><br><span class="line">            swap(A[son],A[dad]);  </span><br><span class="line">            dad=son;  </span><br><span class="line">            son=<span class="number">2</span>*dad+<span class="number">1</span>;  </span><br><span class="line">        &#125; <span class="keyword">else</span>&#123;  </span><br><span class="line">            <span class="keyword">break</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//堆排序的方法  </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">heap_sort</span><span class="params">(ElemType *A,<span class="type">int</span> len)</span>&#123;  </span><br><span class="line">    <span class="type">int</span> i;  </span><br><span class="line">    <span class="keyword">for</span>(i=len/<span class="number">2</span><span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)&#123;<span class="comment">//从最末尾的子树开始一个一个向前调整为大根堆  </span></span><br><span class="line">        adjust_down1(A,i,len);  </span><br><span class="line">    &#125;  </span><br><span class="line">    swap(A[<span class="number">0</span>],A[len<span class="number">-1</span>]);<span class="comment">//交换根结点和尾结点  </span></span><br><span class="line">    <span class="keyword">for</span>(i=len<span class="number">-1</span>;i&gt;<span class="number">1</span>;i--)&#123;<span class="comment">//剩余的数组进入循环  </span></span><br><span class="line">        adjust_down1(A,<span class="number">0</span>,i);<span class="comment">//从根结点开始重新调整为大堆根,此时数组长度变化-1  </span></span><br><span class="line">        swap(A[<span class="number">0</span>],A[i<span class="number">-1</span>]);<span class="comment">//交换根结点  </span></span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;  </span><br><span class="line">    SSTable T;  </span><br><span class="line">    init_table(T,<span class="number">10</span>);  </span><br><span class="line">    print_table(T);  </span><br><span class="line">  </span><br><span class="line">    heap_sort(T.str,<span class="number">10</span>);  </span><br><span class="line">    print_table(T);  </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304041939457.png" alt="image.png"></p><h3 id="归并排序原理及实战"><a href="#归并排序原理及实战" class="headerlink" title="归并排序原理及实战"></a>归并排序原理及实战</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">归并排序是我们不断进行二分，最终各自剩余 1 个元素，自然有序，然后先将每两个元</span><br><span class="line">素进行合并，变为有序，然后再将两个小组合并，变为有序，循环往复，直到整个数组有序</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304041939460.png" alt="image.png"></p><p><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304041940642.png" alt="image.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">递归到最底部后，开始层层merge，low,high,mid任然对应分组时的位置</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304041940894.png" alt="image.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">merge的时候，需要三个指针,i指向A的有序的前半段，j指向A有序的后半段，k指向放入的数组的当前位置</span><br><span class="line"></span><br><span class="line">1、将A[] 元素全部复制放到B[] ，i ,j分别对应low\mid+1起始位置，k=i.</span><br><span class="line"></span><br><span class="line">2、i j 先比较，小的放入A[k],i++,j不动，k++</span><br><span class="line"></span><br><span class="line">3、直到有剩余，i到头了，j还没到头;或者j到头了，i还没到头。while循环将剩余的全部放入,k随着++</span><br></pre></td></tr></table></figure><p>代码如下<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;time.h&gt;</span>  </span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> ElemType;  </span><br><span class="line"><span class="comment">//定义顺序表结构体  </span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span>  </span><br><span class="line">    ElemType *str;  </span><br><span class="line">    <span class="type">int</span> len;  </span><br><span class="line">&#125;SSTable;  </span><br><span class="line"><span class="comment">//顺序表初始化，添加随机数  </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">init_table</span><span class="params">(SSTable &amp;SST,<span class="type">int</span> len)</span>&#123;  </span><br><span class="line">    srand(time(<span class="literal">NULL</span>));  </span><br><span class="line">    SST.len=len;  </span><br><span class="line">    SST.str=(ElemType*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span> (ElemType)*SST.len);  </span><br><span class="line">    <span class="type">int</span> i;  </span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;SST.len;i++)&#123;  </span><br><span class="line">        SST.str[i]=rand()%<span class="number">100</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="comment">//打印顺序表  </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">print_table</span><span class="params">(SSTable SST)</span>&#123;  </span><br><span class="line">    <span class="type">int</span> i;  </span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;SST.len;i++)&#123;  </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%3d&quot;</span>,SST.str[i]);  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="comment">//交换两个元素的方法  </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">swap</span><span class="params">(ElemType &amp;a,ElemType &amp;b)</span>&#123;  </span><br><span class="line">    ElemType temp;  </span><br><span class="line">    temp=a;  </span><br><span class="line">    a=b;  </span><br><span class="line">    b=temp;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//合并方法  </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">merge</span><span class="params">(ElemType A[],<span class="type">int</span> low,<span class="type">int</span> mid,<span class="type">int</span> high)</span>&#123;  </span><br><span class="line">    <span class="comment">//用额外的空间存放，避免原数组交换次数过多  </span></span><br><span class="line">    <span class="comment">//static修饰防止递归时，重复加载  </span></span><br><span class="line">    <span class="comment">//因为申请了额外的空间，所以空间复杂度是O(n),n是元素个数  </span></span><br><span class="line">    <span class="type">static</span> ElemType B[<span class="number">10</span>];  </span><br><span class="line">    <span class="type">int</span> i,j,k;  </span><br><span class="line">    <span class="keyword">for</span>(k=low;k&lt;=high;k++)&#123;<span class="comment">//复制元素到B中  </span></span><br><span class="line">        B[k]=A[k];  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">for</span>(i=low,j=mid+<span class="number">1</span>,k=i;i&lt;=mid&amp;&amp;j&lt;=high;k++) &#123;<span class="comment">//合并两个有序数组  </span></span><br><span class="line">        <span class="keyword">if</span> (B[i] &lt;= B[j]) &#123;  </span><br><span class="line">            A[k] = B[i];  </span><br><span class="line">            i++;  </span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">            A[k] = B[j];  </span><br><span class="line">            j++;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">while</span> (i &lt;= mid) &#123;<span class="comment">//如果左半边数组有剩余接着放入  </span></span><br><span class="line">        A[k] = B[i];  </span><br><span class="line">        k++;  </span><br><span class="line">        i++;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">while</span> (j &lt;= high) &#123;<span class="comment">//如果右半边数组有剩余接着放入  </span></span><br><span class="line">        A[k] = B[j];  </span><br><span class="line">        k++;  </span><br><span class="line">        j++;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//归并排序方法  </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">merge_sort</span><span class="params">(ElemType A[],<span class="type">int</span> low,<span class="type">int</span> high)</span>&#123;  </span><br><span class="line">    <span class="keyword">if</span>(low&lt;high) &#123;  </span><br><span class="line">        <span class="type">int</span> mid = (low + high) / <span class="number">2</span>;  </span><br><span class="line">        merge_sort(A, low, mid);  </span><br><span class="line">        merge_sort(A, mid+<span class="number">1</span>,high);  </span><br><span class="line">        merge(A,low,mid,high);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;  </span><br><span class="line">    SSTable T;  </span><br><span class="line">    init_table(T,<span class="number">10</span>);  </span><br><span class="line">    print_table(T);  </span><br><span class="line">  </span><br><span class="line">    merge_sort(T.str,<span class="number">0</span>,<span class="number">9</span>);  </span><br><span class="line">    print_table(T);  </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">MergeSort 函数的递归 次数是 log 2 n， Merge 函数的循环了 n 次， 因此时间复杂度是 O(nlog 2 n)。</span><br><span class="line">归并排序最好、最坏、平均时间复杂度都是 O(nlog 2 n)。</span><br><span class="line">归并排序的空间复杂度是 O(n)，因为使用了数组 B，它的大小与 A 一样，占用 n 个元素的</span><br><span class="line">空间。</span><br></pre></td></tr></table></figure><h3 id="所有算法空间时间复杂度"><a href="#所有算法空间时间复杂度" class="headerlink" title="所有算法空间时间复杂度"></a>所有算法空间时间复杂度</h3><p><img src="https://raw.githubusercontent.com/whu1233334/picgo-picture-room/picgo/img/202304041941683.png" alt="image.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>obisidain图床</title>
      <link href="/undefined/7b58c309.html"/>
      <url>/undefined/7b58c309.html</url>
      
        <content type="html"><![CDATA[<h1 id="github图床"><a href="#github图床" class="headerlink" title="github图床"></a>github图床</h1><h2 id="安装Picgo"><a href="#安装Picgo" class="headerlink" title="安装Picgo"></a>安装Picgo</h2><p>GitHub搜索picgo</p><h2 id="申请一个token"><a href="#申请一个token" class="headerlink" title="申请一个token"></a>申请一个token</h2><p>注意必须勾选仓库权限</p><h2 id="配置仓库信息"><a href="#配置仓库信息" class="headerlink" title="配置仓库信息"></a>配置仓库信息</h2><p><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202304302333755.png" alt="image.png"></p><h2 id="使用CDN域名加速"><a href="#使用CDN域名加速" class="headerlink" title="使用CDN域名加速"></a>使用CDN域名加速</h2><p><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305022155952.png" alt="image.png"></p><p>1.直接引用格式<br><code>https://cdn.jsdelivr.net/gh/GitHub账户名/仓库名/&lt;文件及路径&gt;</code><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">- 直接引用cdn域名加速默认加速master分支所以设定picgo存贮分支要改为master</span><br><span class="line">- 文件及路径可以不填,picgo上传会自动分配路径</span><br><span class="line">- 如果加速已存在的图片需要填写路径名</span><br><span class="line"></span><br></pre></td></tr></table></figure><br>2.按分支/版本号格式<br><code>https://cdn.jsdelivr.net/gh/&lt;用户名&gt;/&lt;仓库名&gt;@[分支/版本号]/&lt;文件及路径&gt;</code><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- 可以指定加速的分支名或版本号</span><br></pre></td></tr></table></figure></p><h2 id="下载obsidian中的picgo插件"><a href="#下载obsidian中的picgo插件" class="headerlink" title="下载obsidian中的picgo插件"></a>下载obsidian中的picgo插件</h2><h2 id="设置几个插件选项"><a href="#设置几个插件选项" class="headerlink" title="设置几个插件选项"></a>设置几个插件选项</h2><p><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202304302333597.png" alt="image.png"></p><h1 id="七牛云图床"><a href="#七牛云图床" class="headerlink" title="七牛云图床"></a>七牛云图床</h1><p>前置准备与上面一致，注册好七牛云后存储仓库每月10G免费上传空间，但是访问的域名是测试域名有效期30天，因此需要一个备案好的域名。</p><h2 id="设置picgo七牛云设置"><a href="#设置picgo七牛云设置" class="headerlink" title="设置picgo七牛云设置"></a>设置picgo七牛云设置</h2><p><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202304302328938.png" alt="image.png"></p><h2 id="关于测试域名过期问题"><a href="#关于测试域名过期问题" class="headerlink" title="关于测试域名过期问题"></a>关于测试域名过期问题</h2><p>由于测试域名有效期只有30天，但是又不想花钱搞个域名，可以通过，连续创建新的存储空间，一直白嫖30天测试域名，再通过qshell工具将原空间的数据，拷贝到新的空间里</p><h3 id="qshell工具的使用"><a href="#qshell工具的使用" class="headerlink" title="qshell工具的使用"></a>qshell工具的使用</h3><p><a href="https://developer.qiniu.com/kodo/1302/qshell">官网下载</a></p><h4 id="闪退问题"><a href="#闪退问题" class="headerlink" title="闪退问题"></a>闪退问题</h4><p>下载好之后，对于windows系统来说，不要双击方式运行qshell.exe,通过进入文件夹，运行cmd命令，输入qshell.exe执行</p><h4 id="操作方法"><a href="#操作方法" class="headerlink" title="操作方法"></a>操作方法</h4><p>1.窗口中输入 ```</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">qshell listbucket 要复制的空间名 -o test.txt</span><br></pre></td></tr></table></figure><p>扒取要复制的空间的所有文件信息,前面两个是命令,不解释 后面一个是要复制的空间吗,-o之后是你要指定一个文件名</p><p>2.执行之后会生成test.txt文件<br><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202304302339821.png" alt="image.png"></p><p>生成的文件是这样的,这不是我们要的,ctrl+A复制全部,用Excel表格打开<br><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202304302340692.png" alt="image.png"></p><p>只留下前面的名字,复制回原来的test.txt里,<br><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202305010929090.png" alt="image.png"></p><p>只要这些,之后<br>命令行执行<br>qshell batchcopy —force —overwrite —success-list success.txt —failure-list failure.txt 源空间名 目标空间名 -i test.txt<br>解释:qshell batchcopy 执行的是复制操作,也可以改成qshell batchmove ,<br>–force,不加这个的话会给你手机发个验证码验证,会很久,还是加上,-<br>-overwrite 同名文件覆盖<br>–success-list success.txt —failure-list failure.txt:设置复制成功或者失败的文件放置位置,就是哪些文件成功了哪些失败了,都会列到你指定的文件<br>源空间名 目标空间名 :就是空间名称,源空间就是你要复制的那个,目标空间名就是要粘贴到的那个.<br>-i test.txt:上一条命令生成的文件</p><p>这样就复制过去了,底下的图是另一个账号授权的源空间<br><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202304302340089.png" alt="image.png"></p><p>这里是我复制的空间<br><img src="https://cdn.jsdelivr.net/gh/whu1233334/picgo-picture-room/img/202304302340166.png" alt="image.png"></p><h4 id="图片换新链接"><a href="#图片换新链接" class="headerlink" title="图片换新链接"></a>图片换新链接</h4><p>由于换了一个新的测试域名，访问地址变化，但是知道保证复制之后的文件名称不变，只需要改变图url的域名位置，通过正则表达式批量修改，可以解决链接问题</p>]]></content>
      
      
      
        <tags>
            
            <tag> obisidian </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>技术随想</title>
      <link href="/undefined/dfb8a81f.html"/>
      <url>/undefined/dfb8a81f.html</url>
      
        <content type="html"><![CDATA[<h1 id="搭建个人博客"><a href="#搭建个人博客" class="headerlink" title="搭建个人博客"></a>搭建个人博客</h1><h2 id="Github-Pages-和-Hexo-搭建自己的独立博客"><a href="#Github-Pages-和-Hexo-搭建自己的独立博客" class="headerlink" title="Github Pages 和 Hexo 搭建自己的独立博客"></a><a href="https://anzhiy.cn/posts/ddae.html#Hexo-%E5%AE%89%E8%A3%85">Github Pages 和 Hexo 搭建自己的独立博客</a></h2><h2 id="一图流实现"><a href="#一图流实现" class="headerlink" title="一图流实现"></a><a href="https://zfe.space/post/65396.html">一图流实现</a></h2><h2 id="打字机效果"><a href="#打字机效果" class="headerlink" title="打字机效果"></a><a href="https://zhuanlan.zhihu.com/p/492207978">打字机效果</a></h2><h2 id="Hexo-Butterfly-一些常见问题"><a href="#Hexo-Butterfly-一些常见问题" class="headerlink" title="Hexo + Butterfly 一些常见问题"></a><a href="https://tzy1997.com/articles/hexo1612/#%E9%A6%96%E9%A1%B5%E6%89%93%E5%AD%97%E6%9C%BA%E6%95%88%E6%9E%9C">Hexo + Butterfly 一些常见问题</a></h2><h2 id="Algolia搜索系统"><a href="#Algolia搜索系统" class="headerlink" title="Algolia搜索系统"></a><a href="https://www.fomal.cc/posts/d1927166.html">Algolia搜索系统</a></h2><h2 id="页面布局优化"><a href="#页面布局优化" class="headerlink" title="页面布局优化"></a><a href="">页面布局优化</a></h2><h2 id="右边按钮阅读进度"><a href="#右边按钮阅读进度" class="headerlink" title="右边按钮阅读进度"></a><a href="https://www.fomal.cc/posts/2d7ac914.html">右边按钮阅读进度</a></h2><h2 id="文章三栏"><a href="#文章三栏" class="headerlink" title="文章三栏"></a><a href="https://www.fomal.cc/posts/d739261b.html">文章三栏</a></h2><h2 id="为文章封面图片"><a href="#为文章封面图片" class="headerlink" title="为文章封面图片"></a>为文章封面图片</h2><p>要为每一篇文章的栏目配置图片，需要在文章的top_imge和cover标签传一个图片的url链接，注意不是图片链接<br>url链接通过上传至图床获取<br>文章的 markdown 文档上，在 添加 ，并填上要显示的图片地址。Front-mattercover<br>如果不配置 ，可以设置显示默认的 cover。cover<br>如果不想在首页显示 cover， 可以设置为 。false</p><h2 id="自定义字体"><a href="#自定义字体" class="headerlink" title="自定义字体"></a><a href="https://tzy1997.com/articles/hexo1605/">自定义字体</a></h2><h2 id="修改头像及网站图标"><a href="#修改头像及网站图标" class="headerlink" title="修改头像及网站图标"></a>修改头像及网站图标</h2><p>改网站图标：修改主题文件找到favicon,修改本地的图片<br>改头像：修改主题配置文件找到avater，修改图片url</p><h2 id="双栏修改"><a href="#双栏修改" class="headerlink" title="双栏修改"></a><a href="https://zfe.space/post/hexo-butterfly-article-double-row.html">双栏修改</a></h2><h2 id="加载动画"><a href="#加载动画" class="headerlink" title="加载动画"></a><a href="https://anzhiy.cn/posts/52d8.html">加载动画</a></h2><p>遇到问题：按照流程，发现存在半屏加载页面不消失的情况，于是换用4.4版本的步骤，解决了上述问题。所以butterfly版本只最为参考，实际还是按照实际情况判断选择哪种方式</p><h2 id="利用clion修改本地文件存在的问题"><a href="#利用clion修改本地文件存在的问题" class="headerlink" title="利用clion修改本地文件存在的问题"></a>利用clion修改本地文件存在的问题</h2><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>用clion修改本地博客配置文件，无法检测到stly,pug,文件的改动，导致推送时漏掉上述类型配置文件</p><h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3><p>放弃用clion修改配置文件，换用其他编辑器；或者，直接在文件夹执行git操作</p><h2 id="Hexo-github-netlify快速搭建"><a href="#Hexo-github-netlify快速搭建" class="headerlink" title="Hexo+github+netlify快速搭建"></a><a href="https://blog.csdn.net/qq_34769162/article/details/107687755?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522168070747016800180693297%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&amp;request_id=168070747016800180693297&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-1-107687755-null-null.142^v81^insert_down38,201^v4^add_ask,239^v2^insert_chatgpt&amp;utm_term=github%20netlify%20%E5%8D%9A%E5%AE%A2&amp;spm=1018.2226.3001.4187">Hexo+github+netlify快速搭建</a></h2><h2 id="github-action自动部署"><a href="#github-action自动部署" class="headerlink" title="github action自动部署"></a><a href="https://anzhiy.cn/posts/asdx.html">github action自动部署</a></h2><h2 id="博客迁移到新电脑"><a href="#博客迁移到新电脑" class="headerlink" title="博客迁移到新电脑"></a><a href="https://www.fomal.cc/posts/d1927166.html">博客迁移到新电脑</a></h2><h2 id="hexo中插入pdf"><a href="#hexo中插入pdf" class="headerlink" title="hexo中插入pdf"></a><a href="https://zhuanlan.zhihu.com/p/550626417">hexo中插入pdf</a></h2><p>1-下载插件<br><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save hexo-pdf</span><br></pre></td></tr></table></figure></p><p>2-建立存放pdf文件夹</p><pre><code>在source文件夹下创建一个叫pdf的文件夹，把xxx.pdf文件放在这里</code></pre><p>3-引用<br>    在_post文件夹中的xxx.md直接使用<br><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% pdf /pdf/xxx.pdf %&#125;</span><br></pre></td></tr></table></figure></p><h2 id="使用本地图片"><a href="#使用本地图片" class="headerlink" title="使用本地图片"></a>使用本地图片</h2><ul><li>修改配置文件<code>_config.yml</code> ,中的<code>post_asset_folder: true</code>，设为true</li><li>注意图片文件夹位置，如果是与其处于同一级路径例如：<code>source/_post  与source/_img</code><br> 那么要引用同级的img,直接<code>/img/xxx</code>;</li></ul><h1 id="服务器部署"><a href="#服务器部署" class="headerlink" title="服务器部署"></a>服务器部署</h1><h2 id="服务器的使用"><a href="#服务器的使用" class="headerlink" title="服务器的使用"></a><a href="https://blog.csdn.net/weixin_57024510/article/details/126292491?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522168070719016800182115444%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=168070719016800182115444&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-126292491-null-null.142^v81^insert_down38,201^v4^add_ask,239^v2^insert_chatgpt&amp;utm_term=%E9%98%BF%E9%87%8C%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%80%8E%E4%B9%88%E4%BD%BF%E7%94%A8&amp;spm=1018.2226.3001.4187">服务器的使用</a></h2><h3 id="甲骨文云服务器"><a href="#甲骨文云服务器" class="headerlink" title="甲骨文云服务器"></a><a href="https://www.youtube.com/watch?v=X9sexl1wXyE">甲骨文云服务器</a></h3><h1 id="静态主机"><a href="#静态主机" class="headerlink" title="静态主机"></a>静态主机</h1><h2 id="Netlify"><a href="#Netlify" class="headerlink" title="Netlify"></a>Netlify</h2><p><a href="https://wenjie.org/archives/netlify">https://wenjie.org/archives/netlify</a> 博客地址</p>]]></content>
      
      
      
        <tags>
            
            <tag> butterfly </tag>
            
        </tags>
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title></title>
      <link href="/manifest.json"/>
      <url>/manifest.json</url>
      
        <content type="html"><![CDATA[{"name":"风起之时`Blog","short_name":"风起之时","theme_color":"#3b70fc","background_color":"#3b70fc","display":"standalone","scope":"/","start_url":"/","icons":[{"src":"/img/siteicon/16.png","sizes":"16x16","type":"image/png"},{"src":"/img/siteicon/32.png","sizes":"32x32","type":"image/png"},{"src":"/img/siteicon/48.png","sizes":"48x48","type":"image/png"},{"src":"/img/siteicon/64.png","sizes":"64x64","type":"image/png"},{"src":"/img/siteicon/128.png","sizes":"128x128","type":"image/png"},{"src":"/img/siteicon/144.png","sizes":"144x144","type":"image/png"},{"src":"/img/siteicon/512.png","sizes":"512x512","type":"image/png"}],"splash_pages":null}]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>categories</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/css/custom.css"/>
      <url>/css/custom.css</url>
      
        <content type="html"><![CDATA[/* @ce {  font-family: Candyhome;  src: url(https://npm.elemecdn.com/anzhiyu-blog@1.1.6/fonts/Candyhome.ttf);  font-display: swap;  font-weight: lighter;} */@font-face {    font-family: ZhuZiAYuanJWD;    src: url(https://npm.elemecdn.com/anzhiyu-blog@1.1.6/fonts/ZhuZiAWan.woff2);    font-display: swap;    font-weight: normal;}/*div#menus {    font-family: "ZhuZiAYuanJWD";}h1#site-title {    font-family: ZhuZiAYuanJWD;    font-size: 3em !important;}a.article-title,a.blog-slider__title,a.categoryBar-list-link,h1.post-title {    font-family: ZhuZiAYuanJWD;}.iconfont {    font-family: "iconfont" !important;    font-size: 3em;    !* 可以定义图标大小 *!    font-style: normal;    -webkit-font-smoothing: antialiased;    -moz-osx-font-smoothing: grayscale;}!* bilibli番剧插件 *!#article-container .bangumi-tab.bangumi-active {    background: var(--anzhiyu-theme);    color: var(--anzhiyu-ahoverbg);    border-radius: 10px;}a.bangumi-tab:hover {    text-decoration: none !important;}.bangumi-button:hover {    background: var(--anzhiyu-theme) !important;    border-radius: 10px !important;    color: var(--anzhiyu-ahoverbg) !important;}a.bangumi-button.bangumi-nextpage:hover {    text-decoration: none !important;}.bangumi-button {    padding: 5px 10px !important;}a.bangumi-tab {    padding: 5px 10px !important;}svg.icon.faa-tada {    font-size: 1.1em;}.bangumi-info-item {    border-right: 1px solid #f2b94b;}.bangumi-info-item span {    color: #f2b94b;}.bangumi-info-item em {    color: #f2b94b;}!* 解决artitalk的图标问题 *!#uploadSource > svg {    width: 1.19em;    height: 1.5em;}!*top-img黑色透明玻璃效果移除，不建议加，除非你执着于完全一图流或者背景图对比色明显 *!#page-header:not(.not-top-img):before {    background-color: transparent !important;}!* 首页文章卡片 *!#recent-posts > .recent-post-item {    background: rgba(255, 255, 255, 0.9);}!* 首页侧栏卡片 *!#aside-content .card-widget {    background: rgba(255, 255, 255, 0.9);}!* 文章页面正文背景 *!div#post {    background: rgba(255, 255, 255, 0.9);}!* 分页页面 *!div#page {    background: rgba(255, 255, 255, 0.9);}!* 归档页面 *!div#archive {    background: rgba(255, 255, 255, 0.9);}!* 标签页面 *!div#tag {    background: rgba(255, 255, 255, 0.9);}!* 分类页面 *!div#category {    background: rgba(255, 255, 255, 0.9);}!*夜间模式伪类遮罩层透明*![data-theme="dark"] #recent-posts > .recent-post-item {    background: #121212;}[data-theme="dark"] .card-widget {    background: #121212 !important;}[data-theme="dark"] div#post {    background: #121212 !important;}[data-theme="dark"] div#tag {    background: #121212 !important;}[data-theme="dark"] div#archive {    background: #121212 !important;}[data-theme="dark"] div#page {    background: #121212 !important;}[data-theme="dark"] div#category {    background: #121212 !important;}[data-theme="dark"] div#category {    background: transparent !important;}*//* 页脚透明 */#footer {    background: transparent !important;}/* 头图透明 */#page-header {    background: transparent !important;}#rightside > div > button {    border-radius: 5px;}/* 滚动条 */::-webkit-scrollbar {    width: 7px;    height: 7px;}::-webkit-scrollbar-thumb {    background-color: #8be9fd;    border-radius: 2em;}::-webkit-scrollbar-corner {    background-color: transparent;}::-moz-selection {    color: #fff;    background-color: #3b70fc;}/*!* 音乐播放器 *!!* .aplayer .aplayer-lrc {  display: none !important;} *!.aplayer.aplayer-fixed.aplayer-narrow .aplayer-body {    left: -66px !important;    transition: all 0.3s;    !* 默认情况下缩进左侧66px，只留一点箭头部分 *!}.aplayer.aplayer-fixed.aplayer-narrow .aplayer-body:hover {    left: 0 !important;    transition: all 0.3s;    !* 鼠标悬停是左侧缩进归零，完全显示按钮 *!}.aplayer.aplayer-fixed {    z-index: 999999 !important;}*//* 评论框  */.vwrap {    box-shadow: 2px 2px 5px #bbb;    background: rgba(255, 255, 255, 0.3);    border-radius: 8px;    padding: 30px;    margin: 30px 0px 30px 0px;}/* 设置评论框 */.vcard {    box-shadow: 2px 2px 5px #bbb;    background: rgba(255, 255, 255, 0.3);    border-radius: 8px;    padding: 30px;    margin: 30px 0px 0px 0px;}/* md网站下划线 */#article-container a:hover {    text-decoration: none !important;}#article-container #hpp_talk p img {    display: inline;}/* 404页面 */#error-wrap {    position: absolute;    top: 40%;    right: 0;    left: 0;    margin: 0 auto;    padding: 0 1rem;    max-width: 1000px;    transform: translate(0, -50%);}#error-wrap .error-content {    display: flex;    flex-direction: row;    justify-content: center;    align-items: center;    margin: 0 1rem;    height: 18rem;    border-radius: 8px;    background: var(--card-bg);    box-shadow: var(--card-box-shadow);    transition: all 0.3s;}#error-wrap .error-content .error-img {    box-flex: 1;    flex: 1;    height: 100%;    border-top-left-radius: 8px;    border-bottom-left-radius: 8px;    background-color: #3b70fc;    background-position: center;    background-size: cover;}#error-wrap .error-content .error-info {    box-flex: 1;    flex: 1;    padding: 0.5rem;    text-align: center;    font-size: 14px;    font-family: Titillium Web, "PingFang SC", "Hiragino Sans GB", "Microsoft JhengHei", "Microsoft YaHei", sans-serif;}#error-wrap .error-content .error-info .error_title {    margin-top: -4rem;    font-size: 9em;}#error-wrap .error-content .error-info .error_subtitle {    margin-top: -3.5rem;    word-break: break-word;    font-size: 1.6em;}#error-wrap .error-content .error-info a {    display: inline-block;    margin-top: 0.5rem;    padding: 0.3rem 1.5rem;    background: var(--btn-bg);    color: var(--btn-color);}#body-wrap.error .aside-list {    display: flex;    flex-direction: row;    flex-wrap: nowrap;    bottom: 0px;    position: absolute;    padding: 1rem;    width: 100%;    overflow: scroll;}#body-wrap.error .aside-list .aside-list-group {    display: flex;    flex-direction: row;    flex-wrap: nowrap;    max-width: 1200px;    margin: 0 auto;}#body-wrap.error .aside-list .aside-list-item {    padding: 0.5rem;}#body-wrap.error .aside-list .aside-list-item img {    width: 100%;    object-fit: cover;    border-radius: 12px;}#body-wrap.error .aside-list .aside-list-item .thumbnail {    overflow: hidden;    width: 230px;    height: 143px;    background: var(--anzhiyu-card-bg);    display: flex;}#body-wrap.error .aside-list .aside-list-item .content .title {    -webkit-line-clamp: 2;    overflow: hidden;    display: -webkit-box;    -webkit-box-orient: vertical;    line-height: 1.5;    justify-content: center;    align-items: flex-end;    align-content: center;    padding-top: 0.5rem;    color: white;}#body-wrap.error .aside-list .aside-list-item .content time {    display: none;}/* 代码框主题 */#article-container figure.highlight {    border-radius: 10px;}/* 归档样式 */span.card-archive-list-count {    width: auto;    text-align: left;    font-size: 1.5rem;    line-height: 0.9;    font-weight: 700;}.card-archive-list-count-group {    display: flex;    flex-direction: row;    align-items: baseline;}#aside-content .card-archives ul.card-archive-list > .card-archive-list-item a span:last-child,#aside-content .card-categories ul.card-category-list > .card-category-list-item a span:last-child {    width: fit-content;    margin-left: 4px;}span.card-archive-list-count {    width: auto;    text-align: left;    font-size: 1.1rem;    line-height: 0.9;    font-weight: 700;}.card-archive-list-date {    font-size: 14px;    opacity: 0.6;}li.card-archive-list-item {    width: 100%;    flex: 0 0 48%;}#aside-content .card-archives ul.card-archive-list > .card-archive-list-item a:hover,#aside-content .card-categories ul.card-category-list > .card-category-list-item a:hover {    color: var();    background-color: var(--btn-bg);    box-shadow: var(--btn-bg);    border-radius: 8px;    padding-left: 0.5rem;    padding-right: 0.5rem;}@media screen and (min-width: 1300px) {    #aside-content .card-archives ul.card-archive-list > .card-archive-list-item a:hover,    #aside-content .card-categories ul.card-category-list > .card-category-list-item a:hover {        transform: scale(1.03);    }    #aside-content .card-archives ul.card-archive-list > .card-archive-list-item a:active,    #aside-content .card-categories ul.card-category-list > .card-category-list-item a:active {        transform: scale(0.97);    }}#aside-content .card-archives ul.card-archive-list > .card-archive-list-item a,#aside-content .card-categories ul.card-category-list > .card-category-list-item a {    border-radius: 8px;    margin: 4px 0;    display: flex;    flex-direction: column;    align-content: space-between;    border: var(--style-border);}#aside-content .card-archives ul.card-archive-list > .card-archive-list-item a span:first-child,#aside-content .card-categories ul.card-category-list > .card-category-list-item a span:first-child {    width: auto;    flex: inherit;}#aside-content .card-archives ul.card-archive-list,#aside-content .card-categories ul.card-category-list {    display: flex;    flex-direction: row;    justify-content: space-between;    flex-wrap: wrap;}/*渐变条*/.pace {    -webkit-pointer-events: none;    pointer-events: none;    -webkit-user-select: none;    -moz-user-select: none;    user-select: none;    z-index: 2000;    position: fixed;    margin: auto;    top: 10px;    left: 0;    right: 0;    height: 8px;    border-radius: 8px;    width: 4rem;    background: #eaecf2;    border: 1px #e3e8f7;    overflow: hidden;}.pace-inactive .pace-progress {    opacity: 0;    transition: 0.3s ease-in;}.pace .pace-progress {    -webkit-box-sizing: border-box;    -moz-box-sizing: border-box;    -ms-box-sizing: border-box;    -o-box-sizing: border-box;    box-sizing: border-box;    -webkit-transform: translate3d(0, 0, 0);    -moz-transform: translate3d(0, 0, 0);    -ms-transform: translate3d(0, 0, 0);    -o-transform: translate3d(0, 0, 0);    transform: translate3d(0, 0, 0);    max-width: 200px;    position: absolute;    z-index: 2000;    display: block;    top: 0;    right: 100%;    height: 100%;    width: 100%;    background: linear-gradient(-45deg, #ee7752, #e73c7e, #23a6d5, #23d5ab);    animation: gradient 1.5s ease infinite;    background-size: 200%;}.pace.pace-inactive {    opacity: 0;    transition: 0.3s;    top: -8px;}@keyframes gradient {    0% {        background-position: 0% 50%;    }    50% {        background-position: 100% 50%;    }    100% {        background-position: 0% 50%;    }}/*魔改菜单栏*//* 一级菜单居中 *//*#nav .menus_items {    position: absolute !important;    width: fit-content !important;    left: 50% !important;    transform: translateX(-50%) !important;}*//* 子菜单横向展示 */#nav .menus_items .menus_item:hover .menus_item_child {    display: flex !important;}/* 这里的2是代表导航栏的第2个元素，即有子菜单的元素，可以按自己需求修改 */.menus_items .menus_item:nth-child(2) .menus_item_child {    left: -125px;}/*名片渐变色*//* 侧边栏个人信息卡片动态渐变色 */#aside-content > .card-widget.card-info {    background: linear-gradient(            -45deg,            #e8d8b9,            #eccec5,            #a3e9eb,            #bdbdf0,            #eec1ea    );    box-shadow: 0 0 5px rgb(66, 68, 68);    position: relative;    background-size: 400% 400%;    -webkit-animation: Gradient 10s ease infinite;    -moz-animation: Gradient 10s ease infinite;    animation: Gradient 10s ease infinite !important;}@-webkit-keyframes Gradient {    0% {        background-position: 0% 50%;    }    50% {        background-position: 100% 50%;    }    100% {        background-position: 0% 50%;    }}@-moz-keyframes Gradient {    0% {        background-position: 0% 50%;    }    50% {        background-position: 100% 50%;    }    100% {        background-position: 0% 50%;    }}@keyframes Gradient {    0% {        background-position: 0% 50%;    }    50% {        background-position: 100% 50%;    }    100% {        background-position: 0% 50%;    }}/* 黑夜模式适配 */[data-theme="dark"] #aside-content > .card-widget.card-info {    background: #191919ee;}/* 个人信息Follow me按钮 */#aside-content > .card-widget.card-info > #card-info-btn {    background-color: #3eb8be;    border-radius: 8px;}/*loading动画*/.loading-img {    background: url(https://s1.ax1x.com/2023/04/01/ppWibxf.jpg) no-repeat center center;    background-size: cover;}/*黑夜霓虹灯*//* 日间模式不生效 */[data-theme="light"] #site-name,[data-theme="light"] #site-title,[data-theme="light"] #site-subtitle,[data-theme="light"] #post-info {    animation: none;}/* 夜间模式生效 */[data-theme="dark"] #site-name,[data-theme="dark"] #site-title {    animation: light_15px 10s linear infinite;}[data-theme="dark"] #site-subtitle {    animation: light_10px 10s linear infinite;}[data-theme="dark"] #post-info {    animation: light_5px 10s linear infinite;}/* 关键帧描述 */@keyframes light_15px {    0% {        text-shadow: #5636ed 0 0 15px;    }    12.5% {        text-shadow: #11ee5e 0 0 15px;    }    25% {        text-shadow: #f14747 0 0 15px;    }    37.5% {        text-shadow: #f1a247 0 0 15px;    }    50% {        text-shadow: #f1ee47 0 0 15px;    }    50% {        text-shadow: #b347f1 0 0 15px;    }    62.5% {        text-shadow: #002afa 0 0 15px;    }    75% {        text-shadow: #ed709b 0 0 15px;    }    87.5% {        text-shadow: #39c5bb 0 0 15px;    }    100% {        text-shadow: #5636ed 0 0 15px;    }}@keyframes light_10px {    0% {        text-shadow: #5636ed 0 0 10px;    }    12.5% {        text-shadow: #11ee5e 0 0 10px;    }    25% {        text-shadow: #f14747 0 0 10px;    }    37.5% {        text-shadow: #f1a247 0 0 10px;    }    50% {        text-shadow: #f1ee47 0 0 10px;    }    50% {        text-shadow: #b347f1 0 0 10px;    }    62.5% {        text-shadow: #002afa 0 0 10px;    }    75% {        text-shadow: #ed709b 0 0 10px;    }    87.5% {        text-shadow: #39c5bb 0 0 10px;    }    100% {        text-shadow: #5636ed 0 0 10px;    }}@keyframes light_5px {    0% {        text-shadow: #5636ed 0 0 5px;    }    12.5% {        text-shadow: #11ee5e 0 0 5px;    }    25% {        text-shadow: #f14747 0 0 5px;    }    37.5% {        text-shadow: #f1a247 0 0 15px;    }    50% {        text-shadow: #f1ee47 0 0 5px;    }    50% {        text-shadow: #b347f1 0 0 5px;    }    62.5% {        text-shadow: #002afa 0 0 5px;    }    75% {        text-shadow: #ed709b 0 0 5px;    }    87.5% {        text-shadow: #39c5bb 0 0 5px;    }    100% {        text-shadow: #5636ed 0 0 5px;    }}/*侧边栏最近文章修改*/#aside-content .aside-list > .aside-list-item .content > time {    display: none;}#aside-content .aside-list > .aside-list-item .content > .title {    -webkit-line-clamp: 3;    font-weight: 700;    padding: 2px 0;}#aside-content .aside-list > .aside-list-item {    padding: 8px;    padding-top: 6px !important;    padding-bottom: 6px !important;    border-radius: 12px;    transition: 0.3s;    margin: 4px 0;    cursor: pointer;}@media screen and (min-width: 1300px) {    #aside-content .aside-list > .aside-list-item:hover {        transform: scale(1.03);    }    #aside-content .aside-list > .aside-list-item:active {        transform: scale(0.97);    }}#aside-content .aside-list > .aside-list-item:hover .thumbnail > img {    transform: scale(1);}#aside-content .aside-list > .aside-list-item:not(:last-child) {    border-bottom: 0 dashed var(--anzhiyu-background) !important;}#aside-content .aside-list > .aside-list-item .thumbnail {    border-radius: 8px;    border: var(--style-border);}#aside-content .aside-list > .aside-list-item:hover {    background: var(--anzhiyu-blue-main);    color: var(--anzhiyu-white);    transition: 0.3s;    box-shadow: var(--anzhiyu-shadow-main);}#aside-content .aside-list > .aside-list-item:hover a {    color: var(--anzhiyu-white) !important;}.card-widget.card-recent-post {    padding: 0.4rem 0.6rem !important;}/* 文章页H1-H6图标样式效果 *//* 控制风车转动速度 4s那里可以自己调节快慢 */h1::before,h2::before,h3::before,h4::before,h5::before,h6::before {    -webkit-animation: ccc 4s linear infinite;    animation: ccc 4s linear infinite;}/* 控制风车转动方向 -1turn 为逆时针转动，1turn 为顺时针转动，相同数字部分记得统一修改 */@-webkit-keyframes ccc {    0% {        -webkit-transform: rotate(0deg);        transform: rotate(0deg);    }    to {        -webkit-transform: rotate(-1turn);        transform: rotate(-1turn);    }}@keyframes ccc {    0% {        -webkit-transform: rotate(0deg);        transform: rotate(0deg);    }    to {        -webkit-transform: rotate(-1turn);        transform: rotate(-1turn);    }}/* 设置风车颜色 */#content-inner.layout h1::before {    color: #ef50a8;    margin-left: -1.55rem;    font-size: 1.3rem;    margin-top: -0.23rem;}#content-inner.layout h2::before {    color: #fb7061;    margin-left: -1.35rem;    font-size: 1.1rem;    margin-top: -0.12rem;}#content-inner.layout h3::before {    color: #ffbf00;    margin-left: -1.22rem;    font-size: 0.95rem;    margin-top: -0.09rem;}#content-inner.layout h4::before {    color: #a9e000;    margin-left: -1.05rem;    font-size: 0.8rem;    margin-top: -0.09rem;}#content-inner.layout h5::before {    color: #57c850;    margin-left: -0.9rem;    font-size: 0.7rem;    margin-top: 0rem;}#content-inner.layout h6::before {    color: #5ec1e0;    margin-left: -0.9rem;    font-size: 0.66rem;    margin-top: 0rem;}/* s设置风车hover动效 6s那里可以自己调节快慢*/#content-inner.layout h1:hover,#content-inner.layout h2:hover,#content-inner.layout h3:hover,#content-inner.layout h4:hover,#content-inner.layout h5:hover,#content-inner.layout h6:hover {    color: var(--theme-color);}#content-inner.layout h1:hover::before,#content-inner.layout h2:hover::before,#content-inner.layout h3:hover::before,#content-inner.layout h4:hover::before,#content-inner.layout h5:hover::before,#content-inner.layout h6:hover::before {    color: var(--theme-color);    -webkit-animation: ccc 6s linear infinite;    animation: ccc 6s linear infinite;}]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/css/progress_bar.css"/>
      <url>/css/progress_bar.css</url>
      
        <content type="html"><![CDATA[.pace {    -webkit-pointer-events: none;    pointer-events: none;    -webkit-user-select: none;    -moz-user-select: none;    user-select: none;    z-index: 2000;    position: fixed;    margin: auto;    top: 10px;    left: 0;    right: 0;    height: 8px;    border-radius: 8px;    width: 4rem;    background: #eaecf2;    border: 1px #e3e8f7;    overflow: hidden;}.pace-inactive .pace-progress {    opacity: 0;    transition: 0.3s ease-in;}.pace .pace-progress {    -webkit-box-sizing: border-box;    -moz-box-sizing: border-box;    -ms-box-sizing: border-box;    -o-box-sizing: border-box;    box-sizing: border-box;    -webkit-transform: translate3d(0, 0, 0);    -moz-transform: translate3d(0, 0, 0);    -ms-transform: translate3d(0, 0, 0);    -o-transform: translate3d(0, 0, 0);    transform: translate3d(0, 0, 0);    max-width: 200px;    position: absolute;    z-index: 2000;    display: block;    top: 0;    right: 100%;    height: 100%;    width: 100%;    background: linear-gradient(-45deg, #ee7752, #e73c7e, #23a6d5, #23d5ab);    animation: gradient 1.5s ease infinite;    background-size: 200%;}.pace.pace-inactive {    opacity: 0;    transition: 0.3s;    top: -8px;}@keyframes gradient {    0% {        background-position: 0% 50%;    }    50% {        background-position: 100% 50%;    }    100% {        background-position: 0% 50%;    }}]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/css/readPercent.css"/>
      <url>/css/readPercent.css</url>
      
        <content type="html"><![CDATA[/* 返回顶部 */button#go-up #percent {    display: none;    font-weight: bold;    font-size: 15px !important;}button#go-up span {    font-size: 12px!important;    margin-right: -1px;}/* 鼠标滑动到按钮上时显示返回顶部图标 */button#go-up:hover i {    display: block !important;}button#go-up:hover #percent {    display: none !important;}]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/ali_font.js"/>
      <url>/js/ali_font.js</url>
      
        <content type="html"><![CDATA[!(function (c) {    var l,        h,        a,        t,        i,        v =            '<svg><symbol id="icon-dragon_chen" viewBox="0 0 1024 1024"><path d="M512 512m-296.421053 0a296.421053 296.421053 0 1 0 592.842106 0 296.421053 296.421053 0 1 0-592.842106 0Z" fill="#D6B196" ></path><path d="M970.105263 512c0 224.983579-163.166316 412.186947-377.263158 450.533053v-54.460632C777.135158 870.507789 916.210526 707.206737 916.210526 512c0-222.881684-181.328842-404.210526-404.210526-404.210526S107.789474 289.118316 107.789474 512s181.328842 404.210526 404.210526 404.210526c9.081263 0 18.000842-0.754526 26.947368-1.374315v53.894736c-8.973474 0.538947-17.866105 1.374316-26.947368 1.374316-252.604632 0-458.105263-205.500632-458.105263-458.105263S259.395368 53.894737 512 53.894737s458.105263 205.500632 458.105263 458.105263z m-498.122105 265.620211L431.157895 754.526316V485.052632h-66.074948c-14.470737 110.645895-44.355368 197.066105-102.696421 260.742736l-39.747368-36.432842C306.526316 617.876211 323.368421 462.901895 323.368421 242.526316V215.578947h377.263158v53.894737H377.182316c-0.404211 58.260211-2.209684 112.128-6.359579 161.684211H700.631579v53.894737h-122.152421a481.172211 481.172211 0 0 0 76.826947 119.70021l66.479158-39.855158 27.728842 46.214737-54.460631 32.687158c29.507368 24.953263 63.757474 45.675789 102.80421 58.098526l-16.303158 51.361684c-134.224842-42.711579-222.773895-167.073684-261.551158-268.207157H485.052632v221.857684l68.985263-41.391158 27.728842 46.214737-109.783579 65.886316zM646.736842 377.263158h-215.578947v-53.894737h215.578947v53.894737z" fill="#231F20" ></path></symbol><symbol id="icon-dog_xu" viewBox="0 0 1024 1024"><path d="M512 512m-296.421053 0a296.421053 296.421053 0 1 0 592.842106 0 296.421053 296.421053 0 1 0-592.842106 0Z" fill="#D6B196" ></path><path d="M970.105263 512c0 224.983579-163.166316 412.186947-377.263158 450.533053v-54.460632C777.135158 870.507789 916.210526 707.206737 916.210526 512c0-222.881684-181.328842-404.210526-404.210526-404.210526S107.789474 289.118316 107.789474 512s181.328842 404.210526 404.210526 404.210526c9.081263 0 18.000842-0.754526 26.947368-1.374315v53.894736c-8.973474 0.538947-17.866105 1.374316-26.947368 1.374316-252.604632 0-458.105263-205.500632-458.105263-458.105263S259.395368 53.894737 512 53.894737s458.105263 205.500632 458.105263 458.105263z m-375.592421 150.393263c33.684211 44.544 75.210105 74.698105 124.739369 90.812632l11.425684 3.718737 10.401684-6.009264C781.204211 727.740632 808.421053 622.565053 808.421053 592.842105h-53.894737c0 22.069895-19.132632 80.869053-33.711158 103.504842-34.816-14.605474-64.538947-39.262316-89.249684-74.13221 48.316632-55.269053 92.079158-117.328842 120.535579-179.900632l-49.044211-22.285473c-23.767579 52.250947-59.742316 104.717474-100.055579 152.656842-24.010105-50.930526-41.148632-115.927579-51.658105-195.395369H700.631579v-53.894737h-155.189895A1848.050526 1848.050526 0 0 1 538.947368 161.684211h-53.894736c0 58.206316 2.155789 112.074105 6.494315 161.68421H323.368421v26.947368c0 216.549053-13.177263 263.545263-100.702316 359.046737l39.747369 36.432842c63.326316-69.093053 92.806737-118.272 105.714526-206.848H485.052632v-53.894736h-111.319579a1742.147368 1742.147368 0 0 0 3.449263-107.789474h120.158316c12.611368 98.250105 35.031579 177.475368 67.395368 238.187789-61.978947 65.536-128.053895 117.975579-173.298526 142.282106l25.519158 47.481263c47.589053-25.573053 114.095158-77.446737 177.55621-142.821053z m125.170526-411.971368l-80.842105-80.842106-38.103579 38.103579 80.842105 80.842106 38.103579-38.103579z" fill="#231F20" ></path></symbol><symbol id="icon-dog" viewBox="0 0 1024 1024"><path d="M894.814316 904.434526l83.240421-183.134315-13.824-13.204211c-0.485053-0.458105-45.648842-47.589053-47.939369-185.263158-0.134737-7.922526-0.134737-33.953684-0.134736-55.996631-30.693053 15.306105-70.090105 19.887158-106.09179 19.887157-92.752842 0-163.624421-23.983158-210.647579-71.275789a192.512 192.512 0 0 1-27.944421-36.513684H377.263158v377.263158c342.662737 0 403.105684 51.092211 494.592 128.377263 7.922526 6.682947 15.521684 13.312 22.959158 19.86021z" fill="#85C3DE" ></path><path d="M326.063158 282.947368c0 34.250105-13.231158 44.463158-29.642105 44.463158s-29.642105-10.213053-29.642106-44.463158c0-34.223158 13.231158-44.463158 29.642106-44.463157s29.642105 10.24 29.642105 44.463157zM269.473684 430.295579v311.646316L190.275368 916.210526h59.203369L323.368421 753.637053V377.263158h-26.947368c-119.403789 0-172.732632-53.382737-185.505685-107.789474h35.624421c51.092211 0 68.581053-15.764211 120.535579-62.544842 12.773053-11.506526 28.079158-25.276632 47.023158-41.741474l18.351158-15.952842-69.658947-99.139368-44.085895 30.989474 41.768421 59.472842c-11.183158 9.862737-20.884211 18.593684-29.480421 26.327579C180.736 212.156632 176.235789 215.578947 146.539789 215.578947H53.894737v26.947369c0 88.710737 66.910316 178.149053 215.578947 187.769263z m216.710737-161.414737c2.290526 71.733895 28.698947 136.326737 75.048421 182.918737C618.711579 509.628632 702.437053 538.947368 810.091789 538.947368c18.593684 0 36.190316-1.158737 52.628211-3.449263 3.745684 111.265684 33.630316 170.334316 51.496421 196.015158l-38.507789 84.722526C782.174316 742.049684 688.774737 700.631579 377.263158 700.631579v53.894737c34.277053 0 65.697684 0.512 94.639158 1.509052L374.595368 970.105263h59.203369l96.013474-211.240421c66.182737 4.338526 117.005474 11.829895 157.911578 22.016L626.229895 916.210526h59.176421l54.16421-119.134315c47.616 18.405053 79.737263 42.091789 113.125053 69.739789L805.753263 970.105263h59.203369l113.071157-248.778105-13.824-13.204211c-0.485053-0.458105-45.648842-47.589053-47.939368-185.263158C985.168842 498.553263 1024 447.811368 1024 377.263158c0-95.205053-66.506105-161.684211-161.684211-161.684211v53.894737c65.482105 0 107.789474 42.307368 107.789474 107.789474 0 89.088-87.013053 107.789474-160.013474 107.789474-92.752842 0-163.624421-23.983158-210.647578-71.27579-30.315789-30.504421-45.891368-65.832421-53.35579-98.735158 11.210105 6.952421 22.932211 13.338947 35.274105 19.186527l23.04-48.720843c-92.106105-43.654737-148.992-128.646737-219.243789-243.981473l-46.026105 28.05221c49.448421 81.246316 92.968421 148.506947 147.051789 199.302737z" fill="#231F20" ></path></symbol><symbol id="icon-goat" viewBox="0 0 1024 1024"><path d="M548.378947 646.736842a952.32 952.32 0 0 1 140.90779-161.68421H107.789474c0 107.600842 0 107.600842-63.649685 169.283368l-13.069473 12.665263L66.721684 754.526316h417.172211c20.345263-41.472 43.654737-77.446737 64.485052-107.789474z" fill="#F7C768" ></path><path d="M608.256 144.734316C555.762526 115.577263 506.098526 107.789474 485.052632 107.789474V53.894737c32.579368 0 91.270737 11.452632 149.369263 43.735579 75.290947 41.822316 130.694737 94.531368 171.385263 150.878316C755.873684 288.013474 697.101474 323.368421 646.736842 323.368421h-107.789474v-53.894737h107.789474c20.506947 0 48.424421-11.210105 80.437895-31.285895a471.04 471.04 0 0 0-118.918737-93.453473zM832.673684 342.231579c-16.384 0-29.642105 10.24-29.642105 44.463158 0 34.250105 13.231158 44.463158 29.642105 44.463158s29.642105-10.213053 29.642105-44.463158c0-34.223158-13.231158-44.463158-29.642105-44.463158zM1024 619.789474C1024 347.109053 901.066105 122.448842 686.753684 3.395368l-26.165895 47.104C914.324211 191.461053 964.688842 440.400842 969.647158 592.842105h-84.506947c-17.92-35.624421-45.352421-69.12-87.013053-101.995789l-16.788211-13.285053-16.734315 13.392842c-66.128842 52.897684-134.629053 127.083789-187.311158 209.677474H102.965895l-8.272842-20.318316C159.043368 617.013895 161.684211 603.109053 161.684211 485.052632v-53.894737h485.052631v-53.894737H161.684211c0-80.384 14.309053-110.026105 66.586947-137.916632l-25.384421-47.535158C123.365053 234.226526 107.789474 291.920842 107.789474 377.263158v107.789474c0 107.600842 0 107.600842-63.649685 169.283368l-13.069473 12.665263L110.618947 862.315789h58.206316l-43.897263-107.789473h103.477895l43.897263 107.789473h58.206316l-43.897263-107.789473h259.47621C508.981895 824.939789 485.052632 899.152842 485.052632 970.105263h53.894736c0-68.688842 27.270737-144.060632 68.958316-215.578947H687.157895c7.410526 0 13.473684 6.063158 13.473684 13.473684V862.315789h53.894737v-94.315789c0-37.160421-30.208-67.368421-67.368421-67.368421h-44.65179c40.771368-58.017684 89.438316-111.427368 138.913684-153.626947C841.512421 600.037053 862.315789 655.225263 862.315789 754.526316h53.894737c0-38.912-2.748632-74.482526-11.102315-107.789474H1024v-26.947368z" fill="#231F20" ></path></symbol><symbol id="icon-goat_wei" viewBox="0 0 1024 1024"><path d="M512 512m-296.421053 0a296.421053 296.421053 0 1 0 592.842106 0 296.421053 296.421053 0 1 0-592.842106 0Z" fill="#D6B196" ></path><path d="M970.105263 512c0 224.983579-163.166316 412.186947-377.263158 450.533053v-54.460632C777.135158 870.507789 916.210526 707.206737 916.210526 512c0-222.881684-181.328842-404.210526-404.210526-404.210526S107.789474 289.118316 107.789474 512s181.328842 404.210526 404.210526 404.210526c9.081263 0 18.000842-0.754526 26.947368-1.374315v53.894736c-8.973474 0.538947-17.866105 1.374316-26.947368 1.374316-252.604632 0-458.105263-205.500632-458.105263-458.105263S259.395368 53.894737 512 53.894737s458.105263 205.500632 458.105263 458.105263z m-431.157895 50.202947c52.304842 70.925474 136.973474 152.144842 232.528843 190.383158l19.994947-50.041263c-109.271579-43.708632-202.805895-152.629895-238.780632-217.49221H808.421053v-53.894737H538.947368v-53.894737h215.578948v-53.894737h-215.578948V161.684211h-53.894736v161.68421h-215.578948v53.894737h215.578948v53.894737H215.578947v53.894737h255.757474c-35.974737 64.862316-129.536 173.783579-238.807579 217.49221l20.021895 50.041263c95.528421-38.238316 180.197053-119.484632 232.501895-190.383158V808.421053h53.894736v-246.218106z" fill="#231F20" ></path></symbol><symbol id="icon-dragon" viewBox="0 0 1024 1024"><path d="M366.376421 344.441263l152.980211-152.98021c43.142737-43.142737 141.204211-9.216 270.201263 115.738947-15.225263 9.835789-25.114947 15.818105-44.13979 32.256s-38.076632 35.489684-59.418947 56.832c-4.203789 4.203789-51.173053 53.221053-78.740211 82.027789-10.805895-12.126316-22.743579-24.171789-34.654315-36.082526L493.136842 362.792421l-54.218105 54.218105-72.542316-72.569263zM862.315789 512c0 46.834526-45.352421 80.842105-107.789473 80.842105-108.948211 0-189.359158-28.806737-267.129263-56.697263C414.100211 509.871158 344.872421 485.052632 258.182737 485.052632 80.788211 485.052632 0 588.126316 0 683.897263h53.894737C73.216 659.779368 135.302737 646.736842 177.340632 646.736842c77.338947 0 223.124211 23.282526 291.893894 47.912421C547.462737 722.701474 615.989895 754.526316 734.315789 754.526316 862.315789 754.526316 916.210526 670.315789 916.210526 512h-53.894737z" fill="#FF8787" ></path><path d="M552.421053 1024c-69.766737 0-113.825684-13.958737-156.402527-27.459368-54.487579-17.273263-110.807579-35.004632-232.421052-26.516211l-3.826527-53.733053c131.718737-9.458526 195.934316 10.967579 252.52379 28.887579 42.226526 13.365895 78.686316 24.926316 140.126316 24.926316 92.752842 0 148.210526-57.936842 148.210526-113.960421 0-16.949895-5.524211-101.618526-114.634105-101.618526-64.970105 0-112.747789 23.336421-163.328 48.02021C365.325474 830.571789 300.301474 862.315789 204.288 862.315789 85.908211 862.315789 0 787.294316 0 683.897263 0 588.126316 80.788211 485.052632 258.182737 485.052632c86.689684 0 155.917474 24.818526 229.214316 51.09221 45.810526 16.410947 92.564211 33.172211 145.488842 44.166737 9.000421-7.033263 13.850947-16.276211 13.850947-26.758737 0-37.187368-37.672421-74.859789-74.13221-111.265684l-3.287579-3.287579 38.103579-38.103579 3.260631 3.287579C652.853895 446.275368 700.631579 494.026105 700.631579 553.552842c0 12.719158-2.802526 24.926316-7.976421 36.109474A594.997895 594.997895 0 0 0 754.526316 592.842105c62.437053 0 107.789474-34.007579 107.789473-80.842105 0-58.853053-52.870737-110.268632-108.840421-164.702316l-8.057263-7.841684c-19.024842 16.437895-38.076632 35.489684-59.418947 56.832l-38.103579-38.103579c74.805895-74.832842 134.898526-134.898526 268.314947-141.931789V55.619368c-63.407158 7.787789-120.993684 39.424-121.667368 39.801264l-15.818105 8.811789-14.120421-11.344842C731.701895 66.452211 709.712842 53.894737 673.684211 53.894737c-41.418105 0-74.347789 25.869474-109.190737 53.301895-26.624 20.911158-54.137263 42.549895-86.851369 53.194105L469.342316 161.684211h-69.093053l-105.525895 105.525894-38.103579-38.130526L324.015158 161.684211H161.684211V107.789474h303.104c22.231579-8.272842 43.708632-25.168842 66.398315-42.981053C569.829053 34.438737 613.618526 0 673.684211 0c48.909474 0 81.408 17.946947 110.888421 40.097684C813.702737 26.300632 877.729684 0 943.157895 0h26.947368v323.368421h-53.894737v-53.167158c-54.164211 3.098947-92.914526 15.845053-127.002947 36.675369l1.832421 1.778526C852.587789 368.505263 916.210526 430.376421 916.210526 512c0 60.928-43.708632 109.945263-107.789473 127.622737V700.631579h53.894736v-53.894737h53.894737v53.894737h53.894737v53.894737h-53.894737v53.894737h-53.894737v-53.894737h-53.894736c-29.722947 0-53.894737-24.171789-53.894737-53.894737v-53.894737c-118.325895 0-207.063579-31.797895-285.318737-59.877053C400.437895 562.229895 335.494737 538.947368 258.182737 538.947368 117.059368 538.947368 53.894737 611.732211 53.894737 683.897263 53.894737 757.221053 115.738947 808.421053 204.288 808.421053c11.910737 0 23.228632-0.538947 34.034526-1.536C248.454737 796.321684 269.473684 770.640842 269.473684 739.166316c0-33.118316-43.088842-70.979368-58.152421-81.596632l30.935579-44.139789c8.299789 5.793684 81.111579 58.664421 81.111579 125.736421 0 19.429053-4.527158 37.052632-10.994526 52.304842 30.773895-10.051368 58.314105-23.498105 86.662737-37.349053C452.877474 727.848421 508.577684 700.631579 585.997474 700.631579 702.410105 700.631579 754.526316 778.725053 754.526316 856.144842 754.526316 938.657684 678.912 1024 552.421053 1024z m-21.180632-623.104L493.136842 362.792421l137.889684-137.889684 38.103579 38.103579-137.889684 137.889684z m-126.760421-18.351158l-38.103579-38.103579 152.980211-152.98021 38.103579 38.103579-152.980211 152.98021z m282.004211-218.624c15.494737-9.754947 43.331368-31.447579 43.331368-31.447579-25.734737-27.809684-49.556211-33.333895-67.368421-29.07621-19.240421 4.608-37.753263 24.602947-37.753263 24.602947s42.253474 22.447158 61.790316 35.920842z" fill="#231F20" ></path></symbol><symbol id="icon-horse" viewBox="0 0 1024 1024"><path d="M776.003368 646.736842c16.599579-99.947789 43.439158-181.086316 83.213474-256.538947l6.817684-12.934737H269.473684c-36.756211 0-53.894737 54.945684-53.894737 92.05221 0 46.753684 6.656 77.527579 70.278737 176.074106l84.533895 128.269473L498.876632 646.736842h277.126736z" fill="#FFAF6E" ></path><path d="M1024 0v404.210526c0 33.333895 0 134.736842-92.079158 134.736842h-13.824l-78.362947-109.056c-22.743579 49.906526-40.340211 103.046737-53.490527 162.950737h115.092211C937.310316 592.842105 970.105263 625.637053 970.105263 661.638737c0 60.631579-69.389474 154.300632-77.312 164.75621l-43.008-32.471579C875.466105 759.861895 916.210526 693.813895 916.210526 661.638737c0-5.982316-8.919579-14.901895-14.901894-14.901895h-125.332211C761.128421 736.121263 754.526316 840.569263 754.526316 970.105263h-53.894737c0-283.971368 31.097263-453.605053 110.888421-605.049263l20.318316-38.534737 112.801684 156.995369c14.443789-4.419368 25.465263-20.938105 25.465263-79.306106V0h53.894737z m-161.684211 161.684211h53.894737V0h-53.894737v80.842105c-17.381053-14.955789-38.184421-26.947368-80.842105-26.947368h-134.736842v53.894737h134.736842c37.672421 0 80.842105 40.906105 80.842105 53.894737z m-107.789473 0h-215.578948v53.894736h161.684211l53.894737-53.894736zM300.894316 766.544842L400.680421 916.210526h64.754526l-95.043368-142.551579L498.876632 646.736842h167.855157a1212.631579 1212.631579 0 0 1 9.431579-53.894737h-199.383579l-175.885473 173.702737z m109.97221-184.400842l-37.861052-38.319158-132.419369 130.802526C173.729684 571.095579 161.684211 529.812211 161.684211 469.315368 161.684211 398.578526 199.464421 323.368421 269.473684 323.368421h323.368421l53.894737-53.894737H269.473684c-6.709895 0-13.258105 0.565895-19.698526 1.482105C234.927158 249.451789 204.638316 215.578947 160.633263 215.578947 65.967158 215.578947 0 349.291789 0 469.315368c0 70.170947 16.141474 136.650105 49.232842 202.671158L6.197895 723.833263l41.472 34.41179 66.128842-79.737264-8.704-16.033684C83.105684 622.133895 53.894737 558.214737 53.894737 469.315368 53.894737 368.451368 106.765474 269.473684 160.633263 269.473684c13.231158 0 25.815579 9.889684 35.43579 20.533895C142.874947 321.967158 107.789474 388.500211 107.789474 469.315368c0 78.201263 19.698526 130.937263 93.642105 243.981474l-55.296 54.622316L280.899368 970.105263h64.754527l-130.048-195.072 195.260631-192.889263z" fill="#231F20" ></path></symbol><symbol id="icon-monkey_shen" viewBox="0 0 1024 1024"><path d="M512 512m-296.421053 0a296.421053 296.421053 0 1 0 592.842106 0 296.421053 296.421053 0 1 0-592.842106 0Z" fill="#BBC4C9" ></path><path d="M970.105263 512c0 224.983579-163.166316 412.186947-377.263158 450.533053v-54.460632C777.135158 870.507789 916.210526 707.206737 916.210526 512c0-222.881684-181.328842-404.210526-404.210526-404.210526S107.789474 289.118316 107.789474 512s181.328842 404.210526 404.210526 404.210526c9.081263 0 18.000842-0.754526 26.947368-1.374315v53.894736c-8.973474 0.538947-17.866105 1.374316-26.947368 1.374316-252.604632 0-458.105263-205.500632-458.105263-458.105263S259.395368 53.894737 512 53.894737s458.105263 205.500632 458.105263 458.105263z m-431.157895 134.736842h161.684211v53.894737h53.894737V269.473684h-215.578948V161.684211h-53.894736v107.789473h-215.578948v431.157895h53.894737v-53.894737h161.684211v215.578947h53.894736v-215.578947z m0-161.68421h161.684211v107.789473h-161.684211v-107.789473z m-215.578947 0h161.684211v107.789473h-161.684211v-107.789473z m215.578947-161.684211h161.684211v107.789474h-161.684211v-107.789474z m-215.578947 0h161.684211v107.789474h-161.684211v-107.789474z" fill="#231F20" ></path></symbol><symbol id="icon-ox_chou" viewBox="0 0 1024 1024"><path d="M512 512m-296.421053 0a296.421053 296.421053 0 1 0 592.842106 0 296.421053 296.421053 0 1 0-592.842106 0Z" fill="#D6B196" ></path><path d="M970.105263 512c0 224.983579-163.166316 412.186947-377.263158 450.533053v-54.460632C777.135158 870.507789 916.210526 707.206737 916.210526 512c0-222.881684-181.328842-404.210526-404.210526-404.210526S107.789474 289.118316 107.789474 512s181.328842 404.210526 404.210526 404.210526c9.081263 0 18.000842-0.754526 26.947368-1.374315v53.894736c-8.973474 0.538947-17.866105 1.374316-26.947368 1.374316-252.604632 0-458.105263-205.500632-458.105263-458.105263S259.395368 53.894737 512 53.894737s458.105263 205.500632 458.105263 458.105263z m-161.68421 188.631579h-159.555369c13.985684-172.813474 43.115789-357.429895 70.817684-385.158737L700.631579 269.473684H323.368421v53.894737h107.169684c-1.940211 45.756632-8.192 103.962947-15.76421 161.684211H323.368421v53.894736h83.968c-9.862737 68.446316-20.264421 130.128842-25.734737 161.684211H215.578947v53.894737h592.842106v-53.894737z m-346.543158-161.684211h149.800421a3313.717895 3313.717895 0 0 0-16.842105 161.684211h-158.477474c6.036211-35.247158 16.114526-95.636211 25.519158-161.684211z m22.608842-215.578947h171.735579c-15.198316 41.121684-27.405474 100.594526-36.890948 161.684211h-150.123789c7.383579-57.505684 13.419789-115.361684 15.279158-161.684211z" fill="#231F20" ></path></symbol><symbol id="icon-monkey" viewBox="0 0 1024 1024"><path d="M757.733053 485.052632H565.894737a80.842105 80.842105 0 0 0-80.842105 80.842105v215.578947c0 40.96 43.546947 99.678316 77.446736 139.210105C596.426105 960.215579 603.055158 970.105263 603.055158 970.105263H754.526316s15.144421-18.674526 45.891368-58.071579S862.315789 809.984 862.315789 717.608421c0-89.573053-47.993263-166.346105-104.582736-232.555789z" fill="#C3D686" ></path><path d="M538.947368 1024h-53.894736c0-32.794947 25.869474-87.417263 77.446736-103.316211C528.599579 881.152 485.052632 822.433684 485.052632 781.473684c0-44.570947 36.271158-80.842105 80.842105-80.842105h80.842105v53.894737h-80.842105a26.947368 26.947368 0 0 0-26.947369 26.947368c0 19.725474 36.675368 77.473684 92.133053 134.736842h88.602947c20.210526-14.147368 88.737684-71.464421 88.737685-198.602105 0-108.382316-93.237895-202.967579-168.151579-278.986105-49.502316-50.202947-88.576-89.842526-98.735158-128.61979-11.749053-44.732632-21.584842-112.586105-26.327579-148.318315H377.263158c-45.136842 0-89.519158 8.434526-121.802105 53.894736H431.157895v53.894737c-97.28 0-107.789474 113.071158-107.789474 161.684211v53.894737h53.894737v161.68421h-53.894737v-107.789474h-26.947368c-170.253474 0-188.631579-94.234947-188.631579-134.736842 0-31.043368 35.220211-72.326737 55.727158-93.722947 2.694737-14.686316 5.847579-28.348632 9.431579-41.013895H161.684211V215.578947h31.528421C239.642947 120.993684 317.224421 107.789474 377.263158 107.789474h185.640421l2.802526 23.794526c0.134737 1.050947 12.719158 106.657684 27.944421 164.756211 6.494316 24.872421 44.624842 63.514947 84.965053 104.448C760.481684 483.813053 862.315789 587.129263 862.315789 717.608421c0 92.375579-31.124211 155.028211-61.898105 194.425263C904.919579 892.146526 970.105263 803.004632 970.105263 673.684211c0-91.405474-42.819368-154.381474-84.237474-215.255579C847.791158 402.458947 808.421053 344.576 808.421053 269.473684c0-119.349895 87.093895-161.684211 161.68421-161.68421v53.894737c-32.417684 0-107.789474 10.509474-107.789474 107.789473 0 58.502737 31.555368 104.933053 68.096 158.639158C974.282105 492.597895 1024 565.679158 1024 673.684211c0 177.286737-108.301474 296.421053-269.473684 296.421052h-161.684211c-37.672421 0-53.894737 40.906105-53.894737 53.894737zM229.214316 269.473684a384.808421 384.808421 0 0 0-14.012632 58.341053l-1.401263 8.488421-6.090105 6.117053c-22.878316 22.932211-44.813474 52.601263-46.026105 62.275368 0 56.805053 53.76 75.264 107.789473 79.386947V431.157895c0-58.691368 13.473684-119.619368 46.511158-161.684211h-86.770526zM323.368421 1024h-53.894737c0-32.794947 25.869474-87.417263 77.446737-103.316211C313.020632 881.152 269.473684 822.433684 269.473684 781.473684c0-44.570947 36.271158-80.842105 80.842105-80.842105h45.16379A188.847158 188.847158 0 0 1 565.894737 592.842105h134.736842v53.894737h-134.736842c-74.293895 0-134.736842 60.442947-134.736842 134.736842v26.516211l-53.894737 0.377263V781.473684c0-9.162105 0.646737-18.135579 1.913263-26.947368H350.315789c-14.848 0-26.947368 12.072421-26.947368 26.947368 0 19.725474 36.675368 77.473684 92.133053 134.736842H431.157895v53.894737h-53.894737c-37.672421 0-53.894737 40.906105-53.894737 53.894737z" fill="#231F20" ></path></symbol><symbol id="icon-horse_wu" viewBox="0 0 1024 1024"><path d="M512 512m-296.421053 0a296.421053 296.421053 0 1 0 592.842106 0 296.421053 296.421053 0 1 0-592.842106 0Z" fill="#FF8787" ></path><path d="M970.105263 512c0 224.983579-163.166316 412.186947-377.263158 450.533053v-54.460632C777.135158 870.507789 916.210526 707.206737 916.210526 512c0-222.881684-181.328842-404.210526-404.210526-404.210526S107.789474 289.118316 107.789474 512s181.328842 404.210526 404.210526 404.210526c9.081263 0 18.000842-0.754526 26.947368-1.374315v53.894736c-8.973474 0.538947-17.866105 1.374316-26.947368 1.374316-252.604632 0-458.105263-205.500632-458.105263-458.105263S259.395368 53.894737 512 53.894737s458.105263 205.500632 458.105263 458.105263z m-431.157895 26.947368h269.473685v-53.894736H538.947368v-161.684211h161.684211v-53.894737H411.001263c12.045474-33.28 20.156632-69.793684 20.156632-107.789473h-53.894737c0 121.963789-105.364211 233.391158-106.415158 234.496l38.858105 37.349052c2.883368-3.018105 43.816421-46.133895 77.392842-110.160842H485.052632v161.684211H215.578947v53.894736h269.473685v323.368421h53.894736V538.947368z" fill="#231F20" ></path></symbol><symbol id="icon-ox" viewBox="0 0 1025 1024"><path d="M540.294737 754.526316h215.578947c20.210526 0 35.112421 1.374316 53.894737 4.581052 91.863579 15.656421 145.354105 67.691789 161.684211 86.069895V916.210526h53.894736V635.580632l-7.895579-7.895579c-9.269895-9.269895-36.513684-49.232842-44.032-196.527158H540.294737a161.684211 161.684211 0 0 0-161.684211 161.68421v131.098948c43.304421 20.210526 97.28 30.585263 161.684211 30.585263z" fill="#FFAF6E" ></path><path d="M1025.347368 635.580632V916.210526h-53.894736v-71.033263c-16.330105-18.405053-69.820632-70.413474-161.684211-86.069895V916.210526h-53.894737v-161.68421h-107.789473v215.578947h-53.894737V700.631579h161.68421c100.998737 0 172.570947 38.669474 215.578948 71.868632v-115.738948c-33.684211-43.627789-51.712-137.458526-53.706106-279.498105H701.978947c-76.934737 0-127.218526-26.219789-175.804631-51.550316a1556.048842 1556.048842 0 0 0-26.839579-13.743158c-26.839579 26.004211-66.209684 44.921263-115.738948 55.511579 24.441263 22.986105 60.874105 52.116211 106.469053 72.838737l-22.312421 49.044211c-76.584421-34.816-129.589895-88.926316-150.824421-113.125053-10.644211 0.619789-21.477053 1.024-32.687158 1.024a473.734737 473.734737 0 0 1-123.365053-15.952842l-93.022315 186.314105 68.581052 53.86779C167.882105 579.557053 237.891368 538.947368 324.715789 538.947368v53.894737c-95.986526 0-170.361263 62.490947-171.088842 63.137684l-16.78821 14.282106-136.838737-107.358316 109.729684-219.809684C46.430316 314.448842 1.347368 267.371789 1.347368 199.868632 1.347368 89.815579 121.586526 53.894737 163.031579 53.894737v53.894737c-14.120421 0-107.789474 17.165474-107.789474 92.079158C55.242105 290.465684 192.188632 323.368421 284.240842 323.368421c67.907368 0 122.421895-12.988632 157.696-35.624421-42.711579-14.336-95.097263-23.120842-169.337263-18.324211l-3.503158-53.786947c95.878737-6.117053 160.148211 8.515368 211.429053 28.833684C484.244211 235.439158 486.4 225.818947 486.4 215.578947c0-48.855579-57.829053-76.288-58.394947-76.557473l22.393263-49.017263C454.063158 91.648 540.294737 131.826526 540.294737 215.578947c0 18.566737-3.422316 35.84-9.997474 51.631158 7.060211 3.584 13.985684 7.168 20.776421 10.698106C597.854316 302.322526 638.248421 323.368421 701.978947 323.368421h269.473685v26.947368c0 214.689684 35.220211 266.590316 45.999157 277.369264l7.895579 7.895579z m-729.384421 25.141894l-98.789052 118.541474 86.797473 137.835789 45.594948-28.725894-65.913263-104.690527 37.052631-44.43621C358.642526 785.192421 439.080421 808.421053 540.294737 808.421053v-53.894737c-99.893895 0-175.077053-24.549053-223.474526-72.946527l-20.857264-20.857263z" fill="#231F20" ></path></symbol><symbol id="icon-rabbit_mao" viewBox="0 0 1024 1024"><path d="M512 512m-296.421053 0a296.421053 296.421053 0 1 0 592.842106 0 296.421053 296.421053 0 1 0-592.842106 0Z" fill="#7DD47F" ></path><path d="M970.105263 512c0 224.983579-163.166316 412.186947-377.263158 450.533053v-54.460632C777.135158 870.507789 916.210526 707.206737 916.210526 512c0-222.881684-181.328842-404.210526-404.210526-404.210526S107.789474 289.118316 107.789474 512s181.328842 404.210526 404.210526 404.210526c9.081263 0 18.000842-0.754526 26.947368-1.374315v53.894736c-8.973474 0.538947-17.866105 1.374316-26.947368 1.374316-252.604632 0-458.105263-205.500632-458.105263-458.105263S259.395368 53.894737 512 53.894737s458.105263 205.500632 458.105263 458.105263z m-377.263158-188.631579h107.789474v323.368421c-20.48 0-39.936-11.264-40.016842-11.317895l-27.728842 46.214737c3.206737 1.940211 32.660211 18.997895 67.745684 18.997895 30.746947 0 53.894737-23.147789 53.894737-53.894737V269.473684h-215.578948v538.947369h53.894737V323.368421z m-107.789473 242.526316v-242.526316h-53.894737v196.904421l-107.789474 40.421053v-243.927579l169.094737-48.316632-14.821053-51.819789L269.473684 276.102737v304.801684l-36.405895 13.662316 18.917053 50.472421 178.741895-67.018105c-5.039158 69.928421-55.269053 106.981053-165.133474 122.933894l7.733895 53.328842C325.712842 746.657684 485.052632 723.536842 485.052632 565.894737z" fill="#231F20" ></path></symbol><symbol id="icon-rabbit" viewBox="0 0 1024 1024"><path d="M680.96 488.744421a1666.667789 1666.667789 0 0 0-54.433684-23.95621c-16.006737 12.234105-33.899789 20.264421-60.631579 20.264421h-80.842105c-36.810105 0-83.644632 30.396632-104.394106 67.772631-42.819368 77.123368-53.409684 117.813895-11.021473 201.701053C397.096421 808.879158 431.157895 876.409263 431.157895 970.105263h338.539789l68.338527-138.859789c20.129684-40.96 24.252632-73.701053 24.252631-110.349474 0.026947-57.397895-25.061053-159.717053-181.328842-232.151579z" fill="#FFBDD8" ></path><path d="M862.315789 720.896c0 36.621474-4.122947 69.389474-24.252631 110.349474L769.697684 970.105263H485.052632v-53.894737h48.370526C507.877053 880.074105 485.052632 833.509053 485.052632 781.473684c0-59.418947 24.171789-113.313684 63.218526-152.360421l38.103579 38.103579A161.091368 161.091368 0 0 0 538.947368 781.473684c0 54.784 35.381895 104.043789 63.514948 134.736842h133.712842l53.490526-108.759579c15.710316-31.851789 18.755368-55.834947 18.755369-86.554947 0-80.976842-63.434105-150.096842-178.607158-195.503158-17.542737 8.138105-38.292211 13.554526-63.919158 13.554526h-80.842105c-13.958737 0-43.924211 15.979789-57.290106 40.016843l-47.104-26.165895C401.408 515.449263 448.242526 485.052632 485.052632 485.052632h80.842105c37.268211 0 57.478737-15.440842 79.090526-36.45979C625.367579 336.195368 549.753263 269.473684 485.052632 269.473684h-107.789474a21.288421 21.288421 0 0 0-5.955369 2.021053A683.762526 683.762526 0 0 0 302.187789 194.021053c-35.84-34.223158-61.763368-58.933895-94.908631-79.440842A42.442105 42.442105 0 0 0 185.478737 107.789474a22.824421 22.824421 0 0 0-17.381053 7.194947c-10.913684 11.425684-6.063158 28.240842 1.428211 39.181474 21.989053 32.121263 47.912421 56.858947 83.752421 91.109052 20.614737 19.671579 49.259789 43.169684 77.392842 63.08379C281.007158 367.400421 215.578947 484.432842 215.578947 592.842105c0 74.482526 24.791579 124.065684 51.065264 176.586106C294.534737 825.209263 323.368421 882.903579 323.368421 970.105263h-53.894737c0-74.482526-24.791579-124.065684-51.065263-176.586105C190.517895 737.738105 161.684211 680.043789 161.684211 592.842105c0-90.866526 42.226526-197.685895 93.453473-274.485894a803.759158 803.759158 0 0 1-39.046737-34.115369C177.852632 247.754105 150.231579 221.399579 125.035789 184.616421c-24.441263-35.759158-22.797474-78.686316 4.069053-106.819368 26.300632-27.567158 70.898526-31.043368 106.522947-9.000421 37.941895 23.444211 65.562947 49.798737 103.774316 86.258526 9.970526 9.512421 33.037474 32.309895 56.93979 60.550737h68.634947c-27.621053-37.780211-60.416-72.730947-88.522105-99.543579-28.833684-27.540211-54.730105-52.116211-84.533895-74.024421L326.305684 0.296421c31.232 23.228632 57.802105 48.532211 87.309474 76.719158 53.840842 51.388632 94.450526 100.594526 121.74821 146.83621 82.836211 26.650947 150.042947 116.870737 165.025685 230.750316l1.724631 13.177263-9.404631 9.404632c-3.772632 3.772632-7.706947 7.653053-11.802948 11.587368C837.227789 561.178947 862.315789 663.498105 862.315789 720.896zM309.463579 754.526316c3.934316 8.057263 7.895579 16.087579 11.991579 24.144842C348.887579 832.970105 377.263158 889.128421 377.263158 970.105263h53.894737c0-93.696-34.061474-161.226105-61.520842-215.578947h-60.173474z m597.90821 53.894737c-3.422316 9.404632-7.814737 19.806316-13.770105 31.959579L829.790316 970.105263h60.065684l52.143158-105.957052c10.778947-21.935158 17.515789-40.016842 21.90821-55.727158h-56.535579zM514.694737 390.736842c0-34.223158-13.231158-44.463158-29.642105-44.463158s-29.642105 10.24-29.642106 44.463158c0 34.250105 13.231158 44.463158 29.642106 44.463158s29.642105-10.213053 29.642105-44.463158z" fill="#231F20" ></path></symbol><symbol id="icon-rat_zi" viewBox="0 0 1024 1024"><path d="M512 512m-296.421053 0a296.421053 296.421053 0 1 0 592.842106 0 296.421053 296.421053 0 1 0-592.842106 0Z" fill="#85C3DE" ></path><path d="M970.105263 512c0 224.983579-163.166316 412.186947-377.263158 450.533053v-54.460632C777.135158 870.507789 916.210526 707.206737 916.210526 512c0-222.881684-181.328842-404.210526-404.210526-404.210526S107.789474 289.118316 107.789474 512s181.328842 404.210526 404.210526 404.210526c9.081263 0 18.000842-0.754526 26.947368-1.374315v53.894736c-8.973474 0.538947-17.866105 1.374316-26.947368 1.374316-252.604632 0-458.105263-205.500632-458.105263-458.105263S259.395368 53.894737 512 53.894737s458.105263 205.500632 458.105263 458.105263z m-431.157895 188.631579v-215.578947h269.473685v-53.894737H538.947368v-39.585684c26.543158-18.081684 94.585263-65.050947 177.852632-127.488L700.631579 215.578947H323.368421v53.894737h295.316211a4221.008842 4221.008842 0 0 1-121.640421 85.369263l-11.991579 8.003369V431.157895H242.526316v53.894737h242.526316v215.578947c0 48.343579-13.850947 53.894737-134.736843 53.894737v53.894737c105.391158 0 188.631579 0 188.631579-107.789474z" fill="#231F20" ></path></symbol><symbol id="icon-rat" viewBox="0 0 1024 1024"><path d="M727.659789 431.157895c-132.581053 0-220.348632 47.454316-285.803789 154.354526-19.779368 32.309895-15.845053 76.503579-9.404632 96.579368 3.260632 10.159158 7.760842 18.647579 12.422737 25.546106C464.761263 737.010526 499.927579 754.526316 538.947368 754.526316h66.829474c1.158737 17.893053-1.967158 34.762105-15.144421 53.975579-12.692211 18.539789-37.807158 40.151579-56.32 54.810947 25.249684-0.673684 52.709053-0.997053 83.240421-0.997053C877.487158 862.315789 970.105263 711.922526 970.105263 571.176421 936.421053 512 882.364632 431.157895 727.659789 431.157895z" fill="#85C3DE" ></path><path d="M210.432 1012.897684l-43.573895-31.690105c106.954105-147.051789 185.317053-171.196632 423.828211-172.705684 21.396211-31.258947 16.249263-56.266105 9.377684-89.70779-3.557053-17.138526-7.221895-34.842947-7.221895-54.433684 0-68.958316 25.330526-104.636632 63.407158-136.973474l34.896842 41.040842c-29.453474 25.061053-44.409263 46.780632-44.409263 95.932632 0 14.093474 2.937263 28.402526 6.063158 43.546947 5.901474 28.510316 12.8 62.032842-1.131789 99.462737 166.373053-10.24 264.542316-96.902737 264.542315-236.193684C916.210526 418.330947 827.580632 323.368421 684.921263 323.368421c-83.644632 0-153.303579 29.696-174.187789 39.612632a224.875789 224.875789 0 0 1-20.533895 31.339789l-41.741474-34.115368 20.884211 17.057684-20.911158-16.976842C448.781474 359.828211 485.052632 314.287158 485.052632 262.736842c0-34.816-8.946526-60.766316-26.570106-77.069474-17.515789-16.249263-44.786526-24.602947-81.219368-24.953263V323.368421h-53.894737V109.783579l24.872421-1.913263c64.700632-4.931368 114.095158 7.895579 146.863158 38.238316C524.207158 173.056 538.947368 212.291368 538.947368 262.736842c0 11.102316-1.131789 21.908211-3.072 32.202105 37.268211-12.584421 89.842526-25.465263 149.045895-25.465263C858.165895 269.473684 970.105263 387.907368 970.105263 571.176421 970.105263 711.922526 877.487158 862.315789 617.552842 862.315789c-258.667789 0-311.942737 19.698526-407.120842 150.581895z m19.105684-256.835368c-12.045474 0-24.387368-0.565895-37.025684-1.64379l-22.096842-1.859368-2.425263-22.016C167.747368 728.144842 161.684211 672.444632 161.684211 631.026526c0-103.585684 21.450105-178.903579 53.894736-259.045052V107.789474h53.894737v274.782315l-2.021052 4.904422C235.439158 465.758316 215.578947 533.800421 215.578947 631.026526c0 22.878316 2.101895 51.442526 3.826527 70.979369 99.678316 2.802526 172.813474-35.408842 222.450526-116.493474l48.020211 24.090947c-11.237053 28.133053-11.371789 51.577263-0.377264 67.853474 9.701053 14.282105 28.645053 23.174737 49.448421 23.174737v53.894737c-39.019789 0-74.186105-17.515789-94.073263-46.888421a100.244211 100.244211 0 0 1-12.422737-25.546106c-53.221053 49.178947-121.128421 73.943579-202.913684 73.970527zM379.957895 525.473684c0-34.223158-13.231158-44.463158-29.642106-44.463158s-29.642105 10.24-29.642105 44.463158c0 34.250105 13.231158 44.463158 29.642105 44.463158s29.642105-10.213053 29.642106-44.463158z" fill="#231F20" ></path></symbol><symbol id="icon-rooster_you" viewBox="0 0 1024 1024"><path d="M512 512m-296.421053 0a296.421053 296.421053 0 1 0 592.842106 0 296.421053 296.421053 0 1 0-592.842106 0Z" fill="#BBC4C9" ></path><path d="M970.105263 512c0 224.983579-163.166316 412.186947-377.263158 450.533053v-54.460632C777.135158 870.507789 916.210526 707.206737 916.210526 512c0-222.881684-181.328842-404.210526-404.210526-404.210526S107.789474 289.118316 107.789474 512s181.328842 404.210526 404.210526 404.210526c9.081263 0 18.000842-0.754526 26.947368-1.374315v53.894736c-8.973474 0.538947-17.866105 1.374316-26.947368 1.374316-252.604632 0-458.105263-205.500632-458.105263-458.105263S259.395368 53.894737 512 53.894737s458.105263 205.500632 458.105263 458.105263z m-215.578947-188.631579h-161.684211v-26.947368h161.684211V242.526316H269.473684v53.894737h161.684211v26.947368h-161.684211v485.052632h53.894737v-53.894737h377.263158v53.894737h53.894737V323.368421zM323.368421 646.736842h377.263158v53.894737H323.368421v-53.894737z m0-269.473684h107.789474c0 103.316211-72.784842 107.654737-81.084632 107.789474L350.315789 538.947368c46.592 0 134.736842-33.792 134.736843-161.68421h53.894736v107.789474c0 29.722947 24.171789 53.894737 53.894737 53.894736h107.789474v53.894737H323.368421v-215.578947z m377.263158 0v107.789474h-107.789474v-107.789474h107.789474z m-215.578947-80.842105h53.894736v26.947368h-53.894736v-26.947368z" fill="#231F20" ></path></symbol><symbol id="icon-rooster" viewBox="0 0 1024 1024"><path d="M891.688421 506.421895C877.244632 455.033263 862.315789 401.893053 862.315789 323.368421V116.224l-323.368421 195.745684V323.368421c0 78.524632 14.928842 131.664842 29.372632 183.053474 12.611368 44.894316 24.522105 87.282526 24.522105 140.314947 0 101.618526-77.931789 176.693895-168.286316 203.991579l5.416422 11.587368h215.578947c24.333474 0 43.385263-0.242526 58.556631-2.128842C811.52 846.821053 916.210526 764.550737 916.210526 646.736842c0-53.032421-11.910737-95.420632-24.522105-140.314947z" fill="#FF8787" ></path><path d="M673.684211 354.357895c-16.384 0-29.642105-10.213053-29.642106-44.463158 0-34.223158 13.231158-44.463158 29.642106-44.463158s29.642105 10.24 29.642105 44.463158c0 34.250105-13.258105 44.463158-29.642105 44.463158zM540.106105 970.105263l-50.58021-107.789474h156.05221l50.607158 107.789474h59.553684l-51.60421-109.918316C811.52 846.821053 916.210526 764.550737 916.210526 646.736842c0-53.032421-11.910737-95.420632-24.522105-140.314947C877.244632 455.033263 862.315789 401.893053 862.315789 323.368421V107.789474c0-59.445895-48.343579-107.789474-107.789473-107.789474a107.924211 107.924211 0 0 0-107.789474 106.172632 100.890947 100.890947 0 0 0-24.117895-3.314527 88.710737 88.710737 0 0 0-88.602947 88.602948c0 20.668632 5.227789 39.720421 10.671158 53.921684l-99.489684 59.688421 93.749894 14.470737V377.263158c0 14.416842-5.901474 21.692632-33.360842 49.152l-11.129263 11.129263C398.228211 326.521263 324.985263 269.473684 215.740632 269.473684 96.768 269.473684 0 366.241684 0 485.214316V646.736842h53.894737v-161.522526A162.007579 162.007579 0 0 1 215.740632 323.368421c82.081684 0 140.422737 36.244211 240.64 152.252632l-38.615579 38.615579C367.804632 461.285053 323.098947 431.157895 259.584 431.157895A151.983158 151.983158 0 0 0 107.789474 582.952421V754.526316h53.894737v-171.573895A98.007579 98.007579 0 0 1 259.584 485.052632c46.322526 0 79.629474 20.911158 137.027368 86.016l18.970948 21.530947 128.080842-128.080842C572.200421 435.981474 592.842105 415.366737 592.842105 377.263158v-97.926737l23.309474-14.120421-13.662316-23.04c-0.161684-0.242526-14.578526-24.899368-14.578526-50.688 0-19.132632 15.575579-34.708211 34.70821-34.708211 5.093053 0 26.785684 3.179789 39.558737 18.647579l26.327579 46.026106 39.774316-24.090948-20.372211-49.367579C704.754526 140.449684 700.631579 117.517474 700.631579 107.789474c0-29.722947 24.171789-53.894737 53.894737-53.894737s53.894737 24.171789 53.894737 53.894737v215.578947c0 85.935158 16.680421 145.300211 31.366736 197.632C851.887158 564.008421 862.315789 601.141895 862.315789 646.736842c0 95.285895-99.408842 161.684211-188.631578 161.684211h-209.461895l-68.419369-145.704421C375.242105 618.954105 338.108632 592.842105 296.448 592.842105A80.976842 80.976842 0 0 0 215.578947 673.711158V862.315789h53.894737v-188.604631c0-14.874947 12.099368-26.974316 26.974316-26.974316 20.533895 0 38.965895 14.147368 50.553263 38.858105L480.579368 970.105263h59.526737z" fill="#231F20" ></path></symbol><symbol id="icon-snake_si" viewBox="0 0 1024 1024"><path d="M512 512m-296.421053 0a296.421053 296.421053 0 1 0 592.842106 0 296.421053 296.421053 0 1 0-592.842106 0Z" fill="#FF8787" ></path><path d="M970.105263 512c0 224.983579-163.166316 412.186947-377.263158 450.533053v-54.460632C777.135158 870.507789 916.210526 707.206737 916.210526 512c0-222.881684-181.328842-404.210526-404.210526-404.210526S107.789474 289.118316 107.789474 512s181.328842 404.210526 404.210526 404.210526c9.081263 0 18.000842-0.754526 26.947368-1.374315v53.894736c-8.973474 0.538947-17.866105 1.374316-26.947368 1.374316-252.604632 0-458.105263-205.500632-458.105263-458.105263S259.395368 53.894737 512 53.894737s458.105263 205.500632 458.105263 458.105263z m-242.041263 180.762947l-52.116211-13.797052C657.219368 749.864421 651.425684 754.526316 619.789474 754.526316h-242.526316V485.052632h269.473684v53.894736h53.894737V215.578947H323.368421v538.947369c0 29.722947 24.171789 53.894737 53.894737 53.894737h242.526316c77.689263 0 91.189895-51.065263 108.274526-115.658106zM377.263158 269.473684h269.473684v161.684211H377.263158v-161.684211z" fill="#231F20" ></path></symbol><symbol id="icon-tiger_yin" viewBox="0 0 1024 1024"><path d="M512 512m-296.421053 0a296.421053 296.421053 0 1 0 592.842106 0 296.421053 296.421053 0 1 0-592.842106 0Z" fill="#7DD47F" ></path><path d="M970.105263 512c0 224.983579-163.166316 412.186947-377.263158 450.533053v-54.460632C777.135158 870.507789 916.210526 707.206737 916.210526 512c0-222.881684-181.328842-404.210526-404.210526-404.210526S107.789474 289.118316 107.789474 512s181.328842 404.210526 404.210526 404.210526c9.081263 0 18.000842-0.754526 26.947368-1.374315v53.894736c-8.973474 0.538947-17.866105 1.374316-26.947368 1.374316-252.604632 0-458.105263-205.500632-458.105263-458.105263S259.395368 53.894737 512 53.894737s458.105263 205.500632 458.105263 458.105263z m-257.42821 299.250526l-107.789474-53.894737-24.117895 48.208843 107.789474 53.894736 24.117895-48.208842z m-269.473685-5.658947l-24.117894-48.208842-107.789474 53.894737 24.117895 48.208842 107.789473-53.894737zM700.631579 431.157895h-161.684211v-53.894737h107.789474v-53.894737H377.263158v53.894737h107.789474v53.894737h-161.684211v323.368421h53.894737v-53.894737h269.473684v53.894737h53.894737V431.157895z m-161.684211 161.68421h107.789474v53.894737h-107.789474v-53.894737z m-161.68421 0h107.789474v53.894737h-107.789474v-53.894737z m161.68421-107.789473h107.789474v53.894736h-107.789474v-53.894736z m-161.68421 0h107.789474v53.894736h-107.789474v-53.894736zM754.526316 215.578947h-223.097263l-20.803369-62.410105-51.119158 17.057684L474.624 215.578947H269.473684v107.789474h53.894737v-53.894737h377.263158v53.894737h53.894737V215.578947z" fill="#231F20" ></path></symbol><symbol id="icon-snake" viewBox="0 0 1024 1024"><path d="M107.789474 790.474105c0-72.434526 67.880421-91.513263 121.451789-91.513263 74.401684 0 153.815579 34.438737 237.891369 70.925474 50.580211 21.935158 104.609684 45.325474 162.250105 63.083789-52.412632 44.786526-118.784 74.347789-195.152842 83.078737-143.171368 16.357053-326.440421 7.006316-326.440421-125.574737zM377.263158 215.578947c-15.575579 0-30.288842 3.449263-43.654737 9.377685A250.691368 250.691368 0 0 0 323.368421 296.421053c0 115.550316 76.422737 169.391158 137.83579 212.614736 8.138105 5.712842 16.141474 11.371789 23.848421 17.057685V323.368421a107.789474 107.789474 0 0 0-107.789474-107.789474z" fill="#C3D686" ></path><path d="M671.528421 788.857263c44.328421 11.964632 89.626947 19.563789 136.892632 19.56379 89.168842 0 161.684211-60.442947 161.68421-134.736842s-72.515368-134.736842-161.68421-134.736843c-19.078737 0-37.025684 1.509053-54.218106 4.015158-0.754526-101.402947-38.211368-172.355368-79.413894-219.648L673.684211 323.368421a1749.962105 1749.962105 0 0 1-79.036632-1.751579c45.702737 35.866947 108.705684 107.870316 105.984 232.367158 0 0.431158-0.080842 0.808421-0.10779 1.239579-34.923789 10.994526-66.155789 26.731789-95.097263 45.190737a163.085474 163.085474 0 0 0-15.845052-42.388211c-21.557895-39.639579-60.065684-66.775579-97.360842-93.022316C433.098105 423.343158 377.263158 384 377.263158 296.421053c0-130.290526 108.274526-188.631579 215.578947-188.631579 64.134737 0 132.715789 12.045474 214.366316 37.807158C802.330947 180.250947 780.099368 209.381053 700.631579 214.635789V161.684211h-53.894737v53.679157c-63.272421-1.024-104.528842-5.200842-104.986947-5.254736l-5.578106 53.598315C538.408421 263.949474 592.357053 269.473684 673.684211 269.473684c125.170526 0 188.631579-48.128 188.631578-143.063579V106.981053l-18.432-6.144C747.789474 68.823579 668.025263 53.894737 592.842105 53.894737c-158.666105 0-269.473684 99.732211-269.473684 242.526316 0 115.550316 76.422737 169.391158 137.83579 212.614736 33.684211 23.713684 65.509053 46.106947 81.003789 74.698106 9.539368 17.542737 13.285053 33.414737 12.341895 47.750737 21.153684 9.108211 42.118737 17.839158 62.949052 25.977263C671.151158 620.193684 729.977263 592.842105 808.421053 592.842105c59.445895 0 107.789474 36.271158 107.789473 80.842106s-48.343579 80.842105-107.789473 80.842105c-105.472 0-203.237053-42.388211-297.768421-83.429053-94.800842-41.094737-184.346947-79.952842-281.411369-79.952842C122.718316 591.171368 53.894737 644.715789 53.894737 727.578947c0 79.063579 67.098947 136.434526 159.555368 136.434527 142.174316 0 230.426947-66.883368 306.79579-129.886316 31.420632 13.419789 62.787368 26.058105 94.450526 37.133474-47.077053 49.637053-110.969263 82.566737-186.610526 91.270736l5.066105 53.625264c93.453474-7.006316 143.144421 9.350737 195.718737 26.543157 46.457263 15.225263 94.127158 30.854737 169.822316 30.854737 19.994947 0 41.957053-1.077895 66.344421-3.557052l-5.416421-53.625263c-105.283368 10.778947-158.100211-6.548211-213.935158-24.872422-22.150737-7.275789-44.624842-14.632421-70.305684-20.345263a334.848 334.848 0 0 0 96.14821-82.297263z m-458.078316 21.261474C162.573474 810.118737 107.789474 784.276211 107.789474 727.578947c0-60.847158 62.733474-82.539789 121.451789-82.539789 77.850947 0 154.731789 30.288842 235.250526 64.943158-66.263579 52.924632-139.722105 100.136421-251.041684 100.136421z" fill="#231F20" ></path></symbol><symbol id="icon-tiger" viewBox="0 0 1024 1024"><path d="M431.157895 162.250105V134.736842c0-41.552842-39.289263-80.842105-80.842106-80.842105-28.833684 0-57.128421 4.661895-58.314105 4.850526L269.473684 62.490947v83.887158C144.788211 223.824842 89.222737 346.839579 66.991158 431.157895h266.051368c240.747789 0 415.851789 107.789474 415.85179 269.473684-14.848-25.114947-43.924211-53.894737-88.68379-53.894737-67.988211 0-121.263158 71.033263-121.263158 161.684211 0 66.802526 30.477474 119.888842 60.712421 156.16 12.638316 15.171368 36.055579 37.726316 59.014737 58.88 5.066105 0.107789 9.781895 0.538947 15.009685 0.538947 219.297684 0 350.315789-191.811368 350.315789-377.263158C1024 327.545263 679.855158 172.813474 431.157895 162.250105z" fill="#F7C768" ></path><path d="M673.684211 1024c-114.768842 0-188.820211-33.333895-254.167579-62.787368-53.625263-24.144842-99.974737-45.002105-161.28-45.002106-40.448 0-83.590737 23.255579-103.639579 45.16379l-39.747369-36.432842C142.497684 894.787368 199.168 862.315789 258.236632 862.315789c68.392421 0 119.861895 21.288421 172.921263 45.056V673.684211c0-35.166316-17.542737-64.107789-30.639158-80.815158-15.198316 9.835789-32.067368 18.890105-50.741895 26.947368l-21.342316-49.475368C469.800421 509.413053 485.052632 377.317053 485.052632 323.368421V221.642105A597.827368 597.827368 0 0 0 404.210526 215.578947h-26.947368V134.736842c0-12.099368-14.848-26.947368-26.947369-26.947368-9.377684 0-18.836211 0.592842-26.947368 1.347368V269.473684h-53.894737V211.671579c-136.030316 102.912-158.450526 266.886737-161.306947 295.882105 9.135158 9.108211 38.992842 25.061053 71.976421 38.669474l38.103579-59.365053 12.449684-1.589894C321.212632 473.653895 377.263158 392.192 377.263158 323.368421h53.894737c0 88.333474-68.796632 192.242526-180.870737 213.342316l-48.397474 75.398737-20.291368-7.437474C53.894737 557.756632 53.894737 523.317895 53.894737 512c0-50.041263 37.025684-254.733474 215.578947-365.621895V62.490947l22.528-3.745684C293.187368 58.556632 321.482105 53.894737 350.315789 53.894737c41.552842 0 80.842105 39.289263 80.842106 80.842105v27.513263c248.697263 10.563368 592.842105 165.295158 592.842105 484.486737 0 185.451789-131.018105 377.263158-350.315789 377.263158z m-13.473685-323.368421c-36.513684 0-67.368421 49.367579-67.368421 107.789474 0 85.746526 68.096 145.084632 89.465263 161.549473 91.540211-2.533053 164.378947-45.487158 213.827369-107.654737H700.631579v-53.894736h230.238316c8.919579-17.273263 16.357053-35.354947 22.285473-53.894737h-239.885473l-6.467369-17.650527C706.290526 735.582316 692.439579 700.631579 660.210526 700.631579zM485.052632 931.112421c33.926737 14.066526 70.521263 26.597053 114.607157 33.468632C569.424842 928.309895 538.947368 875.223579 538.947368 808.421053c0-90.650947 53.274947-161.684211 121.263158-161.684211 44.759579 0 73.835789 28.779789 88.68379 53.894737h217.007158c2.775579-17.866105 4.203789-35.920842 4.203789-53.894737 0-38.938947-5.658947-74.752-15.925895-107.627789l-126.706526 126.679579-38.103579-38.103579L932.001684 485.052632a367.939368 367.939368 0 0 0-57.775158-81.596632l-154.543158 154.543158-38.103579-38.103579 153.573053-153.573053a537.869474 537.869474 0 0 0-82.593684-56.751158l-140.665263 140.638316-38.103579-38.103579 128.134737-128.134737A794.731789 794.731789 0 0 0 538.947368 231.046737V323.368421c0 50.149053-11.102316 156.698947-95.932631 236.328421 18.378105 23.417263 42.037895 63.407158 42.037895 113.987369v257.42821zM215.578947 431.157895v-53.894737c39.774316 0 53.894737-29.022316 53.894737-53.894737h53.894737c0 53.571368-37.025684 107.789474-107.789474 107.789474z" fill="#231F20" ></path></symbol><symbol id="icon-boar" viewBox="0 0 1024 1024"><path d="M732.079158 377.263158c-107.789474 0-186.421895 31.393684-281.869474 126.841263L180.331789 773.982316C257.724632 807.909053 348.725895 808.421053 485.052632 808.421053h96.013473c55.834947-34.411789 133.551158-53.894737 227.354948-53.894737h121.344L970.105263 680.555789V572.631579c0-94.315789-130.236632-195.368421-238.026105-195.368421z" fill="#FFBDD8" ></path><path d="M808.421053 700.631579v53.894737c-196.446316 0-323.368421 84.641684-323.368421 215.578947h-53.894737c0-163.705263 148.075789-269.473684 377.263158-269.473684z m-323.368421 107.789474v-53.894737c-158.342737 0-245.598316 0-319.649685-49.367579L158.612211 700.631579H80.842105c-21.692632 0-26.624-14.821053-26.947368-26.947368v-82.620632c84.156632-11.183158 161.684211-74.913684 161.68421-186.853053V215.578947H161.684211v161.684211H134.736842c-66.964211 0-134.736842 37.025684-134.736842 107.789474h53.894737c0-42.630737 52.870737-53.894737 80.842105-53.894737h24.629895C147.132632 504.912842 85.153684 538.947368 26.947368 538.947368H0v134.736843c0 32.498526 21.530947 80.842105 80.842105 80.842105h61.682527c32.687158 20.506947 67.125895 33.145263 105.957052 41.013895A232.879158 232.879158 0 0 0 215.578947 916.210526h53.894737c0-41.930105 14.012632-80.303158 39.424-112.505263C358.885053 808.151579 415.959579 808.421053 485.052632 808.421053z m-72.946527-342.420211L323.368421 554.738526V431.157895h-53.894737v253.682526l180.736-180.736-38.103579-38.103579zM323.368421 161.684211h-53.894737v190.032842a769.536 769.536 0 0 1 53.894737-49.098106V161.684211z m323.368421-53.894737c-72.623158 0-146.809263 23.336421-215.578947 58.637473V107.789474h-53.894737v154.138947C458.832842 205.392842 555.331368 161.684211 646.736842 161.684211c148.587789 0 269.473684 120.885895 269.473684 269.473684v235.654737L809.579789 862.315789h61.359158L970.105263 680.555789V431.157895c0-178.310737-145.057684-323.368421-323.368421-323.368421z" fill="#231F20" ></path></symbol><symbol id="icon-boar_hai" viewBox="0 0 1024 1024"><path d="M512 512m-296.421053 0a296.421053 296.421053 0 1 0 592.842106 0 296.421053 296.421053 0 1 0-592.842106 0Z" fill="#85C3DE" ></path><path d="M309.975579 804.756211l-27.136-46.592c103.073684-60.011789 183.026526-132.473263 241.475368-219.24379H350.315789l-13.473684-50.283789c58.88-33.980632 99.435789-117.571368 118.703158-165.295158H242.526316v-53.894737h538.947368v53.894737h-268.18021c-12.395789 34.088421-42.469053 106.603789-90.435369 161.68421h134.009263a680.555789 680.555789 0 0 0 46.349474-107.708631l51.092211 17.057684c-58.421895 175.265684-171.034947 309.490526-344.333474 410.381474z m192.350316-2.937264L467.806316 760.454737c88.414316-73.728 154.516211-158.773895 202.105263-259.907369l48.801684 22.959158a797.372632 797.372632 0 0 1-82.351158 137.781895c32.741053 15.009684 83.456 44.867368 137.647158 101.591579l-38.938947 37.268211c-57.236211-59.877053-109.325474-85.557895-133.766737-95.178106a850.997895 850.997895 0 0 1-98.977684 96.848842z m48.613052-536.872421l-80.842105-53.894737 29.884632-44.840421 80.842105 53.894737-29.884632 44.840421zM512 53.894737C259.395368 53.894737 53.894737 259.395368 53.894737 512s205.500632 458.105263 458.105263 458.105263c9.081263 0 17.973895-0.835368 26.947368-1.374316v-53.894736c-8.946526 0.619789-17.866105 1.374316-26.947368 1.374315-222.881684 0-404.210526-181.328842-404.210526-404.210526S289.118316 107.789474 512 107.789474s404.210526 181.328842 404.210526 404.210526c0 195.206737-139.075368 358.507789-323.368421 396.045474v54.460631c214.096842-38.346105 377.263158-225.549474 377.263158-450.533052C970.105263 259.395368 764.604632 53.894737 512 53.894737z" fill="#231F20" ></path></symbol><symbol id="icon-bilibili1" viewBox="0 0 1129 1024"><path d="M234.909 9.656a80.468 80.468 0 0 1 68.398 0 167.374 167.374 0 0 1 41.843 30.578l160.937 140.82h115.07l160.936-140.82a168.983 168.983 0 0 1 41.843-30.578A80.468 80.468 0 0 1 930.96 76.445a80.468 80.468 0 0 1-17.703 53.914 449.818 449.818 0 0 1-35.406 32.187 232.553 232.553 0 0 1-22.531 18.508h100.585a170.593 170.593 0 0 1 118.289 53.109 171.397 171.397 0 0 1 53.914 118.288v462.693a325.897 325.897 0 0 1-4.024 70.007 178.64 178.64 0 0 1-80.468 112.656 173.007 173.007 0 0 1-92.539 25.75H212.377a341.186 341.186 0 0 1-72.421-4.024A177.835 177.835 0 0 1 28.91 939.065a172.202 172.202 0 0 1-27.36-92.539V388.662a360.498 360.498 0 0 1 0-66.789A177.03 177.03 0 0 1 162.487 178.64h105.414c-16.899-12.07-31.383-26.555-46.672-39.43a80.468 80.468 0 0 1-25.75-65.984 80.468 80.468 0 0 1 39.43-63.57M216.4 321.873a80.468 80.468 0 0 0-63.57 57.937 108.632 108.632 0 0 0 0 30.578v380.615a80.468 80.468 0 0 0 55.523 80.469 106.218 106.218 0 0 0 34.601 5.632h654.208a80.468 80.468 0 0 0 76.444-47.476 112.656 112.656 0 0 0 8.047-53.109v-354.06a135.187 135.187 0 0 0 0-38.625 80.468 80.468 0 0 0-52.304-54.719 129.554 129.554 0 0 0-49.89-7.242H254.22a268.764 268.764 0 0 0-37.82 0z m0 0" fill="#20B0E3" ></path><path d="M348.369 447.404a80.468 80.468 0 0 1 55.523 18.507 80.468 80.468 0 0 1 28.164 59.547v80.468a80.468 80.468 0 0 1-16.094 51.5 80.468 80.468 0 0 1-131.968-9.656 104.609 104.609 0 0 1-10.46-54.719v-80.468a80.468 80.468 0 0 1 70.007-67.593z m416.02 0a80.468 80.468 0 0 1 86.102 75.64v80.468a94.148 94.148 0 0 1-12.07 53.11 80.468 80.468 0 0 1-132.773 0 95.757 95.757 0 0 1-12.875-57.133V519.02a80.468 80.468 0 0 1 70.007-70.812z m0 0" fill="#20B0E3" ></path></symbol><symbol id="icon-yinle" viewBox="0 0 1024 1024"><path d="M512.2976 0a531.2 531.2 0 0 0-512 548.48V960h128V548.48a398.72 398.72 0 0 1 384-411.52 398.72 398.72 0 0 1 384 411.52V960h128V548.48A531.2 531.2 0 0 0 512.2976 0z" fill="#5c8add" ></path><path d="M64.2976 576l256 0 0 448-256 0 0-448Z" fill="#5c8add" ></path><path d="M704.2976 576l256 0 0 448-256 0 0-448Z" fill="#5c8add" ></path></symbol><symbol id="icon-icon-test-copy" viewBox="0 0 1024 1024"><path d="M512 512m-229.517241 0a229.517241 229.517241 0 1 0 459.034482 0 229.517241 229.517241 0 1 0-459.034482 0Z" fill="#5c8add" ></path><path d="M512 1024A512 512 0 1 1 1024 512 512 512 0 0 1 512 1024z m0-141.241379A370.758621 370.758621 0 1 0 141.241379 512 370.758621 370.758621 0 0 0 512 882.758621z" fill="#5c8add" ></path></symbol><symbol id="icon-V" viewBox="0 0 1024 1024"><path d="M1012.47774251 492.58192592L544.94137566 87.22962963a49.96686561 49.96686561 0 0 0-65.88275132 0L11.63784127 492.6975097c-21.03624691 18.26223633-23.3479224 49.93219048-5.08568606 70.96843739 18.03106878 21.03624691 49.93219048 23.3479224 70.96843738 5.08568607L512 191.83294532l434.71057495 376.91868784c9.47786949 8.20644797 21.26741446 12.25188008 32.82579189 12.13629629 14.10122046 0 27.97127337-5.77918871 38.02706173-17.33756613 18.14665256-20.92066314 15.95056084-52.70620106-5.08568606-70.9684374z" fill="#5c8add" ></path><path d="M109.30613051 567.59579541V896.89396825c0 42.53482892 34.90629982 77.44112875 77.44112875 77.44112875h220.76500882V666.30433862c0-25.54401411 20.92066314-46.46467725 46.46467724-46.46467724h116.16169313c25.54401411 0 46.46467725 20.92066314 46.46467725 46.46467724V974.335097h220.76500882c42.53482892 0 77.44112875-34.90629982 77.44112874-77.44112875l0.11558377-329.29817284L512 218.18604586 109.30613051 567.59579541zM848.00203175 197.49655027h-63.91782716c-12.82979894 0-23.23233862 10.40253968-23.23233863 23.23233862v24.27259259l110.49808818 95.70336508V220.72888889h-0.11558377c0-12.82979894-10.40253968-23.23233862-23.23233862-23.23233862zM905.44716754 83.18419754s-34.90629982 56.86721693-89.11508994 100.32671603c152.68616579 13.98563668 127.83565432-133.26809171 127.83565432-133.2680917-134.07717813-10.28695591-132.92134039 102.29164021-131.072 127.83565432 20.92066314-20.92066314 49.70102293-62.64640564 92.35143562-94.89427865zM798.53217637 174.61096297c-19.64924162-16.52847972-40.56990476-43.45949912-51.203612-53.97762258 0 0 32.94137566 20.57391182 56.40488184 49.3542716 2.42725926-18.37782011 6.47269135-93.3916896-93.16052205-85.3008254 0 0-13.98563668 104.71889947 87.95925221 89.92417638z" fill="#5c8add" ></path></symbol><symbol id="icon-zhifeiji" viewBox="0 0 1167 1024"><path d="M41.201759 463.52493L1110.665064 30.117647c10.32605-4.159104 21.942857 0.860504 26.101961 11.043137 1.434174 3.728852 1.864426 7.744538 1.003921 11.616807L949.033691 978.823529c-2.151261 10.89972-12.764146 17.927171-23.663865 15.632493-2.72493-0.573669-5.306443-1.721008-7.601121-3.298599L634.80624 789.79944l-163.065546 133.951821c-16.492997 13.62465-40.87395 11.186555-54.498599-5.306443-3.011765-3.728852-5.306443-7.887955-6.884034-12.477311l-102.973669-313.080112-265.178712-91.787115c-10.469468-3.585434-16.062745-15.058824-12.333893-25.528291 1.864426-5.44986 6.023529-9.895798 11.329972-12.047059z" fill="#FCFDFC" ></path><path d="M929.385512 1023.569748c-3.155182 0-6.453782-0.286835-9.752381-1.003922-6.740616-1.434174-12.907563-4.015686-18.50084-8.031372L635.953579 825.940616l-146.142297 120.040336c-13.911485 11.473389-31.408403 16.779832-49.335574 15.058824-17.927171-1.721008-34.133333-10.32605-45.463305-24.237535-5.306443-6.453782-9.322129-13.768067-11.903642-21.79944l-98.527731-299.598879-251.697479-87.19776c-12.333894-4.302521-22.229692-13.05098-27.966386-24.811204s-6.453782-24.954622-2.151261-37.288515c4.589356-13.337815 14.771989-23.9507 27.82297-29.257143L1099.908761 3.585434c24.954622-10.039216 53.351261 2.007843 63.533894 26.819048 3.585434 8.891877 4.445938 18.644258 2.581513 28.109804L977.143495 984.560224c-4.732773 23.090196-25.098039 39.009524-47.757983 39.009524z m-294.579272-233.770308l282.962465 201.357983c2.294678 1.577591 4.87619 2.72493 7.601121 3.298599 10.89972 2.151261 21.512605-4.87619 23.663865-15.632493L1137.914364 52.777591c0.860504-3.872269 0.430252-7.887955-1.003922-11.616807-4.159104-10.32605-15.919328-15.202241-26.101961-11.043137L41.201759 463.52493c-5.306443 2.151261-9.465546 6.597199-11.47339 12.047059-1.721008 5.019608-1.434174 10.469468 0.860505 15.345658 2.294678 4.87619 6.453782 8.461625 11.473389 10.182633l265.178711 91.787115L410.214644 905.967507c1.434174 4.589356 3.872269 8.748459 6.884033 12.477311 6.597199 8.031373 15.919328 12.907563 26.101961 13.911485 10.32605 1.003922 20.365266-2.007843 28.396639-8.605042l163.208963-133.951821z" fill="#4A4A4A" ></path><path d="M307.097557 592.743978l105.698599 316.091876c6.310364 18.787675 26.532213 28.970308 45.319888 22.659944 4.159104-1.434174 7.887955-3.442017 11.186555-6.166946l164.786555-133.951821-165.360224-118.892997c297.017367-287.982073 447.462185-433.980952 451.191036-437.853222 0.573669-0.573669 2.581513-3.442017 0.430252-7.027451-1.290756-1.577591-3.298599-3.298599-7.027451-2.15126-202.218487 120.327171-404.293557 242.805602-606.22521 367.291877z" fill="#CAE0EE" ></path><path d="M446.786072 934.794398c-5.736695 0-11.329972-1.290756-16.636414-3.872269-8.891877-4.445938-15.632493-12.047059-18.787675-21.512605L305.376549 592.313725l1.003921-0.573669C507.308201 467.684034 711.391114 344.058263 912.60568 224.161345l0.286835-0.143418c3.585434-1.147339 6.310364-0.286835 8.605042 2.581513l0.143417 0.143417c2.438095 4.015686 0.573669 7.457703-0.573669 8.74846-3.872269 4.015686-155.177591 150.87507-450.043698 436.705882l165.503642 119.036414-166.220728 135.09916c-3.442017 2.868347-7.457703 5.019608-11.760225 6.453782-3.728852 1.290756-7.744538 2.007843-11.760224 2.007843z m-137.967507-341.333334l105.268348 314.944538c2.868347 8.748459 9.035294 15.77591 17.210084 19.935014 8.17479 4.159104 17.496919 4.732773 26.245378 1.864426 3.872269-1.290756 7.60112-3.298599 10.756302-5.880112l163.352381-132.804482L466.434252 672.627451l1.290756-1.147339C763.308201 384.932213 915.043775 237.642577 918.772627 233.626891c0 0 2.007843-2.294678 0.286835-5.306443-1.003922-1.290756-2.438095-2.438095-5.306443-1.577591-200.784314 119.610084-404.293557 242.94902-604.934454 366.718207z" fill="#CAE0EE" ></path><path d="M460.840974 924.898599l7.457703-253.561904 165.933894 119.896918-168.658824 135.959664c-1.290756 1.003922-3.011765 0.860504-4.015686-0.430252-0.430252-0.430252-0.717087-1.147339-0.717087-1.864426z" fill="#94C3E2" ></path><path d="M463.709322 929.344538c-1.290756 0-2.438095-0.573669-3.2986-1.577591-0.573669-0.860504-1.003922-1.864426-1.003921-2.868348l7.60112-256.286834 169.519328 122.621848-1.434174 1.147339-168.658823 135.959664c-0.860504 0.717087-1.721008 1.003922-2.72493 1.003922z m6.023529-255.282913l-7.457703 250.836974c0 0.286835 0.143417 0.717087 0.286835 1.003922 0.430252 0.573669 1.434174 0.717087 2.007843 0.286835l167.22465-134.812325-162.061625-117.315406z" fill="#94C3E2" ></path></symbol><symbol id="icon-lianjie" viewBox="0 0 1079 1024"><path d="M695.355535 432.666896c-0.553495-1.10699-0.885592-2.186305-1.383737-3.265619-0.193723-0.193723-0.193723-0.359772-0.359771-0.719543-12.508983-26.318678-39.436506-43.366319-69.325226-41.013966-39.076734 3.265619-68.439634 39.021384-65.312388 79.841627 0.857917 10.516401 3.653066 20.147211 7.998 28.83708 19.78744 46.659613 11.097571 103.448181-25.377737 141.750022l-191.094085 199.950001a118.088119 118.088119 0 0 1-171.998513 0c-47.434506-49.537786-47.434506-130.098956 0-179.636742l71.234782-74.389703-0.52582-0.553494a75.911814 75.911814 0 0 0 24.326097-61.880721c-3.127246-40.820243-37.3609-71.51153-76.437634-68.24591a69.463599 69.463599 0 0 0-46.908685 23.966325l-0.166049-0.193723-72.618519 75.856464c-103.226783 107.793115-103.226783 282.36538 0 390.158495 103.171433 107.793115 270.299193 107.793115 373.498301 0l191.619904-200.1714c80.256748-83.992838 97.636485-208.307773 52.83108-310.289193z" fill="#5c8add" ></path><path d="M1002.047012 80.865592c-103.226783-107.82079-270.382217-107.82079-373.581325 0l-191.619905 200.199075c-80.284423 83.854464-97.66416 208.197074-52.997128 310.233843 0.52582 1.079315 0.857917 2.15863 1.383737 3.26562 0.166048 0.166048 0.166048 0.359772 0.332097 0.719543 12.536658 26.291004 39.46418 43.366319 69.3529 41.013966 39.076734-3.265619 68.439634-39.021384 65.312388-79.869302a78.679288 78.679288 0 0 0-7.998-28.864755c-19.78744-46.631938-11.097571-103.448181 25.377737-141.750022l191.287808-199.839302a118.088119 118.088119 0 0 1 172.026188 0c47.434506 49.537786 47.434506 130.126631 0 179.692091l-71.234782 74.417378 0.52582 0.553495a75.939489 75.939489 0 0 0-24.353772 61.88072c3.15492 40.847917 37.3609 71.51153 76.465309 68.245911a69.463599 69.463599 0 0 0 46.908685-23.938651l0.166049 0.166048 72.646194-75.856464c103.03306-107.82079 103.03306-282.642127 0-390.269194z" fill="#5c8add" ></path></symbol><symbol id="icon-liaotian" viewBox="0 0 1171 1024"><path d="M1068.71699 0.243751H102.193768C46.228437 0.243751 0.500666 45.045267 0.500666 99.74309v696.251622c0 54.697824 45.727771 99.450589 101.693102 99.450589h329.113198l120.851966 114.465677a48.652788 48.652788 0 0 0 66.641644 0l120.851966-114.465677h329.064448c55.965331 0 101.741852-44.752765 101.741852-99.450589V99.74309C1170.458842 45.045267 1124.682321 0.243751 1068.71699 0.243751z m-439.776354 596.849784h-370.989696c-27.933915 0-50.846551-22.425133-50.846551-49.774045 0-27.348912 22.912636-49.725294 50.846551-49.725294h370.989696c27.933915 0 50.846551 22.376382 50.846551 49.725294 0 27.348912-22.912636 49.774045-50.846551 49.774045z m287.18795-211.381252H254.782171a50.456549 50.456549 0 0 1-50.846551-49.725294c0-27.397662 22.912636-49.774045 50.846551-49.774045h661.346415c27.933915 0 50.846551 22.376382 50.846551 49.774045 0 27.348912-22.912636 49.725294-50.846551 49.725294z" fill="#5C8ADD" ></path></symbol><symbol id="icon-xinfeng" viewBox="0 0 1400 1024"><path d="M1301.63733163 214.78520234a207.81921797 207.81921797 0 0 1 7.02423018 52.42036465v489.73590176a205.10753818 205.10753818 0 0 1-205.05853125 205.05853125H283.05853124A205.15654424 205.15654424 0 0 1 77.99999999 756.79444971V267.20556699a201.36672685 201.36672685 0 0 1 7.02423106-52.42036465L586.24393329 562.1905874c69.44187217 51.96297217 146.36536612 49.13694404 214.1736961 0zM1103.60303056 62.0000167H283.05853124A204.50312753 204.50312753 0 0 0 106.37462518 163.41030547l489.71956641 335.75823018c62.43397646 50.77048623 127.85733457 50.31309463 194.62019765 0L1280.28693749 163.41030547A204.68281729 204.68281729 0 0 0 1103.60303056 62.0000167z m0 0" fill="#5c8add" ></path></symbol><symbol id="icon-QQ1" viewBox="0 0 1024 1024"><path d="M0 512a512 512 0 1 0 1024 0A512 512 0 1 0 0 512z" fill="#18ACFC" ></path><path d="M500.113 228.39c118.396-1.518 178.924 61.004 201 156 3.497 15.048 0.15 34.807 0 50 27.143 5.682 33.087 60.106 10 75v1h1c8.26 14.33 19.04 28.125 26 44 7.332 16.723 9.306 35.16 14 55 4.024 17.01-2.287 51.505-10 57-0.771 0.683-2.231 1.312-3 2-14.601-3.016-30.377-16.865-38-27-3.065-4.074-5.275-9.672-10-12-0.395 21.568-12.503 41.15-22 55-3.514 5.123-14.073 13.217-14 18 3.691 2.836 8.305 2.956 13 5 10.513 4.577 25.449 13.168 32 22 2.334 3.146 5.548 7.555 7 11 16.193 38.414-36.527 48.314-63 54-27.185 5.839-77.818-10.224-92-19-8.749-5.414-16.863-18.573-29-19-3.666 2.389-14.438 1.132-20 1-16.829 32.804-101.913 47.868-148 31-14.061-5.146-43.398-17.695-38-40 4.437-18.327 19.947-29.224 35-37 5.759-2.975 18.915-4.419 22-10-13.141-8.988-24.521-28.659-31-44-3.412-8.077-4.193-25.775-9-32-7.789 12.245-32.097 36.91-52 33-3.071-4.553-7.213-9.097-9-15-4.792-15.835-1.81-40.379 2-54 8.117-29.02 16.965-50.623 32-72 4.672-6.643 11.425-12.135 16-19-8.945-9.733-6.951-37.536-1-49 4.002-7.709 9.701-7.413 10-20-1.92-3.022-0.071-8.604-1-13-4.383-20.75 3.273-47.552 9-63 19.8-53.421 53.712-90.466 105-112 11.986-5.033 25.833-7.783 39-11 5.322-1.3 11.969 0.518 16-2z" fill="#FFFFFF" ></path></symbol><symbol id="icon-rss" viewBox="0 0 1024 1024"><path d="M749.61196492 908.06119793C749.61196492 560.41848146 463.58151854 274.36328126 115.93880207 274.36328126V115.93880207c434.50388795 0 792.12239584 357.61850789 792.12239586 792.12239586zM224.55858562 690.72261555a108.91682943 108.91682943 0 0 1 108.69404499 108.74355267C333.25263061 859.29616292 284.24005737 908.06119793 224.31104736 908.06119793 164.48105265 908.06119793 115.96355592 859.41993206 115.96355592 799.46616822s48.69077351-108.71879883 108.61978351-108.74355267zM641.01693522 908.06119793h-153.96879069c0-203.60020956-167.50913289-371.13409627-371.10934246-371.13409629v-153.96879068c288.03550619 0 525.07813313 237.11688843 525.07813315 525.10288697z" fill="#FFA500" ></path></symbol><symbol id="icon-youxiang" viewBox="0 0 1024 1024"><path d="M583.60666667 972h-68.08c-8.43333333 0-15.33333333-6.9-15.33333334-15.33333333V609.52c0-8.43333333 6.9-15.33333333 15.33333334-15.33333333h68.08c8.43333333 0 15.33333333 6.9 15.33333333 15.33333333V956.66666667c0 8.43333333-6.9 15.33333333-15.33333333 15.33333333z" fill="#629FF9" ></path><path d="M294.42 167c-113.62 0-205.77333333 92-205.77333333 205.31333333v336.72h411.39333333V372.31333333c0.15333333-113.31333333-92-205.31333333-205.62-205.31333333z" fill="#2166CC" ></path><path d="M519.97333333 627H216.98666667c-25.45333333 0-46-20.54666667-46-46V393.78c0-25.45333333 20.54666667-46 46-46h302.98666666c25.45333333 0 46 20.54666667 46 46V581c0 25.45333333-20.54666667 46-46 46z" fill="#D2E4FF" ></path><path d="M565.97333333 397a49.22 49.22 0 0 0-49.37333333-49.22H220.36c-27.29333333 0-49.37333333 22.08-49.37333333 49.22v10.27333333l179.4 94.60666667c11.34666667 5.98 24.84 5.98 36.18666666 0l179.4-94.60666667v-10.27333333z" fill="#FFFFFF" ></path><path d="M730.5 167h-427.8v0.46c109.78666667 4.29333333 197.49333333 94.3 197.49333333 205.00666667v336.72h411.39333334c27.29333333 0 49.37333333-22.08 49.37333333-49.22V397c0-126.96-103.19333333-230-230.46-230z" fill="#4E8DF6" ></path><path d="M845.80666667 52H681.12666667c-9.04666667 0-16.40666667 7.36-16.40666667 16.40666667v336.72a24.67133333 24.67133333 0 1 0 49.37333333 0V134.18666667h131.71333334c9.04666667 0 16.40666667-7.36 16.40666666-16.40666667V68.40666667c0-9.04666667-7.36-16.40666667-16.40666666-16.40666667z" fill="#2166CC" ></path><path d="M896.25333333 659.81333333h-35.11333333c-8.43333333 0-15.33333333-6.9-15.33333333-15.33333333v-35.11333333c0-8.43333333 6.9-15.33333333 15.33333333-15.33333334h35.11333333c8.43333333 0 15.33333333 6.9 15.33333334 15.33333334v35.11333333c0 8.58666667-6.9 15.33333333-15.33333334 15.33333333z" fill="#FFFFFF" ></path><path d="M88.8 709.18666667l-24.22666667 131.40666666c-9.66 54.43333333 26.83333333 98.59333333 81.26666667 98.59333334h213.9c54.58666667 0 106.56666667-44.16 116.22666667-98.59333334l23.15333333-131.40666666H88.8z" fill="#2974CE" ></path></symbol><symbol id="icon-gitHub" viewBox="0 0 1049 1024"><path d="M523.6581816 52C262.83923907 52 52 262.8401375 52 523.6581816c0 208.49703047 135.09433812 384.97758117 322.50789391 447.44906532 23.42658172 4.68531653 32.01647887-10.15136894 32.01647796-22.64584583 0-10.93210574-0.78163433-48.41463703-0.78163433-87.45953855-131.18885996 28.11189824-158.5200223-56.22379738-158.52002231-56.22379739-21.08437312-54.66232469-52.3201152-68.71827336-52.3201152-68.71827335-42.94858371-28.89353348 3.12384382-28.89353348 3.12384384-28.89353348 47.63479867 3.12384382 72.62285398 48.41643391 72.62285398 48.4164339 42.16784782 71.84121875 110.10538527 51.53758242 137.43654672 39.04400399 3.90457972-30.45500618 16.3990566-51.5393793 29.67427028-63.25222094-104.64023039-10.93300418-214.74561566-51.53848086-214.74561657-232.70524742 0-51.53848086 18.74126609-93.70632867 48.4164339-126.50444187-4.68621496-11.71284164-21.08527156-60.12837711 4.6844181-124.94207075 0 0 39.82563922-12.49447688 129.62738726 48.41463704 37.48253129-10.15136894 78.08980484-15.61742227 117.91454562-15.61742137s80.43201433 5.46605242 117.91454473 15.61742137c89.80264648-60.90911391 129.62828571-48.41463703 129.62828571-48.41463704 25.76879122 64.81369363 9.37063305 113.22922911 4.68531651 124.94207075 30.45410773 32.79721477 48.41463703 74.96506258 48.41463703 126.50444187 0 181.16676656-110.10538527 220.99150644-215.52545401 232.70524742 17.1797934 14.83668547 32.01647887 42.94858371 32.01647886 87.45953946 0 63.25222094-0.78163433 114.009965-0.78163523 129.62738636 0 12.49447688 8.59079468 27.33116234 32.01737731 22.64584583 187.41265734-62.4705866 322.50699547-238.95203574 322.50699546-447.44996375C995.31636231 262.8401375 783.69369203 52 523.6581816 52z" fill="#663399" ></path><path d="M230.82365863 729.03136735c-0.7807359 2.34310703-4.68531653 3.12384382-7.80916035 1.56237113s-5.46605242-4.68531653-3.90368129-7.02842356c0.7807359-2.34220859 4.68531653-3.12384382 7.80826192-1.56147269s4.68531653 4.68531653 3.90457972 7.02752512z m18.7412661 21.08437312c-2.34220859 2.34220859-7.02752512 0.78163433-9.37063305-2.34310703-3.12294539-3.12294539-3.90457972-7.80826192-1.5614727-10.15136894 2.34220859-2.34220859 6.24678922-0.7807359 9.37063305 2.34310702 3.12384382 3.90457972 3.90457972 8.58899782 1.5614727 10.15136895zM268.30618992 777.44690281c-3.12294539 2.34220859-7.80826192 0-10.15136895-3.90457972-3.12384382-3.90457972-3.12384382-9.37063305 0-10.93210574 3.12384382-2.34310703 7.80916035 0 10.15226739 3.90457972 3.12294539 3.90368129 3.12294539 8.58899782 0 10.93210574z m25.76968965 26.55042555c-2.34220859 3.12294539-7.80916035 2.34220859-12.49447688-1.56237113-3.90457972-3.90368129-5.46605242-9.37063305-2.34220859-11.71284164 2.34220859-3.12384382 7.80826192-2.34310703 12.49447687 1.56147269 3.90368129 3.12384382 4.68531653 8.58989625 2.3422086 11.71374008z m35.1403227 14.83668637c-0.78163433 3.90457972-6.24768766 5.46605242-11.71374008 3.90457972-5.46605242-1.5614727-8.58899782-6.24768766-7.80916036-9.37063305 0.78163433-3.90457972 6.24768766-5.46605242 11.71374009-3.90457972 5.46605242 1.5614727 8.58899782 5.46605242 7.80916035 9.37063305z m38.26416562 3.12384382c0 3.90457972-4.68621496 7.02752512-10.15226738 7.02752512-5.46605242 0-10.15226738-3.12294539-10.15226739-7.02752512s4.68621496-7.02842356 10.15226739-7.02842445c5.46605242 0 10.15226738 3.12384382 10.15226738 7.02842445z m35.92016106-6.24768766c0.78163433 3.90457972-3.12384382 7.80916035-8.58899872 8.58989625-5.46695086 0.78163433-10.15226738-1.5614727-10.93390172-5.46605241-0.77983747-3.90457972 3.12384382-7.80916035 8.5907947-8.58899872 5.46605242-0.78163433 10.15136894 1.56057426 10.93210574 5.46515488z m0 0" fill="#663399" ></path></symbol><symbol id="icon-bilibili" viewBox="0 0 1024 1024"><path d="M832.61667555 181.33447111h-164.32545185l74.45617778-74.45617778c12.84020148-12.84020148 12.84020148-30.8140563 0-43.65425778-12.84020148-12.84020148-30.8140563-12.84020148-43.65425778 0L573.2882963 189.04101925H450.04420741L324.2272237 63.23617185c-10.26730667-12.84020148-25.68040297-15.40096-41.08136295-7.70654815-2.57289482 0-2.57289482 2.57289482-5.13365334 5.13365333-12.84020148 12.84020148-12.84020148 30.8140563 0 43.65425779l77.02907259 77.02907259h-164.32545185c-89.86927408 0-164.32545185 74.45617778-164.32545185 164.32545184v408.24073483c0 87.29637925 74.45617778 161.75255703 164.32545185 161.75255703h25.68040296c0 30.8140563 25.68040297 53.92156445 53.92156444 53.92156444s53.92156445-25.68040297 53.92156445-53.92156444H704.23893333c2.57289482 30.8140563 28.24116148 53.92156445 59.05521778 51.34866964 28.24116148-2.57289482 48.78791111-23.10750815 51.34866964-51.34866964h20.53461333c89.86927408 0 164.32545185-74.45617778 164.32545184-164.32545186V343.09916445c-2.56075852-89.86927408-77.02907259-161.76469333-166.88621037-161.76469334z m-5.13365333 634.19429926H200.99527111c-33.37481482 0-59.05521778-28.24116148-61.61597629-61.61597629l-2.57289482-415.94728297c0-33.37481482 28.24116148-61.6159763 61.6159763-61.61597629h626.48775111c33.37481482 0 59.05521778 28.24116148 61.61597629 61.61597629l2.57289482 415.94728297c-2.57289482 35.93557333-28.24116148 61.6159763-61.6159763 61.61597629z" fill="#ff7299" ></path><path d="M403.82919111 417.55534222l15.40096 77.0290726-205.40681481 38.50846815-15.40096-77.0290726 205.40681481-38.50846815z m197.70026667 77.0290726l15.40096-77.0290726 205.40681481 38.50846815-15.40096 77.0290726-205.40681481-38.50846815z m41.08136297 161.75255703c0 2.57289482 0 7.70654815-2.57289483 10.26730667-12.84020148 28.24116148-41.08136297 46.2150163-74.45617777 48.78791111-20.53461333 0-41.08136297-10.26730667-53.92156445-25.68040296-15.40096 15.40096-33.37481482 25.68040297-53.92156445 25.68040296-30.8140563-2.57289482-59.05521778-20.53461333-74.45617777-48.78791111 0-2.57289482-2.57289482-5.13365333-2.57289481-10.26730667 0-10.26730667 7.70654815-17.97385482 17.97385481-20.53461333h2.57289482c7.70654815 0 12.84020148 2.57289482 15.40096 10.26730666 0 0 20.53461333 28.24116148 38.50846815 28.24116149 35.94770963 0 35.94770963-30.8140563 56.48232296-53.92156445 23.10750815 25.68040297 23.10750815 53.92156445 56.48232296 53.92156445 23.10750815 0 38.50846815-28.24116148 38.50846815-28.24116149 2.57289482-5.13365333 10.26730667-10.26730667 15.40096-10.26730666 10.26730667-2.57289482 17.97385482 5.13365333 20.53461333 15.40096v5.13365333h0.0364089z" fill="#ff7299" ></path></symbol></svg>',        o = (o = document.getElementsByTagName("script"))[o.length - 1].getAttribute("data-injectcss"),        p = function (c, l) {            l.parentNode.insertBefore(c, l);        };    if (o && !c.__iconfont__svg__cssinject__) {        c.__iconfont__svg__cssinject__ = !0;        try {            document.write(                "<style>.svgfont {display: inline-block;width: 1em;height: 1em;fill: currentColor;vertical-align: -0.1em;font-size:16px;}</style>"            );        } catch (c) {            console && console.log(c);        }    }    function d() {        i || ((i = !0), a());    }    function m() {        try {            t.documentElement.doScroll("left");        } catch (c) {            return void setTimeout(m, 50);        }        d();    }    (l = function () {        var c,            l = document.createElement("div");        (l.innerHTML = v),            (v = null),        (l = l.getElementsByTagName("svg")[0]) &&        (l.setAttribute("aria-hidden", "true"),            (l.style.position = "absolute"),            (l.style.width = 0),            (l.style.height = 0),            (l.style.overflow = "hidden"),            (l = l),            (c = document.body).firstChild ? p(l, c.firstChild) : c.appendChild(l));    }),        document.addEventListener            ? ~["complete", "loaded", "interactive"].indexOf(document.readyState)            ? setTimeout(l, 0)            : ((h = function () {                document.removeEventListener("DOMContentLoaded", h, !1), l();            }),                document.addEventListener("DOMContentLoaded", h, !1))            : document.attachEvent &&            ((a = l),                (t = c.document),                (i = !1),                m(),                (t.onreadystatechange = function () {                    "complete" == t.readyState && ((t.onreadystatechange = null), d());                }));})(window);]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/readPercent.js"/>
      <url>/js/readPercent.js</url>
      
        <content type="html"><![CDATA[window.onscroll = percent;// 执行函数// 页面百分比function percent() {    let a = document.documentElement.scrollTop || window.pageYOffset, // 卷去高度        b = Math.max(document.body.scrollHeight, document.documentElement.scrollHeight, document.body.offsetHeight, document.documentElement.offsetHeight, document.body.clientHeight, document.documentElement.clientHeight) - document.documentElement.clientHeight, // 整个网页高度        result = Math.round(a / b * 100), // 计算百分比        up = document.querySelector("#go-up") // 获取按钮    if (result <= 95) {        up.childNodes[0].style.display = 'none'        up.childNodes[1].style.display = 'block'        up.childNodes[1].innerHTML = result;    } else {        up.childNodes[1].style.display = 'none'        up.childNodes[0].style.display = 'block'    }}]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>tags</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/runtime/runtime.js"/>
      <url>/js/runtime/runtime.js</url>
      
        <content type="html"><![CDATA[var now = new Date;function createtime() {    var t = new Date("03/29/2023 00:00:00");    now.setTime(now.getTime() + 250);    var e = (now - t) / 1e3 / 60 / 60 / 24, a = Math.floor(e), n = (now - t) / 1e3 / 60 / 60 - 24 * a,        r = Math.floor(n);    1 == String(r).length && (r = "0" + r);    var s = (now - t) / 1e3 / 60 - 1440 * a - 60 * r, i = Math.floor(s);    1 == String(i).length && (i = "0" + i);    var o = (now - t) / 1e3 - 86400 * a - 3600 * r - 60 * i, l = Math.round(o);    1 == String(l).length && (l = "0" + l);    let g = "";    g = r < 18 && r >= 9        ? `<br> 本站居然运行了 ${a} 天</span><span id='runtime'> ${r} 小时 ${i} 分 ${l} 秒 </span> <i class='fas fa-heartbeat' style='color:red'></i>` : `<br> 本站居然运行了 ${a} 天</span><span id='runtime'> ${r} 小时 ${i} 分 ${l} 秒 </span> <i class='fas fa-heartbeat' style='color:red'></i>`, document.getElementById("workboard") && (document.getElementById("workboard").innerHTML = g)}setInterval((() => {    createtime()}), 250);]]></content>
      
    </entry>
    
    
  
</search>
